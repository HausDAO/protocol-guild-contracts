{
  "address": "0x329a79C1967565a89cD54fCC40614b3C7dfBD9d4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_activityMultiplier",
          "type": "uint32"
        }
      ],
      "name": "InvalidMember__ActivityMultiplier",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        }
      ],
      "name": "InvalidMember__Address",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_startDate",
          "type": "uint32"
        }
      ],
      "name": "InvalidMember__StartDateInTheFuture",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MemberRegistry__ParamsSizeMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        }
      ],
      "name": "Member__AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Member__IndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        }
      ],
      "name": "Member__NotRegistered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NetWorkRegistry__ParamsSizeMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NetworkRegistryShaman__InvalidBaalAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NetworkRegistryShaman__NotManagerShaman",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NetworkRegistry__ConnextOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NetworkRegistry__InvalidConnextAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NetworkRegistry__InvalidOrImmutableSplit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NetworkRegistry__InvalidReplica",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NetworkRegistry__NeitherOwnableNorReplicaUpdater",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        }
      ],
      "name": "NetworkRegistry__NoReplicaOnNetwork",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NetworkRegistry__OnlyMainRegistry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NetworkRegistry__OnlyOwnerOrUpdater",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NetworkRegistry__OnlyReplicaRegistry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NetworkRegistry__ValueSentLessThanRelayerFees",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Split_ControlNotHandedOver",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_registryAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "_domainId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "NetworkRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_startDate",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_activityMultiplier",
          "type": "uint32"
        }
      ],
      "name": "NewMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_connext",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_updaterDomain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_updater",
          "type": "address"
        }
      ],
      "name": "NewUpdaterConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_timestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalMemberUpdates",
          "type": "uint256"
        }
      ],
      "name": "RegistryActivityUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_sharesToMint",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_burnShares",
          "type": "bool"
        }
      ],
      "name": "ShamanConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_splitMain",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_split",
          "type": "address"
        }
      ],
      "name": "SplitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_split",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_splitHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_splitDistributorFee",
          "type": "uint32"
        }
      ],
      "name": "SplitsDistributionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "_originDomain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "_action",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_originSender",
          "type": "address"
        }
      ],
      "name": "SyncActionPerformed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "_action",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_registryAddress",
          "type": "address"
        }
      ],
      "name": "SyncMessageSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_activityMultiplier",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_startDate",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_secondsActive",
          "type": "uint32"
        }
      ],
      "name": "UpdateMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_secondsActive",
          "type": "uint32"
        }
      ],
      "name": "UpdateMemberSeconds",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "acceptNetworkSplitControl",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptSplitControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_activityMultipliers",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_startDates",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_secondsActive",
          "type": "uint32[]"
        }
      ],
      "name": "addOrUpdateMembersBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baal",
      "outputs": [
        {
          "internalType": "contract IBaal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_activityMultipliers",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_startDates",
          "type": "uint32[]"
        }
      ],
      "name": "batchNewMembers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_activityMultipliers",
          "type": "uint32[]"
        }
      ],
      "name": "batchUpdateMembersActivity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnShares",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_sortedList",
          "type": "address[]"
        }
      ],
      "name": "calculate",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_percentAllocations",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        }
      ],
      "name": "calculateContributionOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateTotalContributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "cancelNetworkSplitControlTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelSplitControlTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connext",
      "outputs": [
        {
          "internalType": "contract IConnext",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        }
      ],
      "name": "getMember",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "secondsActive",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "startDate",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "activityMultiplier",
              "type": "uint32"
            }
          ],
          "internalType": "struct DataTypes.Member",
          "name": "member",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "secondsActive",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "startDate",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "activityMultiplier",
              "type": "uint32"
            }
          ],
          "internalType": "struct DataTypes.Member[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fromIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_toIndex",
          "type": "uint256"
        }
      ],
      "name": "getMembersPaginated",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "secondsActive",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "startDate",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "activityMultiplier",
              "type": "uint32"
            }
          ],
          "internalType": "struct DataTypes.Member[]",
          "name": "memberList",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        }
      ],
      "name": "getMembersProperties",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_initializationParams",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMainRegistry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastActivityUpdate",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "replicaRegistry",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "domainId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "address[]",
          "name": "_connextAddrs",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_updaterDomains",
          "type": "uint32[]"
        },
        {
          "internalType": "address[]",
          "name": "_updaterAddrs",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "setNetworkUpdaterConfig",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sharesToMint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_burnShares",
          "type": "bool"
        }
      ],
      "name": "setShamanConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_splitMain",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_split",
          "type": "address"
        }
      ],
      "name": "setSplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_connext",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_updaterDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_updater",
          "type": "address"
        }
      ],
      "name": "setUpdaterConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharesToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "split",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "splitMain",
      "outputs": [
        {
          "internalType": "contract ISplitMain",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_activityMultipliers",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_startDates",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncBatchNewMembers",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_activityMultipliers",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncBatchUpdateMembersActivity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncNetworkMemberRegistry",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_sortedList",
          "type": "address[]"
        },
        {
          "internalType": "uint32",
          "name": "_splitDistributorFee",
          "type": "uint32"
        },
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncUpdateAll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncUpdateSecondsActive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_sortedList",
          "type": "address[]"
        },
        {
          "internalType": "uint32",
          "name": "_splitDistributorFee",
          "type": "uint32"
        },
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncUpdateSplits",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMembers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "address[]",
          "name": "_newControllers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "transferNetworkSplitControl",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newController",
          "type": "address"
        }
      ],
      "name": "transferSplitControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_sortedList",
          "type": "address[]"
        },
        {
          "internalType": "uint32",
          "name": "_splitDistributorFee",
          "type": "uint32"
        }
      ],
      "name": "updateAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "domainId",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "registryAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "internalType": "struct DataTypes.Registry",
          "name": "_newRegistry",
          "type": "tuple"
        }
      ],
      "name": "updateNetworkRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "address[]",
          "name": "_splitsMain",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_splits",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "updateNetworkSplit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateSecondsActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_sortedList",
          "type": "address[]"
        },
        {
          "internalType": "uint32",
          "name": "_splitDistributorFee",
          "type": "uint32"
        }
      ],
      "name": "updateSplits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updater",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updaterDomain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_originSender",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_incomingCalldata",
          "type": "bytes"
        }
      ],
      "name": "xReceive",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5d51d5a7e66f0f065c042eaf7554d3130e416896b6408dfafda647c334e562ab",
  "receipt": {
    "to": null,
    "from": "0x10136Fa41B6522E4DBd068C6F7D80373aBbCFBe6",
    "contractAddress": "0x329a79C1967565a89cD54fCC40614b3C7dfBD9d4",
    "transactionIndex": 3,
    "gasUsed": "5049154",
    "logsBloom": "0x
    "blockHash": "0x2e99910b9c2d1be2cb92177082ce740b7e00af8fc527c4690da68839b47b491d",
    "transactionHash": "0x5d51d5a7e66f0f065c042eaf7554d3130e416896b6408dfafda647c334e562ab",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 10312462,
        "transactionHash": "0x5d51d5a7e66f0f065c042eaf7554d3130e416896b6408dfafda647c334e562ab",
        "address": "0x329a79C1967565a89cD54fCC40614b3C7dfBD9d4",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0x2e99910b9c2d1be2cb92177082ce740b7e00af8fc527c4690da68839b47b491d"
      }
    ],
    "blockNumber": 10312462,
    "cumulativeGasUsed": "5192708",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4a8bfe7fd6822374d4c17e9583fdd17a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_activityMultiplier\",\"type\":\"uint32\"}],\"name\":\"InvalidMember__ActivityMultiplier\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"InvalidMember__Address\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_startDate\",\"type\":\"uint32\"}],\"name\":\"InvalidMember__StartDateInTheFuture\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MemberRegistry__ParamsSizeMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"Member__AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Member__IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"Member__NotRegistered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NetWorkRegistry__ParamsSizeMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NetworkRegistryShaman__InvalidBaalAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NetworkRegistryShaman__NotManagerShaman\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NetworkRegistry__ConnextOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NetworkRegistry__InvalidConnextAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NetworkRegistry__InvalidOrImmutableSplit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NetworkRegistry__InvalidReplica\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NetworkRegistry__NeitherOwnableNorReplicaUpdater\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"}],\"name\":\"NetworkRegistry__NoReplicaOnNetwork\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NetworkRegistry__OnlyMainRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NetworkRegistry__OnlyOwnerOrUpdater\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NetworkRegistry__OnlyReplicaRegistry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NetworkRegistry__ValueSentLessThanRelayerFees\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Split_ControlNotHandedOver\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_domainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"NetworkRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_startDate\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_activityMultiplier\",\"type\":\"uint32\"}],\"name\":\"NewMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_connext\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_updaterDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_updater\",\"type\":\"address\"}],\"name\":\"NewUpdaterConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_timestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalMemberUpdates\",\"type\":\"uint256\"}],\"name\":\"RegistryActivityUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sharesToMint\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_burnShares\",\"type\":\"bool\"}],\"name\":\"ShamanConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_splitMain\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_split\",\"type\":\"address\"}],\"name\":\"SplitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_split\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_splitHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_splitDistributorFee\",\"type\":\"uint32\"}],\"name\":\"SplitsDistributionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_originDomain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"_action\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_originSender\",\"type\":\"address\"}],\"name\":\"SyncActionPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"_action\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"}],\"name\":\"SyncMessageSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_activityMultiplier\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_startDate\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_secondsActive\",\"type\":\"uint32\"}],\"name\":\"UpdateMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_secondsActive\",\"type\":\"uint32\"}],\"name\":\"UpdateMemberSeconds\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"acceptNetworkSplitControl\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptSplitControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_activityMultipliers\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_startDates\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_secondsActive\",\"type\":\"uint32[]\"}],\"name\":\"addOrUpdateMembersBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baal\",\"outputs\":[{\"internalType\":\"contract IBaal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_activityMultipliers\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_startDates\",\"type\":\"uint32[]\"}],\"name\":\"batchNewMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_activityMultipliers\",\"type\":\"uint32[]\"}],\"name\":\"batchUpdateMembersActivity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnShares\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_sortedList\",\"type\":\"address[]\"}],\"name\":\"calculate\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_percentAllocations\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"calculateContributionOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateTotalContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"cancelNetworkSplitControlTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelSplitControlTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connext\",\"outputs\":[{\"internalType\":\"contract IConnext\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"getMember\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"secondsActive\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"activityMultiplier\",\"type\":\"uint32\"}],\"internalType\":\"struct DataTypes.Member\",\"name\":\"member\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"secondsActive\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"activityMultiplier\",\"type\":\"uint32\"}],\"internalType\":\"struct DataTypes.Member[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fromIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toIndex\",\"type\":\"uint256\"}],\"name\":\"getMembersPaginated\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"secondsActive\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"activityMultiplier\",\"type\":\"uint32\"}],\"internalType\":\"struct DataTypes.Member[]\",\"name\":\"memberList\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"getMembersProperties\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_initializationParams\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMainRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastActivityUpdate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"replicaRegistry\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"domainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"address[]\",\"name\":\"_connextAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_updaterDomains\",\"type\":\"uint32[]\"},{\"internalType\":\"address[]\",\"name\":\"_updaterAddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"setNetworkUpdaterConfig\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharesToMint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_burnShares\",\"type\":\"bool\"}],\"name\":\"setShamanConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_splitMain\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_split\",\"type\":\"address\"}],\"name\":\"setSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_connext\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_updaterDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_updater\",\"type\":\"address\"}],\"name\":\"setUpdaterConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"split\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitMain\",\"outputs\":[{\"internalType\":\"contract ISplitMain\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_activityMultipliers\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_startDates\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncBatchNewMembers\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_activityMultipliers\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncBatchUpdateMembersActivity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncNetworkMemberRegistry\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_sortedList\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"_splitDistributorFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncUpdateAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncUpdateSecondsActive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_sortedList\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"_splitDistributorFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncUpdateSplits\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMembers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"address[]\",\"name\":\"_newControllers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"transferNetworkSplitControl\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"transferSplitControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_sortedList\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"_splitDistributorFee\",\"type\":\"uint32\"}],\"name\":\"updateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"domainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.Registry\",\"name\":\"_newRegistry\",\"type\":\"tuple\"}],\"name\":\"updateNetworkRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"address[]\",\"name\":\"_splitsMain\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_splits\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"updateNetworkSplit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSecondsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_sortedList\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"_splitDistributorFee\",\"type\":\"uint32\"}],\"name\":\"updateSplits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updaterDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_originSender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_incomingCalldata\",\"type\":\"bytes\"}],\"name\":\"xReceive\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"DAOHaus\",\"details\":\"Setup contract as a MolochV3 manager shaman module to mint/burn shares based on member activity. Features and important things to consider: - Inherits all the features of NetworkRegistry contract. - It can be setup as a manager Shaman module on a MolochV3 DAO (codename Baal) to mint/burn shares when   adding/updating members without the need of sending a separate/additional actions within a multicall proposal. - You can setup the amount of {sharesToMint} to new members being added to the registry. - You can enable/disable burning shares to inactive members (activityMultiplier == 0). - As the DAO usually lives only on the main network, it is recommended to deploy a NetworkRegistryShaman   as the main registry while replicas being of type NetworkRegistry.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"InvalidMember__ActivityMultiplier(address,uint32)\":[{\"params\":{\"_activityMultiplier\":\"activity multiplier\",\"_memberAddress\":\"member address\"}}],\"InvalidMember__Address(address)\":[{\"params\":{\"_memberAddress\":\"submitted member address\"}}],\"InvalidMember__StartDateInTheFuture(address,uint32)\":[{\"params\":{\"_memberAddress\":\"member address\",\"_startDate\":\"start date in seconds\"}}],\"Member__AlreadyRegistered(address)\":[{\"params\":{\"_memberAddress\":\"member address\"}}],\"Member__NotRegistered(address)\":[{\"params\":{\"_memberAddress\":\"member address\"}}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"NetworkRegistryUpdated(uint32,address,uint32,address)\":{\"params\":{\"_chainId\":\"network chainId where the replica lives\",\"_delegate\":\"Delegate address in case of a bridge tx failure (currently not in use)\",\"_domainId\":\"Connext domain ID that correspond to the network where the replica lives\",\"_registryAddress\":\"replica contract address\"}},\"NewMember(address,uint32,uint32)\":{\"params\":{\"_activityMultiplier\":\"member activity multiplier\",\"_memberAddress\":\"member address\",\"_startDate\":\"timestamp the member started activities in seconds\"}},\"NewUpdaterConfig(address,uint32,address)\":{\"params\":{\"_connext\":\"Connext contract address\",\"_updater\":\"new Updater address\",\"_updaterDomain\":\"new Updater domain ID\"}},\"RegistryActivityUpdate(uint32,uint256)\":{\"params\":{\"_timestamp\":\"timestamp registry activity update epoch was executed\",\"_totalMemberUpdates\":\"total updated members during the epoch\"}},\"ShamanConfigUpdated(uint256,bool)\":{\"params\":{\"_burnShares\":\"wether or not to burn shares to inactive members\",\"_sharesToMint\":\"new amount of shares to mint to registered members\"}},\"SplitUpdated(address,address)\":{\"params\":{\"_split\":\"new 0xSplitWallet contract address\",\"_splitMain\":\"new 0xSplitMain contract address\"}},\"SplitsDistributionUpdated(address,bytes32,uint32)\":{\"params\":{\"_split\":\"0xSplit contract address\",\"_splitDistributorFee\":\"split fee set at reward for the address that executes the distribution\",\"_splitHash\":\"hash of the split distribution parameters\"}},\"SyncActionPerformed(bytes32,uint32,bytes4,bool,address)\":{\"params\":{\"_action\":\"Function selector for the action executed on the replica\",\"_originDomain\":\"Connext domain ID that correspond to the network where the sync message was submitted\",\"_originSender\":\"main NetworkRegistry address that forwarded the sync message through the Connext bridge\",\"_success\":\"Whether or not the action execution succeeded\",\"_transferId\":\"transfer ID returned by Connext that identifies the received xCall message\"}},\"SyncMessageSubmitted(bytes32,uint32,bytes4,address)\":{\"params\":{\"_action\":\"Function selector for the action to be executed on the replica\",\"_chainId\":\"chainId of the destination network\",\"_registryAddress\":\"replica NetworkRegistry address\",\"_transferId\":\"Transfer ID returned by Connext to identify the executed xCall\"}},\"UpdateMember(address,uint32,uint32,uint32)\":{\"params\":{\"_activityMultiplier\":\"new member activity multiplier\",\"_memberAddress\":\"member address\",\"_secondsActive\":\"member seconds active since last update\",\"_startDate\":\"timestamp the member started activities in seconds\"}},\"UpdateMemberSeconds(address,uint32)\":{\"params\":{\"_memberAddress\":\"member address\",\"_secondsActive\":\"member activity in seconds since last registry update\"}}},\"kind\":\"dev\",\"methods\":{\"acceptNetworkSplitControl(uint32[],uint256[])\":{\"details\":\"Callable by main registry owner\",\"params\":{\"_chainIds\":\"a list of network chainIds where valid replicas live\",\"_relayerFees\":\"a list of fees to be paid to the Connext relayer per sync message forwarded\"}},\"acceptSplitControl()\":{\"details\":\"Callable on both main and replica registries\"},\"addOrUpdateMembersBatch(address[],uint32[],uint32[],uint32[])\":{\"details\":\"Callable on a replica registry through the Connext bridge. The syncNetworkMemberRegistry function ensures that array params will always be the same length so there is no need for args validation\",\"params\":{\"_activityMultipliers\":\"Activity multipliers for each new member\",\"_members\":\"A list of member addresses to be added to the registry\",\"_secondsActive\":\"A list of members reported activity in seconds\",\"_startDates\":\"A list of dates when each member got active\"}},\"batchNewMembers(address[],uint32[],uint32[])\":{\"details\":\"Callable on a replica registry through the Connext bridge\",\"params\":{\"_activityMultipliers\":\"Activity multipliers for each new member\",\"_members\":\"A list of member addresses to be added to the registry\",\"_startDates\":\"A list of dates when each member got active\"}},\"batchUpdateMembersActivity(address[],uint32[])\":{\"details\":\"Callable on a replica registry through the Connext bridge\",\"params\":{\"_activityMultipliers\":\"New activity multipliers for each member\",\"_members\":\"A list of existing members\"}},\"calculate(address[])\":{\"details\":\"It uses the PGContribCalculator library to calculate member allocations\",\"params\":{\"_sortedList\":\"sorted list (ascending order) of members to be considered in the 0xSplit distribution\"},\"returns\":{\"_percentAllocations\":\"list of split allocations for each eligible recipient\",\"_receivers\":\"list of eligible recipients (non-zero allocation) for the next split distribution\"}},\"calculateContributionOf(address)\":{\"details\":\"It uses the PGContribCalculator library\",\"params\":{\"_memberAddress\":\"member address\"},\"returns\":{\"_0\":\"calculated contribution as uin256 value\"}},\"calculateTotalContributions()\":{\"details\":\"omit members with activityMultiplier == 0\",\"returns\":{\"total\":\"calculated contributions from active members\"}},\"cancelNetworkSplitControlTransfer(uint32[],uint256[])\":{\"details\":\"Callable by main registry owner\",\"params\":{\"_chainIds\":\"a list of network chainIds where valid replicas live\",\"_relayerFees\":\"a list of fees to be paid to the Connext relayer per sync message forwarded\"}},\"cancelSplitControlTransfer()\":{\"details\":\"Callable on both main and replica registries\"},\"getMember(address)\":{\"details\":\"It throws an exception if member is not in the db\",\"params\":{\"_memberAddress\":\"member address\"},\"returns\":{\"member\":\"metadata\"}},\"getMembers()\":{\"details\":\"In case of a growing number of members in the registry it is recommended to use {getMembersPaginated}\",\"returns\":{\"_0\":\"an array of Members in the registry\"}},\"getMembersPaginated(uint256,uint256)\":{\"params\":{\"_fromIndex\":\"starting index in Member's db\",\"_toIndex\":\"ending index in Member's db\"},\"returns\":{\"memberList\":\"an array of Members in the registry\"}},\"getMembersProperties(address[])\":{\"details\":\"Function should revert if any address in _memberAddrs is not registered\",\"params\":{\"_members\":\"list of registered member addresses\"},\"returns\":{\"_0\":\"list of member activity multipliers\",\"_1\":\"list of member start dates\",\"_2\":\"list of member seconds active\"}},\"initialize(bytes)\":{\"details\":\"Initialization parameters are abi-encoded (i.e. through the NetworkRegistrySummoner contract)\",\"params\":{\"_initializationParams\":\"abi-encoded parameters\"}},\"isMainRegistry()\":{\"details\":\"Verifies if updater params are set to zero\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setNetworkUpdaterConfig(uint32[],address[],uint32[],address[],uint256[])\":{\"details\":\"Callable by main registry owner\",\"params\":{\"_chainIds\":\"a list of network chainIds where valid replicas live\",\"_connextAddrs\":\"a list Connext bridge addresses to be used on each replica\",\"_relayerFees\":\"a list of fees to be paid to the Connext relayer per sync message forwarded\",\"_updaterAddrs\":\"a list of updater role addresses to be used on each replica\",\"_updaterDomains\":\"a list of Connext updater domain IDs to be used on each replica\"}},\"setShamanConfig(uint256,bool)\":{\"details\":\"Callable by the registry owner\",\"params\":{\"_burnShares\":\"Whether or not to burn shares if a member activityMultiplier is set to zero\",\"_sharesToMint\":\"Amount of shares to mint to new members\"}},\"setSplit(address,address)\":{\"details\":\"Callable on both main and replica registries\",\"params\":{\"_split\":\"The address of the 0xSplit contract\",\"_splitMain\":\"The address of the 0xSplitMain\"}},\"setUpdaterConfig(address,uint32,address)\":{\"details\":\"Callable on both main and replica registries\",\"params\":{\"_connext\":\"Connext contract address\",\"_updater\":\"Main NetworkRegistry address that will update the replica registry using the Connext bridge\",\"_updaterDomain\":\"Connext domain ID where the Updater lives\"}},\"syncBatchNewMembers(address[],uint32[],uint32[],uint32[],uint256[])\":{\"details\":\"Callable by the main registry owner\",\"params\":{\"_activityMultipliers\":\"A list of activity multipliers for each new member\",\"_chainIds\":\"a list of network chainIds where valid replicas live\",\"_members\":\"A list of member addresses to be added to the registry\",\"_relayerFees\":\"a list of fees to be paid to the Connext relayer per sync message forwarded\",\"_startDates\":\"A list of dates when each member got active\"}},\"syncBatchUpdateMembersActivity(address[],uint32[],uint32[],uint256[])\":{\"details\":\"Callable by the main registry owner\",\"params\":{\"_activityMultipliers\":\"A list of new activity multipliers for each member\",\"_chainIds\":\"a list of network chainIds where valid replicas live\",\"_members\":\"A list of existing members\",\"_relayerFees\":\"a list of fees to be paid to the Connext relayer per sync message forwarded\"}},\"syncNetworkMemberRegistry(address[],uint32[],uint256[])\":{\"details\":\"Callable by the main registry owner\",\"params\":{\"_chainIds\":\"a list of network chainIds where valid replicas live\",\"_members\":\"list of member addresses you look to sync\",\"_relayerFees\":\"a list of fees to be paid to the Connext relayer per sync message forwarded\"}},\"syncUpdateAll(address[],uint32,uint32[],uint256[])\":{\"details\":\"Callable by the main registry owner - Addresses in _sortedList must be in the member registry\",\"params\":{\"_chainIds\":\"a list of network chainIds where valid replicas live\",\"_relayerFees\":\"a list of fees to be paid to the Connext relayer per sync message forwarded\",\"_sortedList\":\"sorted list (ascending order) of members to be considered in the 0xSplit distribution\",\"_splitDistributorFee\":\"split fee set as reward for the address that executes the distribution\"}},\"syncUpdateSecondsActive(uint32[],uint256[])\":{\"details\":\"Callable by the main registry owner\",\"params\":{\"_chainIds\":\"a list of network chainIds where valid replicas live\",\"_relayerFees\":\"a list of fees to be paid to the Connext relayer per sync message forwarded\"}},\"syncUpdateSplits(address[],uint32,uint32[],uint256[])\":{\"details\":\"Callable by the main registry owner. - Addresses in _sortedList must be in the member registry\",\"params\":{\"_chainIds\":\"a list of network chainIds where valid replicas live\",\"_relayerFees\":\"a list of fees to be paid to the Connext relayer per sync message forwarded\",\"_sortedList\":\"sorted list (ascending order) of members to be considered in the 0xSplit distribution\",\"_splitDistributorFee\":\"split fee set as reward for the address that executes the distribution\"}},\"totalMembers()\":{\"returns\":{\"_0\":\"total members in the registry\"}},\"transferNetworkSplitControl(uint32[],address[],uint256[])\":{\"details\":\"Callable by main registry owner\",\"params\":{\"_chainIds\":\"a list of network chainIds where valid replicas live\",\"_newControllers\":\"new controller address per replica\",\"_relayerFees\":\"a list of fees to be paid to the Connext relayer per sync message forwarded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferSplitControl(address)\":{\"details\":\"Callable on both main and replica registries\",\"params\":{\"_newController\":\"new controller address\"}},\"updateAll(address[],uint32)\":{\"details\":\"Verify if the address list is sorted, has no duplicates and is valid\",\"params\":{\"_sortedList\":\"sorted list (ascending order) of members to be considered in the 0xSplit distribution\",\"_splitDistributorFee\":\"split fee set as reward for the address that executes the distribution\"}},\"updateNetworkRegistry(uint32,(uint32,address,address))\":{\"details\":\"Callable by main registry owner\",\"params\":{\"_chainId\":\"Network chainId where the replica registry lives\",\"_newRegistry\":\"Connext domain ID and replica NetworkRegistry address\"}},\"updateNetworkSplit(uint32[],address[],address[],uint256[])\":{\"details\":\"Callable by main registry owner\",\"params\":{\"_chainIds\":\"a list of network chainIds where valid replicas live\",\"_relayerFees\":\"a list of fees to be paid to the Connext relayer per sync message forwarded\",\"_splits\":\"a list of 0xSplit addresses for each replica\",\"_splitsMain\":\"a list of 0xSplit proxy addresses for each replica\"}},\"updateSecondsActive()\":{\"details\":\"It should manage a lastActivityUpdate state variable to update activity based on last update epoch. For new members it should update seconds based each member startDate.\"},\"updateSplits(address[],uint32)\":{\"details\":\"Verify if the address list is sorted, has no duplicates and is valid\",\"params\":{\"_sortedList\":\"sorted list (ascending order) of members to be considered in the 0xSplit distribution\",\"_splitDistributorFee\":\"split fee set as reward for the address that executes the distribution\"}},\"xReceive(bytes32,uint256,address,address,uint32,bytes)\":{\"details\":\"Forwarded messages can only be executed if the function selector is listed as valid action\",\"params\":{\"_incomingCalldata\":\"message calldata to be used to invoke the required syncing action\",\"_origin\":\"Connext domain ID that correspond to the network where the the xCall message was submitted\",\"_originSender\":\"main registry address that forwarded the xCall message through the Connext bridge\",\"_transferId\":\"transfer ID set by Connext to identify the incoming xCall message\"},\"returns\":{\"_0\":\"any data returned by the action call\"}}},\"stateVariables\":{\"baal\":{\"details\":\"Baal address\"}},\"title\":\"A cross-chain network registry and Baal shaman module to distribute funds escrowed in 0xSplit based on member activity.\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidMember__ActivityMultiplier(address,uint32)\":[{\"notice\":\"Invalid value for member activity multiplier\"}],\"InvalidMember__Address(address)\":[{\"notice\":\"Invalid member address\"}],\"InvalidMember__StartDateInTheFuture(address,uint32)\":[{\"notice\":\"Invalid member start date\"}],\"MemberRegistry__ParamsSizeMismatch()\":[{\"notice\":\"Function array parameter size mismatch\"}],\"Member__AlreadyRegistered(address)\":[{\"notice\":\"Member is already registered\"}],\"Member__IndexOutOfBounds()\":[{\"notice\":\"Member index out of bounds\"}],\"Member__NotRegistered(address)\":[{\"notice\":\"Member is not registered\"}],\"NetWorkRegistry__ParamsSizeMismatch()\":[{\"notice\":\"Function array parameter size mismatch\"}],\"NetworkRegistry__ConnextOnly()\":[{\"notice\":\"The function is callable through Connext only.\"}],\"NetworkRegistry__InvalidConnextAddress()\":[{\"notice\":\"Connext address cannot be 0x0\"}],\"NetworkRegistry__InvalidOrImmutableSplit()\":[{\"notice\":\"0xSplit doesn't exists or is immutable\"}],\"NetworkRegistry__InvalidReplica()\":[{\"notice\":\"Registry has invalid domainId or registry address values\"}],\"NetworkRegistry__NeitherOwnableNorReplicaUpdater()\":[{\"notice\":\"Network Registry must have an owner or updater address assigned.\"}],\"NetworkRegistry__NoReplicaOnNetwork(uint32)\":[{\"notice\":\"No replica registered on network with ID `_chainId`\"}],\"NetworkRegistry__OnlyMainRegistry()\":[{\"notice\":\"The function is callable only on a main registry by the owner.\"}],\"NetworkRegistry__OnlyOwnerOrUpdater()\":[{\"notice\":\"The function is callable only by the owner or by the updater through Connext.\"}],\"NetworkRegistry__OnlyReplicaRegistry()\":[{\"notice\":\"The function is callable only on a replica by the owner or through a sync event.\"}],\"NetworkRegistry__ValueSentLessThanRelayerFees()\":[{\"notice\":\"msg value sent does not cover relayer fees\"}],\"Split_ControlNotHandedOver()\":[{\"notice\":\"Control of 0xSplit contract hasn't been transferred to the registry\"}]},\"events\":{\"NetworkRegistryUpdated(uint32,address,uint32,address)\":{\"notice\":\"emitted when a new replica NetworkRegistry is added/updated\"},\"NewMember(address,uint32,uint32)\":{\"notice\":\"emitted after a new member is added to the registry\"},\"NewUpdaterConfig(address,uint32,address)\":{\"notice\":\"emitted after the Connext and Updater role settings are updated\"},\"RegistryActivityUpdate(uint32,uint256)\":{\"notice\":\"emitted after an registry activity update epoch is executed\"},\"ShamanConfigUpdated(uint256,bool)\":{\"notice\":\"emitted when the shaman config is updated\"},\"SplitUpdated(address,address)\":{\"notice\":\"emitted when the 0xSplit contract is updated\"},\"SplitsDistributionUpdated(address,bytes32,uint32)\":{\"notice\":\"emitted when a new split distribution is registered on the 0xSplit contract\"},\"SyncActionPerformed(bytes32,uint32,bytes4,bool,address)\":{\"notice\":\"emitted when a registry synchronization message is received and executed on a replica\"},\"SyncMessageSubmitted(bytes32,uint32,bytes4,address)\":{\"notice\":\"emitted when a registry synchronization message is forwarded through the Connext bridge\"},\"UpdateMember(address,uint32,uint32,uint32)\":{\"notice\":\"emitted after the an existing member is updated\"},\"UpdateMemberSeconds(address,uint32)\":{\"notice\":\"emitted after each time a member registry activity is updated\"}},\"kind\":\"user\",\"methods\":{\"acceptNetworkSplitControl(uint32[],uint256[])\":{\"notice\":\"Submit sync messages to replicas in order to accept control of the current 0xSplit contract\"},\"acceptSplitControl()\":{\"notice\":\"Accepts control of the current 0xSplit contract\"},\"addOrUpdateMembersBatch(address[],uint32[],uint32[],uint32[])\":{\"notice\":\"Adds and/or updates a set of members on the registry\"},\"baal()\":{\"notice\":\"MolochV3 DAO address\"},\"batchNewMembers(address[],uint32[],uint32[])\":{\"notice\":\"Adds a new set of members to the registry\"},\"batchUpdateMembersActivity(address[],uint32[])\":{\"notice\":\"Updates the activity multiplier for a set of existing members\"},\"burnShares()\":{\"notice\":\"Wether or not to burn shares if a member activityMultiplier is set to zero\"},\"calculate(address[])\":{\"notice\":\"Calculate 0xSplit distribution allocations\"},\"calculateContributionOf(address)\":{\"notice\":\"Calculates a member individual contribution\"},\"calculateTotalContributions()\":{\"notice\":\"Calculates the sum of all member contributions\"},\"cancelNetworkSplitControlTransfer(uint32[],uint256[])\":{\"notice\":\"Submit sync messages to replicas in order to cancel a transfer control request of the current 0xSplit contract\"},\"cancelSplitControlTransfer()\":{\"notice\":\"Cancel controller transfer of the current 0xSplit contract\"},\"connext()\":{\"notice\":\"Connext contract in the current domain\"},\"getMember(address)\":{\"notice\":\"Fetch a member's metadata from the registry.\"},\"getMembers()\":{\"notice\":\"Fetch all members from the registry\"},\"getMembersPaginated(uint256,uint256)\":{\"notice\":\"Fetch a subset of members from the registry\"},\"getMembersProperties(address[])\":{\"notice\":\"Fetch members metadata as separate property arrays\"},\"initialize(bytes)\":{\"notice\":\"Initializes the registry shaman contract\"},\"isMainRegistry()\":{\"notice\":\"Returns whether or not a registry has been setup as a main registry\"},\"lastActivityUpdate()\":{\"notice\":\"last timestamp where the registry got updated\"},\"replicaRegistry(uint32)\":{\"notice\":\"replicas tied to the current registry\"},\"setNetworkUpdaterConfig(uint32[],address[],uint32[],address[],uint256[])\":{\"notice\":\"Set Connext & Updater config settings for existing NetworkRegistry replicas via sync message\"},\"setShamanConfig(uint256,bool)\":{\"notice\":\"Updates the shaman config parameters\"},\"setSplit(address,address)\":{\"notice\":\"Updates the the 0xSplitMain proxy and 0xSplit contract addresses\"},\"setUpdaterConfig(address,uint32,address)\":{\"notice\":\"Set Connext and Updater config parameters\"},\"sharesToMint()\":{\"notice\":\"The amount of shares to mint to new members\"},\"split()\":{\"notice\":\"0xSplit contract where funds are hold\"},\"splitMain()\":{\"notice\":\"0xSplit proxy contract\"},\"syncBatchNewMembers(address[],uint32[],uint32[],uint32[],uint256[])\":{\"notice\":\"Adds a new set of members to the registry and sync with replicas\"},\"syncBatchUpdateMembersActivity(address[],uint32[],uint32[],uint256[])\":{\"notice\":\"Updates the activity multiplier for a set of existing members and sync with replicas\"},\"syncNetworkMemberRegistry(address[],uint32[],uint256[])\":{\"notice\":\"Sync the state of a set of registry members across networks. Useful whether you're looking to sync a new replica from scratch or a subset of members. For example this function can be used to sync member's state in batches instead of doing a full registry sync which could become pretty gas intensive with a growing list of members.\"},\"syncUpdateAll(address[],uint32,uint32[],uint256[])\":{\"notice\":\"Executes both {updateSecondsActive} to update member's activity and {updateSplits} for split distribution across all networks\"},\"syncUpdateSecondsActive(uint32[],uint256[])\":{\"notice\":\"Updates activity for each member in the registry since the last update epoch and sync with replicas\"},\"syncUpdateSplits(address[],uint32,uint32[],uint256[])\":{\"notice\":\"Updates the 0xSplit distribution on all networks based on reported member activity during the last epoch. Consider calling {syncUpdateSecondsActive} prior or after applying a 0xSplit distribution update\"},\"totalMembers()\":{\"notice\":\"Returns the total No of members in the registry\"},\"transferNetworkSplitControl(uint32[],address[],uint256[])\":{\"notice\":\"Submit sync messages to replicas in order to transfer control of the current 0xSplit contract to `_newController`\"},\"transferSplitControl(address)\":{\"notice\":\"Transfer control of the current 0xSplit contract to `_newController`\"},\"updateAll(address[],uint32)\":{\"notice\":\"Executes both {updateSecondsActive} to update registry member's activity and {updateSplits} for split distribution\"},\"updateNetworkRegistry(uint32,(uint32,address,address))\":{\"notice\":\"Adds a replica NetworkRegistry that should get in sync with a main registry\"},\"updateNetworkSplit(uint32[],address[],address[],uint256[])\":{\"notice\":\"Updates the 0xSplit contracts on existing NetworkRegistry replicas via sync message\"},\"updateSecondsActive()\":{\"notice\":\"Updates seconds active since the last update epoch for every member in the registry\"},\"updateSplits(address[],uint32)\":{\"notice\":\"Updates the 0xSplit distribution based on member activity during the last epoch Consider calling {updateSecondsActive} prior triggering a 0xSplit distribution update\"},\"updater()\":{\"notice\":\"Address of the updater role that can update the registry through the Connext bridge\"},\"updaterDomain()\":{\"notice\":\"Connext domain ID where the updater contract is deployed\"},\"xReceive(bytes32,uint256,address,address,uint32,bytes)\":{\"notice\":\"Accepts incoming sync messages from a main registry via Connext authenticated calls\"}},\"notice\":\"Manage a cross-chain member registry that mints/burn Baal DAO shares and distribute funds hold in 0xSplit based on member activity.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NetworkRegistryShaman.sol\":\"NetworkRegistryShaman\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@connext/interfaces/core/IConnext.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {ExecuteArgs, TransferInfo, DestinationTransferStatus} from \\\"../libraries/LibConnextStorage.sol\\\";\\nimport {TokenId} from \\\"../libraries/TokenId.sol\\\";\\n\\ninterface IConnext {\\n\\n  // ============ BRIDGE ==============\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData,\\n    uint256 _relayerFee\\n  ) external returns (bytes32);\\n\\n  function xcallIntoLocal(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function execute(ExecuteArgs calldata _args) external returns (bytes32 transferId);\\n\\n  function forceUpdateSlippage(TransferInfo calldata _params, uint256 _slippage) external;\\n\\n  function forceReceiveLocal(TransferInfo calldata _params) external;\\n\\n  function bumpTransfer(bytes32 _transferId) external payable;\\n\\n  function routedTransfers(bytes32 _transferId) external view returns (address[] memory);\\n\\n  function transferStatus(bytes32 _transferId) external view returns (DestinationTransferStatus);\\n\\n  function remote(uint32 _domain) external view returns (address);\\n\\n  function domain() external view returns (uint256);\\n\\n  function nonce() external view returns (uint256);\\n\\n  function approvedSequencers(address _sequencer) external view returns (bool);\\n\\n  function xAppConnectionManager() external view returns (address);\\n\\n  // ============ ROUTERS ==============\\n\\n  function LIQUIDITY_FEE_NUMERATOR() external view returns (uint256);\\n\\n  function LIQUIDITY_FEE_DENOMINATOR() external view returns (uint256);\\n\\n  function getRouterApproval(address _router) external view returns (bool);\\n\\n  function getRouterRecipient(address _router) external view returns (address);\\n\\n  function getRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwnerTimestamp(address _router) external view returns (uint256);\\n\\n  function maxRoutersPerTransfer() external view returns (uint256);\\n\\n  function routerBalances(address _router, address _asset) external view returns (uint256);\\n\\n  function getRouterApprovalForPortal(address _router) external view returns (bool);\\n\\n  function initializeRouter(address _owner, address _recipient) external;\\n\\n  function setRouterRecipient(address _router, address _recipient) external;\\n\\n  function proposeRouterOwner(address _router, address _proposed) external;\\n\\n  function acceptProposedRouterOwner(address _router) external;\\n\\n  function addRouterLiquidityFor(\\n    uint256 _amount,\\n    address _local,\\n    address _router\\n  ) external payable;\\n\\n  function addRouterLiquidity(uint256 _amount, address _local) external payable;\\n\\n  function removeRouterLiquidityFor(\\n    TokenId memory _canonical,\\n    uint256 _amount,\\n    address payable _to,\\n    address _router\\n  ) external;\\n\\n  function removeRouterLiquidity(TokenId memory _canonical, uint256 _amount, address payable _to) external;\\n\\n  // ============ TOKEN_FACET ==============\\n  function adoptedToCanonical(address _adopted) external view returns (TokenId memory);\\n\\n  function approvedAssets(TokenId calldata _canonical) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c2f287fe81216f7060acce25747374631b94ff9a87573e1c5d36df1a3a2fdf8\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/core/IXReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IXReceiver {\\n  function xReceive(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset,\\n    address _originSender,\\n    uint32 _origin,\\n    bytes memory _callData\\n  ) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x37a35045d40f3bde688c70bb631581cbc609796514319db1361e061da8d9349b\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/libraries/LibConnextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Enum representing status of destination transfer\\n * @dev Status is only assigned on the destination domain, will always be \\\"none\\\" for the\\n * origin domains\\n * @return uint - Index of value in enum\\n */\\nenum DestinationTransferStatus {\\n  None, // 0\\n  Reconciled, // 1\\n  Executed, // 2\\n  Completed // 3 - executed + reconciled\\n}\\n\\n/**\\n * @notice These are the parameters that will remain constant between the\\n * two chains. They are supplied on `xcall` and should be asserted on `execute`\\n * @property to - The account that receives funds, in the event of a crosschain call,\\n * will receive funds if the call fails.\\n *\\n * @param originDomain - The originating domain (i.e. where `xcall` is called)\\n * @param destinationDomain - The final domain (i.e. where `execute` / `reconcile` are called)\\\\\\n * @param canonicalDomain - The canonical domain of the asset you are bridging\\n * @param to - The address you are sending funds (and potentially data) to\\n * @param delegate - An address who can execute txs on behalf of `to`, in addition to allowing relayers\\n * @param receiveLocal - If true, will use the local asset on the destination instead of adopted.\\n * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\\n * @param slippage - Slippage user is willing to accept from original amount in expressed in BPS (i.e. if\\n * a user takes 1% slippage, this is expressed as 1_000)\\n * @param originSender - The msg.sender of the xcall\\n * @param bridgedAmt - The amount sent over the bridge (after potential AMM on xcall)\\n * @param normalizedIn - The amount sent to `xcall`, normalized to 18 decimals\\n * @param nonce - The nonce on the origin domain used to ensure the transferIds are unique\\n * @param canonicalId - The unique identifier of the canonical token corresponding to bridge assets\\n */\\nstruct TransferInfo {\\n  uint32 originDomain;\\n  uint32 destinationDomain;\\n  uint32 canonicalDomain;\\n  address to;\\n  address delegate;\\n  bool receiveLocal;\\n  bytes callData;\\n  uint256 slippage;\\n  address originSender;\\n  uint256 bridgedAmt;\\n  uint256 normalizedIn;\\n  uint256 nonce;\\n  bytes32 canonicalId;\\n}\\n\\n/**\\n * @notice\\n * @param params - The TransferInfo. These are consistent across sending and receiving chains.\\n * @param routers - The routers who you are sending the funds on behalf of.\\n * @param routerSignatures - Signatures belonging to the routers indicating permission to use funds\\n * for the signed transfer ID.\\n * @param sequencer - The sequencer who assigned the router path to this transfer.\\n * @param sequencerSignature - Signature produced by the sequencer for path assignment accountability\\n * for the path that was signed.\\n */\\nstruct ExecuteArgs {\\n  TransferInfo params;\\n  address[] routers;\\n  bytes[] routerSignatures;\\n  address sequencer;\\n  bytes sequencerSignature;\\n}\",\"keccak256\":\"0xb8581253c5ebe58445c37d344fafe6126d3f7a15784337b3571637cd0068de57\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/libraries/TokenId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ============= Structs =============\\n\\n// Tokens are identified by a TokenId:\\n// domain - 4 byte chain ID of the chain from which the token originates\\n// id - 32 byte identifier of the token address on the origin chain, in that chain's address format\\nstruct TokenId {\\n  uint32 domain;\\n  bytes32 id;\\n}\\n\",\"keccak256\":\"0xfa4e01760604863ea105e18380c243cd2250a7553d2b852f67ecb747f9916b6d\",\"license\":\"MIT OR Apache-2.0\"},\"@daohaus/baal-contracts/contracts/interfaces/IBaal.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IBaal {\\n    function lootToken() external view returns (address);\\n    function sharesToken() external view returns (address);\\n    function votingPeriod() external view returns (uint32);\\n    function gracePeriod() external view returns (uint32);\\n    function proposalCount() external view returns (uint32);\\n    function proposalOffering() external view returns (uint256);\\n    function quorumPercent() external view returns (uint256);\\n    function sponsorThreshold() external view returns (uint256);\\n    function minRetentionPercent() external view returns (uint256);\\n    function latestSponsoredProposalId() external view returns (uint32);\\n\\n    function setUp(bytes memory initializationParams) external;\\n    function multisendLibrary() external view returns (address);\\n    // Module\\n    function avatar() external view returns (address);\\n    function target() external view returns (address);\\n    function setAvatar(address avatar) external;\\n    function setTarget(address avatar) external;\\n    // BaseRelayRecipient\\n    function trustedForwarder() external view returns (address);\\n    function setTrustedForwarder(address trustedForwarderAddress) external;\\n\\n    function mintLoot(address[] calldata to, uint256[] calldata amount) external;\\n    function burnLoot(address[] calldata from, uint256[] calldata amount) external;\\n    function mintShares(address[] calldata to, uint256[] calldata amount) external;\\n    function burnShares(address[] calldata from, uint256[] calldata amount) external;\\n    function totalLoot() external view returns (uint256);\\n    function totalShares() external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function lootPaused() external view returns (bool);\\n    function sharesPaused() external view returns (bool);\\n    \\n    function shamans(address shaman) external view returns (uint256);\\n    function setShamans(address[] calldata shamans, uint256[] calldata permissions) external;\\n    function isAdmin(address shaman) external view returns (bool);\\n    function isManager(address shaman) external view returns (bool);\\n    function isGovernor(address shaman) external view returns (bool);\\n    function lockAdmin() external;\\n    function lockManager() external;\\n    function lockGovernor() external;\\n    function adminLock() external view returns (bool);\\n    function managerLock() external view returns (bool);\\n    function governorLock() external view returns (bool);\\n    function setAdminConfig(bool pauseShares, bool pauseLoot) external;\\n    function setGovernanceConfig(bytes memory governanceConfig) external;\\n\\n    function submitProposal(\\n        bytes calldata proposalData,\\n        uint32 expiration,\\n        uint256 baalGas,\\n        string calldata details\\n    ) external payable returns (uint256);\\n    function sponsorProposal(uint32 id) external;\\n    function processProposal(uint32 id, bytes calldata proposalData) external;\\n    function cancelProposal(uint32 id) external;\\n    function getProposalStatus(uint32 id) external returns (bool[4] memory);\\n    function submitVote(uint32 id, bool approved) external;\\n    function submitVoteWithSig(\\n        address voter,\\n        uint256 expiry,\\n        uint256 nonce,\\n        uint32 id,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function executeAsBaal(address to, uint256 value, bytes calldata data) external;\\n    function ragequit(address to, uint256 sharesToBurn, uint256 lootToBurn, address[] calldata tokens) external;\\n\\n    function hashOperation(bytes memory transactions) external pure returns (bytes32);\\n    function encodeMultisend(bytes[] memory calls, address target) external pure returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xa8e49237a041f30caf45f9999fe28fdaac6a847530f411761a9b493022622948\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@prb/math/src/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\n// Common.sol\\n//\\n// Common mathematical functions needed by both SD59x18 and UD60x18. Note that these global functions do not\\n// always operate with SD59x18 and UD60x18 numbers.\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                CUSTOM ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when the resultant value in {mulDiv} overflows uint256.\\nerror PRBMath_MulDiv_Overflow(uint256 x, uint256 y, uint256 denominator);\\n\\n/// @notice Thrown when the resultant value in {mulDiv18} overflows uint256.\\nerror PRBMath_MulDiv18_Overflow(uint256 x, uint256 y);\\n\\n/// @notice Thrown when one of the inputs passed to {mulDivSigned} is `type(int256).min`.\\nerror PRBMath_MulDivSigned_InputTooSmall();\\n\\n/// @notice Thrown when the resultant value in {mulDivSigned} overflows int256.\\nerror PRBMath_MulDivSigned_Overflow(int256 x, int256 y);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CONSTANTS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev The maximum value a uint128 number can have.\\nuint128 constant MAX_UINT128 = type(uint128).max;\\n\\n/// @dev The maximum value a uint40 number can have.\\nuint40 constant MAX_UINT40 = type(uint40).max;\\n\\n/// @dev The unit number, which the decimal precision of the fixed-point types.\\nuint256 constant UNIT = 1e18;\\n\\n/// @dev The unit number inverted mod 2^256.\\nuint256 constant UNIT_INVERSE = 78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n/// @dev The the largest power of two that divides the decimal value of `UNIT`. The logarithm of this value is the least significant\\n/// bit in the binary representation of `UNIT`.\\nuint256 constant UNIT_LPOTD = 262144;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Calculates the binary exponent of x using the binary fraction method.\\n/// @dev Has to use 192.64-bit fixed-point numbers. See https://ethereum.stackexchange.com/a/96594/24693.\\n/// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n/// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp2(uint256 x) pure returns (uint256 result) {\\n    unchecked {\\n        // Start from 0.5 in the 192.64-bit fixed-point format.\\n        result = 0x800000000000000000000000000000000000000000000000;\\n\\n        // The following logic multiplies the result by $\\\\sqrt{2^{-i}}$ when the bit at position i is 1. Key points:\\n        //\\n        // 1. Intermediate results will not overflow, as the starting point is 2^191 and all magic factors are under 2^65.\\n        // 2. The rationale for organizing the if statements into groups of 8 is gas savings. If the result of performing\\n        // a bitwise AND operation between x and any value in the array [0x80; 0x40; 0x20; 0x10; 0x08; 0x04; 0x02; 0x01] is 1,\\n        // we know that `x & 0xFF` is also 1.\\n        if (x & 0xFF00000000000000 > 0) {\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF000000000000 > 0) {\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF0000000000 > 0) {\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF00000000 > 0) {\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF000000 > 0) {\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF0000 > 0) {\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF00 > 0) {\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF > 0) {\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n        }\\n\\n        // In the code snippet below, two operations are executed simultaneously:\\n        //\\n        // 1. The result is multiplied by $(2^n + 1)$, where $2^n$ represents the integer part, and the additional 1\\n        // accounts for the initial guess of 0.5. This is achieved by subtracting from 191 instead of 192.\\n        // 2. The result is then converted to an unsigned 60.18-decimal fixed-point format.\\n        //\\n        // The underlying logic is based on the relationship $2^{191-ip} = 2^{ip} / 2^{191}$, where $ip$ denotes the,\\n        // integer part, $2^n$.\\n        result *= UNIT;\\n        result >>= (191 - (x >> 64));\\n    }\\n}\\n\\n/// @notice Finds the zero-based index of the first 1 in the binary representation of x.\\n///\\n/// @dev See the note on \\\"msb\\\" in this Wikipedia article: https://en.wikipedia.org/wiki/Find_first_set\\n///\\n/// Each step in this implementation is equivalent to this high-level code:\\n///\\n/// ```solidity\\n/// if (x >= 2 ** 128) {\\n///     x >>= 128;\\n///     result += 128;\\n/// }\\n/// ```\\n///\\n/// Where 128 is replaced with each respective power of two factor. See the full high-level implementation here:\\n/// https://gist.github.com/PaulRBerg/f932f8693f2733e30c4d479e8e980948\\n///\\n/// The Yul instructions used below are:\\n///\\n/// - \\\"gt\\\" is \\\"greater than\\\"\\n/// - \\\"or\\\" is the OR bitwise operator\\n/// - \\\"shl\\\" is \\\"shift left\\\"\\n/// - \\\"shr\\\" is \\\"shift right\\\"\\n///\\n/// @param x The uint256 number for which to find the index of the most significant bit.\\n/// @return result The index of the most significant bit as a uint256.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction msb(uint256 x) pure returns (uint256 result) {\\n    // 2^128\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^64\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^32\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(5, gt(x, 0xFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^16\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(4, gt(x, 0xFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^8\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(3, gt(x, 0xFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^4\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(2, gt(x, 0xF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^2\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(1, gt(x, 0x3))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^1\\n    // No need to shift x any more.\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := gt(x, 0x1)\\n        result := or(result, factor)\\n    }\\n}\\n\\n/// @notice Calculates x*y\\u00f7denominator with 512-bit precision.\\n///\\n/// @dev Credits to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n///\\n/// Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - The denominator must not be zero.\\n/// - The result must fit in uint256.\\n///\\n/// @param x The multiplicand as a uint256.\\n/// @param y The multiplier as a uint256.\\n/// @param denominator The divisor as a uint256.\\n/// @return result The result as a uint256.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mulDiv(uint256 x, uint256 y, uint256 denominator) pure returns (uint256 result) {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512-bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly (\\\"memory-safe\\\") {\\n        let mm := mulmod(x, y, not(0))\\n        prod0 := mul(x, y)\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division.\\n    if (prod1 == 0) {\\n        unchecked {\\n            return prod0 / denominator;\\n        }\\n    }\\n\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n    if (prod1 >= denominator) {\\n        revert PRBMath_MulDiv_Overflow(x, y, denominator);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    // 512 by 256 division\\n    ////////////////////////////////////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n    uint256 remainder;\\n    assembly (\\\"memory-safe\\\") {\\n        // Compute remainder using the mulmod Yul instruction.\\n        remainder := mulmod(x, y, denominator)\\n\\n        // Subtract 256 bit number from 512-bit number.\\n        prod1 := sub(prod1, gt(remainder, prod0))\\n        prod0 := sub(prod0, remainder)\\n    }\\n\\n    unchecked {\\n        // Calculate the largest power of two divisor of the denominator using the unary operator ~. This operation cannot overflow\\n        // because the denominator cannot be zero at this point in the function execution. The result is always >= 1.\\n        // For more detail, see https://cs.stackexchange.com/q/138556/92363.\\n        uint256 lpotdod = denominator & (~denominator + 1);\\n        uint256 flippedLpotdod;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            // Factor powers of two out of denominator.\\n            denominator := div(denominator, lpotdod)\\n\\n            // Divide [prod1 prod0] by lpotdod.\\n            prod0 := div(prod0, lpotdod)\\n\\n            // Get the flipped value `2^256 / lpotdod`. If the `lpotdod` is zero, the flipped value is one.\\n            // `sub(0, lpotdod)` produces the two's complement version of `lpotdod`, which is equivalent to flipping all the bits.\\n            // However, `div` interprets this value as an unsigned value: https://ethereum.stackexchange.com/q/147168/24693\\n            flippedLpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n        }\\n\\n        // Shift in bits from prod1 into prod0.\\n        prod0 |= prod1 * flippedLpotdod;\\n\\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n        // four bits. That is, denominator * inv = 1 mod 2^4.\\n        uint256 inverse = (3 * denominator) ^ 2;\\n\\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n        // in modular arithmetic, doubling the correct bits in each step.\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inverse;\\n    }\\n}\\n\\n/// @notice Calculates x*y\\u00f71e18 with 512-bit precision.\\n///\\n/// @dev A variant of {mulDiv} with constant folding, i.e. in which the denominator is hard coded to 1e18.\\n///\\n/// Notes:\\n/// - The body is purposely left uncommented; to understand how this works, see the documentation in {mulDiv}.\\n/// - The result is rounded toward zero.\\n/// - We take as an axiom that the result cannot be `MAX_UINT256` when x and y solve the following system of equations:\\n///\\n/// $$\\n/// \\\\begin{cases}\\n///     x * y = MAX\\\\_UINT256 * UNIT \\\\\\\\\\n///     (x * y) \\\\% UNIT \\\\geq \\\\frac{UNIT}{2}\\n/// \\\\end{cases}\\n/// $$\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {mulDiv}.\\n/// - The result must fit in uint256.\\n///\\n/// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n/// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n/// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mulDiv18(uint256 x, uint256 y) pure returns (uint256 result) {\\n    uint256 prod0;\\n    uint256 prod1;\\n    assembly (\\\"memory-safe\\\") {\\n        let mm := mulmod(x, y, not(0))\\n        prod0 := mul(x, y)\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    if (prod1 == 0) {\\n        unchecked {\\n            return prod0 / UNIT;\\n        }\\n    }\\n\\n    if (prod1 >= UNIT) {\\n        revert PRBMath_MulDiv18_Overflow(x, y);\\n    }\\n\\n    uint256 remainder;\\n    assembly (\\\"memory-safe\\\") {\\n        remainder := mulmod(x, y, UNIT)\\n        result :=\\n            mul(\\n                or(\\n                    div(sub(prod0, remainder), UNIT_LPOTD),\\n                    mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, UNIT_LPOTD), UNIT_LPOTD), 1))\\n                ),\\n                UNIT_INVERSE\\n            )\\n    }\\n}\\n\\n/// @notice Calculates x*y\\u00f7denominator with 512-bit precision.\\n///\\n/// @dev This is an extension of {mulDiv} for signed numbers, which works by computing the signs and the absolute values separately.\\n///\\n/// Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {mulDiv}.\\n/// - None of the inputs can be `type(int256).min`.\\n/// - The result must fit in int256.\\n///\\n/// @param x The multiplicand as an int256.\\n/// @param y The multiplier as an int256.\\n/// @param denominator The divisor as an int256.\\n/// @return result The result as an int256.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mulDivSigned(int256 x, int256 y, int256 denominator) pure returns (int256 result) {\\n    if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n        revert PRBMath_MulDivSigned_InputTooSmall();\\n    }\\n\\n    // Get hold of the absolute values of x, y and the denominator.\\n    uint256 xAbs;\\n    uint256 yAbs;\\n    uint256 dAbs;\\n    unchecked {\\n        xAbs = x < 0 ? uint256(-x) : uint256(x);\\n        yAbs = y < 0 ? uint256(-y) : uint256(y);\\n        dAbs = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n    }\\n\\n    // Compute the absolute value of x*y\\u00f7denominator. The result must fit in int256.\\n    uint256 resultAbs = mulDiv(xAbs, yAbs, dAbs);\\n    if (resultAbs > uint256(type(int256).max)) {\\n        revert PRBMath_MulDivSigned_Overflow(x, y);\\n    }\\n\\n    // Get the signs of x, y and the denominator.\\n    uint256 sx;\\n    uint256 sy;\\n    uint256 sd;\\n    assembly (\\\"memory-safe\\\") {\\n        // \\\"sgt\\\" is the \\\"signed greater than\\\" assembly instruction and \\\"sub(0,1)\\\" is -1 in two's complement.\\n        sx := sgt(x, sub(0, 1))\\n        sy := sgt(y, sub(0, 1))\\n        sd := sgt(denominator, sub(0, 1))\\n    }\\n\\n    // XOR over sx, sy and sd. What this does is to check whether there are 1 or 3 negative signs in the inputs.\\n    // If there are, the result should be negative. Otherwise, it should be positive.\\n    unchecked {\\n        result = sx ^ sy ^ sd == 0 ? -int256(resultAbs) : int256(resultAbs);\\n    }\\n}\\n\\n/// @notice Calculates the square root of x using the Babylonian method.\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n///\\n/// Notes:\\n/// - If x is not a perfect square, the result is rounded down.\\n/// - Credits to OpenZeppelin for the explanations in comments below.\\n///\\n/// @param x The uint256 number for which to calculate the square root.\\n/// @return result The result as a uint256.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction sqrt(uint256 x) pure returns (uint256 result) {\\n    if (x == 0) {\\n        return 0;\\n    }\\n\\n    // For our first guess, we calculate the biggest power of 2 which is smaller than the square root of x.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of x is a power of 2 such that we have:\\n    //\\n    // $$\\n    // msb(x) <= x <= 2*msb(x)$\\n    // $$\\n    //\\n    // We write $msb(x)$ as $2^k$, and we get:\\n    //\\n    // $$\\n    // k = log_2(x)\\n    // $$\\n    //\\n    // Thus, we can write the initial inequality as:\\n    //\\n    // $$\\n    // 2^{log_2(x)} <= x <= 2*2^{log_2(x)+1} \\\\\\\\\\n    // sqrt(2^k) <= sqrt(x) < sqrt(2^{k+1}) \\\\\\\\\\n    // 2^{k/2} <= sqrt(x) < 2^{(k+1)/2} <= 2^{(k/2)+1}\\n    // $$\\n    //\\n    // Consequently, $2^{log_2(x) /2} is a good first approximation of sqrt(x) with at least one correct bit.\\n    uint256 xAux = uint256(x);\\n    result = 1;\\n    if (xAux >= 2 ** 128) {\\n        xAux >>= 128;\\n        result <<= 64;\\n    }\\n    if (xAux >= 2 ** 64) {\\n        xAux >>= 64;\\n        result <<= 32;\\n    }\\n    if (xAux >= 2 ** 32) {\\n        xAux >>= 32;\\n        result <<= 16;\\n    }\\n    if (xAux >= 2 ** 16) {\\n        xAux >>= 16;\\n        result <<= 8;\\n    }\\n    if (xAux >= 2 ** 8) {\\n        xAux >>= 8;\\n        result <<= 4;\\n    }\\n    if (xAux >= 2 ** 4) {\\n        xAux >>= 4;\\n        result <<= 2;\\n    }\\n    if (xAux >= 2 ** 2) {\\n        result <<= 1;\\n    }\\n\\n    // At this point, `result` is an estimation with at least one bit of precision. We know the true value has at\\n    // most 128 bits, since it is the square root of a uint256. Newton's method converges quadratically (precision\\n    // doubles at every iteration). We thus need at most 7 iteration to turn our partial result with one bit of\\n    // precision into the expected uint128 result.\\n    unchecked {\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n\\n        // If x is not a perfect square, round the result toward zero.\\n        uint256 roundedResult = x / result;\\n        if (result >= roundedResult) {\\n            result = roundedResult;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x70b3a76443312b2c6c500996306a18e3d91e5d56fed0d898d98ca0bfb6225053\",\"license\":\"MIT\"},\"@prb/math/src/UD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\n/*\\n\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d \\u2588\\u2588\\u2554\\u2550\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551 \\u255a\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551 \\u2588\\u2588\\u2554\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n*/\\n\\nimport \\\"./ud60x18/Casting.sol\\\";\\nimport \\\"./ud60x18/Constants.sol\\\";\\nimport \\\"./ud60x18/Conversions.sol\\\";\\nimport \\\"./ud60x18/Errors.sol\\\";\\nimport \\\"./ud60x18/Helpers.sol\\\";\\nimport \\\"./ud60x18/Math.sol\\\";\\nimport \\\"./ud60x18/ValueType.sol\\\";\\n\",\"keccak256\":\"0xb98c6f74275914d279e8af6c502c2b1f50d5f6e1ed418d3b0153f5a193206c48\",\"license\":\"MIT\"},\"@prb/math/src/sd1x18/Casting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"../Common.sol\\\" as Common;\\nimport \\\"./Errors.sol\\\" as CastingErrors;\\nimport { SD59x18 } from \\\"../sd59x18/ValueType.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"../ud60x18/ValueType.sol\\\";\\nimport { SD1x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts an SD1x18 number into SD59x18.\\n/// @dev There is no overflow check because the domain of SD1x18 is a subset of SD59x18.\\nfunction intoSD59x18(SD1x18 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(int256(SD1x18.unwrap(x)));\\n}\\n\\n/// @notice Casts an SD1x18 number into UD2x18.\\n/// - x must be positive.\\nfunction intoUD2x18(SD1x18 x) pure returns (UD2x18 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUD2x18_Underflow(x);\\n    }\\n    result = UD2x18.wrap(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into UD60x18.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUD60x18(SD1x18 x) pure returns (UD60x18 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUD60x18_Underflow(x);\\n    }\\n    result = UD60x18.wrap(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into uint256.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUint256(SD1x18 x) pure returns (uint256 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUint256_Underflow(x);\\n    }\\n    result = uint256(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into uint128.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUint128(SD1x18 x) pure returns (uint128 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUint128_Underflow(x);\\n    }\\n    result = uint128(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(SD1x18 x) pure returns (uint40 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUint40_Underflow(x);\\n    }\\n    if (xInt > int64(uint64(Common.MAX_UINT40))) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUint40_Overflow(x);\\n    }\\n    result = uint40(uint64(xInt));\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction sd1x18(int64 x) pure returns (SD1x18 result) {\\n    result = SD1x18.wrap(x);\\n}\\n\\n/// @notice Unwraps an SD1x18 number into int64.\\nfunction unwrap(SD1x18 x) pure returns (int64 result) {\\n    result = SD1x18.unwrap(x);\\n}\\n\\n/// @notice Wraps an int64 number into SD1x18.\\nfunction wrap(int64 x) pure returns (SD1x18 result) {\\n    result = SD1x18.wrap(x);\\n}\\n\",\"keccak256\":\"0x9e49e2b37c1bb845861740805edaaef3fe951a7b96eef16ce84fbf76e8278670\",\"license\":\"MIT\"},\"@prb/math/src/sd1x18/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { SD1x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @dev Euler's number as an SD1x18 number.\\nSD1x18 constant E = SD1x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum value an SD1x18 number can have.\\nint64 constant uMAX_SD1x18 = 9_223372036854775807;\\nSD1x18 constant MAX_SD1x18 = SD1x18.wrap(uMAX_SD1x18);\\n\\n/// @dev The maximum value an SD1x18 number can have.\\nint64 constant uMIN_SD1x18 = -9_223372036854775808;\\nSD1x18 constant MIN_SD1x18 = SD1x18.wrap(uMIN_SD1x18);\\n\\n/// @dev PI as an SD1x18 number.\\nSD1x18 constant PI = SD1x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit number, which gives the decimal precision of SD1x18.\\nSD1x18 constant UNIT = SD1x18.wrap(1e18);\\nint256 constant uUNIT = 1e18;\\n\",\"keccak256\":\"0xb51aab4a2ea76f530dccbf3b7d4af24c8f3ceef67f3c574b58650466ea924a3f\",\"license\":\"MIT\"},\"@prb/math/src/sd1x18/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { SD1x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in UD2x18.\\nerror PRBMath_SD1x18_ToUD2x18_Underflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in UD60x18.\\nerror PRBMath_SD1x18_ToUD60x18_Underflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in uint128.\\nerror PRBMath_SD1x18_ToUint128_Underflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in uint256.\\nerror PRBMath_SD1x18_ToUint256_Underflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in uint40.\\nerror PRBMath_SD1x18_ToUint40_Overflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in uint40.\\nerror PRBMath_SD1x18_ToUint40_Underflow(SD1x18 x);\\n\",\"keccak256\":\"0x836cb42ba619ca369fd4765bc47fefc3c3621369c5861882af14660aca5057ee\",\"license\":\"MIT\"},\"@prb/math/src/sd1x18/ValueType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Casting.sol\\\" as Casting;\\n\\n/// @notice The signed 1.18-decimal fixed-point number representation, which can have up to 1 digit and up to 18\\n/// decimals. The values of this are bound by the minimum and the maximum values permitted by the underlying Solidity\\n/// type int64. This is useful when end users want to use int64 to save gas, e.g. with tight variable packing in contract\\n/// storage.\\ntype SD1x18 is int64;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Casting.intoSD59x18,\\n    Casting.intoUD2x18,\\n    Casting.intoUD60x18,\\n    Casting.intoUint256,\\n    Casting.intoUint128,\\n    Casting.intoUint40,\\n    Casting.unwrap\\n} for SD1x18 global;\\n\",\"keccak256\":\"0x2f86f1aa9fca42f40808b51a879b406ac51817647bdb9642f8a79dd8fdb754a7\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Casting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Errors.sol\\\" as CastingErrors;\\nimport { MAX_UINT128, MAX_UINT40 } from \\\"../Common.sol\\\";\\nimport { uMAX_SD1x18, uMIN_SD1x18 } from \\\"../sd1x18/Constants.sol\\\";\\nimport { SD1x18 } from \\\"../sd1x18/ValueType.sol\\\";\\nimport { uMAX_UD2x18 } from \\\"../ud2x18/Constants.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"../ud60x18/ValueType.sol\\\";\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts an SD59x18 number into int256.\\n/// @dev This is basically a functional alias for {unwrap}.\\nfunction intoInt256(SD59x18 x) pure returns (int256 result) {\\n    result = SD59x18.unwrap(x);\\n}\\n\\n/// @notice Casts an SD59x18 number into SD1x18.\\n/// @dev Requirements:\\n/// - x must be greater than or equal to `uMIN_SD1x18`.\\n/// - x must be less than or equal to `uMAX_SD1x18`.\\nfunction intoSD1x18(SD59x18 x) pure returns (SD1x18 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < uMIN_SD1x18) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoSD1x18_Underflow(x);\\n    }\\n    if (xInt > uMAX_SD1x18) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoSD1x18_Overflow(x);\\n    }\\n    result = SD1x18.wrap(int64(xInt));\\n}\\n\\n/// @notice Casts an SD59x18 number into UD2x18.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `uMAX_UD2x18`.\\nfunction intoUD2x18(SD59x18 x) pure returns (UD2x18 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUD2x18_Underflow(x);\\n    }\\n    if (xInt > int256(uint256(uMAX_UD2x18))) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUD2x18_Overflow(x);\\n    }\\n    result = UD2x18.wrap(uint64(uint256(xInt)));\\n}\\n\\n/// @notice Casts an SD59x18 number into UD60x18.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUD60x18(SD59x18 x) pure returns (UD60x18 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUD60x18_Underflow(x);\\n    }\\n    result = UD60x18.wrap(uint256(xInt));\\n}\\n\\n/// @notice Casts an SD59x18 number into uint256.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUint256(SD59x18 x) pure returns (uint256 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint256_Underflow(x);\\n    }\\n    result = uint256(xInt);\\n}\\n\\n/// @notice Casts an SD59x18 number into uint128.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `uMAX_UINT128`.\\nfunction intoUint128(SD59x18 x) pure returns (uint128 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint128_Underflow(x);\\n    }\\n    if (xInt > int256(uint256(MAX_UINT128))) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint128_Overflow(x);\\n    }\\n    result = uint128(uint256(xInt));\\n}\\n\\n/// @notice Casts an SD59x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(SD59x18 x) pure returns (uint40 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint40_Underflow(x);\\n    }\\n    if (xInt > int256(uint256(MAX_UINT40))) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint40_Overflow(x);\\n    }\\n    result = uint40(uint256(xInt));\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction sd(int256 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(x);\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction sd59x18(int256 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(x);\\n}\\n\\n/// @notice Unwraps an SD59x18 number into int256.\\nfunction unwrap(SD59x18 x) pure returns (int256 result) {\\n    result = SD59x18.unwrap(x);\\n}\\n\\n/// @notice Wraps an int256 number into SD59x18.\\nfunction wrap(int256 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(x);\\n}\\n\",\"keccak256\":\"0x3b21b60ec2998c3ae32f647412da51d3683b3f183a807198cc8d157499484f99\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n// NOTICE: the \\\"u\\\" prefix stands for \\\"unwrapped\\\".\\n\\n/// @dev Euler's number as an SD59x18 number.\\nSD59x18 constant E = SD59x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum input permitted in {exp}.\\nint256 constant uEXP_MAX_INPUT = 133_084258667509499440;\\nSD59x18 constant EXP_MAX_INPUT = SD59x18.wrap(uEXP_MAX_INPUT);\\n\\n/// @dev The maximum input permitted in {exp2}.\\nint256 constant uEXP2_MAX_INPUT = 192e18 - 1;\\nSD59x18 constant EXP2_MAX_INPUT = SD59x18.wrap(uEXP2_MAX_INPUT);\\n\\n/// @dev Half the UNIT number.\\nint256 constant uHALF_UNIT = 0.5e18;\\nSD59x18 constant HALF_UNIT = SD59x18.wrap(uHALF_UNIT);\\n\\n/// @dev $log_2(10)$ as an SD59x18 number.\\nint256 constant uLOG2_10 = 3_321928094887362347;\\nSD59x18 constant LOG2_10 = SD59x18.wrap(uLOG2_10);\\n\\n/// @dev $log_2(e)$ as an SD59x18 number.\\nint256 constant uLOG2_E = 1_442695040888963407;\\nSD59x18 constant LOG2_E = SD59x18.wrap(uLOG2_E);\\n\\n/// @dev The maximum value an SD59x18 number can have.\\nint256 constant uMAX_SD59x18 = 57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\nSD59x18 constant MAX_SD59x18 = SD59x18.wrap(uMAX_SD59x18);\\n\\n/// @dev The maximum whole value an SD59x18 number can have.\\nint256 constant uMAX_WHOLE_SD59x18 = 57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\nSD59x18 constant MAX_WHOLE_SD59x18 = SD59x18.wrap(uMAX_WHOLE_SD59x18);\\n\\n/// @dev The minimum value an SD59x18 number can have.\\nint256 constant uMIN_SD59x18 = -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\nSD59x18 constant MIN_SD59x18 = SD59x18.wrap(uMIN_SD59x18);\\n\\n/// @dev The minimum whole value an SD59x18 number can have.\\nint256 constant uMIN_WHOLE_SD59x18 = -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\nSD59x18 constant MIN_WHOLE_SD59x18 = SD59x18.wrap(uMIN_WHOLE_SD59x18);\\n\\n/// @dev PI as an SD59x18 number.\\nSD59x18 constant PI = SD59x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit number, which gives the decimal precision of SD59x18.\\nint256 constant uUNIT = 1e18;\\nSD59x18 constant UNIT = SD59x18.wrap(1e18);\\n\\n/// @dev The unit number squared.\\nint256 constant uUNIT_SQUARED = 1e36;\\nSD59x18 constant UNIT_SQUARED = SD59x18.wrap(uUNIT_SQUARED);\\n\\n/// @dev Zero as an SD59x18 number.\\nSD59x18 constant ZERO = SD59x18.wrap(0);\\n\",\"keccak256\":\"0xe0a1ca1a7b5b2d637cff83a8caa3d2e67a6a34f7ee9df58a9ca5d5fa268c474a\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Thrown when taking the absolute value of `MIN_SD59x18`.\\nerror PRBMath_SD59x18_Abs_MinSD59x18();\\n\\n/// @notice Thrown when ceiling a number overflows SD59x18.\\nerror PRBMath_SD59x18_Ceil_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMath_SD59x18_Convert_Overflow(int256 x);\\n\\n/// @notice Thrown when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMath_SD59x18_Convert_Underflow(int256 x);\\n\\n/// @notice Thrown when dividing two numbers and one of them is `MIN_SD59x18`.\\nerror PRBMath_SD59x18_Div_InputTooSmall();\\n\\n/// @notice Thrown when dividing two numbers and one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMath_SD59x18_Div_Overflow(SD59x18 x, SD59x18 y);\\n\\n/// @notice Thrown when taking the natural exponent of a base greater than 133_084258667509499441.\\nerror PRBMath_SD59x18_Exp_InputTooBig(SD59x18 x);\\n\\n/// @notice Thrown when taking the binary exponent of a base greater than 192e18.\\nerror PRBMath_SD59x18_Exp2_InputTooBig(SD59x18 x);\\n\\n/// @notice Thrown when flooring a number underflows SD59x18.\\nerror PRBMath_SD59x18_Floor_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when taking the geometric mean of two numbers and their product is negative.\\nerror PRBMath_SD59x18_Gm_NegativeProduct(SD59x18 x, SD59x18 y);\\n\\n/// @notice Thrown when taking the geometric mean of two numbers and multiplying them overflows SD59x18.\\nerror PRBMath_SD59x18_Gm_Overflow(SD59x18 x, SD59x18 y);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in SD1x18.\\nerror PRBMath_SD59x18_IntoSD1x18_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in SD1x18.\\nerror PRBMath_SD59x18_IntoSD1x18_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in UD2x18.\\nerror PRBMath_SD59x18_IntoUD2x18_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in UD2x18.\\nerror PRBMath_SD59x18_IntoUD2x18_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in UD60x18.\\nerror PRBMath_SD59x18_IntoUD60x18_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint128.\\nerror PRBMath_SD59x18_IntoUint128_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint128.\\nerror PRBMath_SD59x18_IntoUint128_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint256.\\nerror PRBMath_SD59x18_IntoUint256_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint40.\\nerror PRBMath_SD59x18_IntoUint40_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint40.\\nerror PRBMath_SD59x18_IntoUint40_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when taking the logarithm of a number less than or equal to zero.\\nerror PRBMath_SD59x18_Log_InputTooSmall(SD59x18 x);\\n\\n/// @notice Thrown when multiplying two numbers and one of the inputs is `MIN_SD59x18`.\\nerror PRBMath_SD59x18_Mul_InputTooSmall();\\n\\n/// @notice Thrown when multiplying two numbers and the intermediary absolute result overflows SD59x18.\\nerror PRBMath_SD59x18_Mul_Overflow(SD59x18 x, SD59x18 y);\\n\\n/// @notice Thrown when raising a number to a power and hte intermediary absolute result overflows SD59x18.\\nerror PRBMath_SD59x18_Powu_Overflow(SD59x18 x, uint256 y);\\n\\n/// @notice Thrown when taking the square root of a negative number.\\nerror PRBMath_SD59x18_Sqrt_NegativeInput(SD59x18 x);\\n\\n/// @notice Thrown when the calculating the square root overflows SD59x18.\\nerror PRBMath_SD59x18_Sqrt_Overflow(SD59x18 x);\\n\",\"keccak256\":\"0x83ee24e41d235bc05cb641d2c5c16c67b17fa00e4593661a8d14350435d4df04\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { wrap } from \\\"./Casting.sol\\\";\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Implements the checked addition operation (+) in the SD59x18 type.\\nfunction add(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    return wrap(x.unwrap() + y.unwrap());\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the SD59x18 type.\\nfunction and(SD59x18 x, int256 bits) pure returns (SD59x18 result) {\\n    return wrap(x.unwrap() & bits);\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the SD59x18 type.\\nfunction and2(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    return wrap(x.unwrap() & y.unwrap());\\n}\\n\\n/// @notice Implements the equal (=) operation in the SD59x18 type.\\nfunction eq(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() == y.unwrap();\\n}\\n\\n/// @notice Implements the greater than operation (>) in the SD59x18 type.\\nfunction gt(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() > y.unwrap();\\n}\\n\\n/// @notice Implements the greater than or equal to operation (>=) in the SD59x18 type.\\nfunction gte(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() >= y.unwrap();\\n}\\n\\n/// @notice Implements a zero comparison check function in the SD59x18 type.\\nfunction isZero(SD59x18 x) pure returns (bool result) {\\n    result = x.unwrap() == 0;\\n}\\n\\n/// @notice Implements the left shift operation (<<) in the SD59x18 type.\\nfunction lshift(SD59x18 x, uint256 bits) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() << bits);\\n}\\n\\n/// @notice Implements the lower than operation (<) in the SD59x18 type.\\nfunction lt(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() < y.unwrap();\\n}\\n\\n/// @notice Implements the lower than or equal to operation (<=) in the SD59x18 type.\\nfunction lte(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() <= y.unwrap();\\n}\\n\\n/// @notice Implements the unchecked modulo operation (%) in the SD59x18 type.\\nfunction mod(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() % y.unwrap());\\n}\\n\\n/// @notice Implements the not equal operation (!=) in the SD59x18 type.\\nfunction neq(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() != y.unwrap();\\n}\\n\\n/// @notice Implements the NOT (~) bitwise operation in the SD59x18 type.\\nfunction not(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(~x.unwrap());\\n}\\n\\n/// @notice Implements the OR (|) bitwise operation in the SD59x18 type.\\nfunction or(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() | y.unwrap());\\n}\\n\\n/// @notice Implements the right shift operation (>>) in the SD59x18 type.\\nfunction rshift(SD59x18 x, uint256 bits) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() >> bits);\\n}\\n\\n/// @notice Implements the checked subtraction operation (-) in the SD59x18 type.\\nfunction sub(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() - y.unwrap());\\n}\\n\\n/// @notice Implements the checked unary minus operation (-) in the SD59x18 type.\\nfunction unary(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(-x.unwrap());\\n}\\n\\n/// @notice Implements the unchecked addition operation (+) in the SD59x18 type.\\nfunction uncheckedAdd(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    unchecked {\\n        result = wrap(x.unwrap() + y.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the unchecked subtraction operation (-) in the SD59x18 type.\\nfunction uncheckedSub(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    unchecked {\\n        result = wrap(x.unwrap() - y.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the unchecked unary minus operation (-) in the SD59x18 type.\\nfunction uncheckedUnary(SD59x18 x) pure returns (SD59x18 result) {\\n    unchecked {\\n        result = wrap(-x.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the XOR (^) bitwise operation in the SD59x18 type.\\nfunction xor(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() ^ y.unwrap());\\n}\\n\",\"keccak256\":\"0x208570f1657cf730cb6c3d81aa14030e0d45cf906cdedea5059369d7df4bb716\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"../Common.sol\\\" as Common;\\nimport \\\"./Errors.sol\\\" as Errors;\\nimport {\\n    uEXP_MAX_INPUT,\\n    uEXP2_MAX_INPUT,\\n    uHALF_UNIT,\\n    uLOG2_10,\\n    uLOG2_E,\\n    uMAX_SD59x18,\\n    uMAX_WHOLE_SD59x18,\\n    uMIN_SD59x18,\\n    uMIN_WHOLE_SD59x18,\\n    UNIT,\\n    uUNIT,\\n    uUNIT_SQUARED,\\n    ZERO\\n} from \\\"./Constants.sol\\\";\\nimport { wrap } from \\\"./Helpers.sol\\\";\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Calculates the absolute value of x.\\n///\\n/// @dev Requirements:\\n/// - x must be greater than `MIN_SD59x18`.\\n///\\n/// @param x The SD59x18 number for which to calculate the absolute value.\\n/// @param result The absolute value of x as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction abs(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt == uMIN_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Abs_MinSD59x18();\\n    }\\n    result = xInt < 0 ? wrap(-xInt) : x;\\n}\\n\\n/// @notice Calculates the arithmetic average of x and y.\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// @param x The first operand as an SD59x18 number.\\n/// @param y The second operand as an SD59x18 number.\\n/// @return result The arithmetic average as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction avg(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n\\n    unchecked {\\n        // This operation is equivalent to `x / 2 +  y / 2`, and it can never overflow.\\n        int256 sum = (xInt >> 1) + (yInt >> 1);\\n\\n        if (sum < 0) {\\n            // If at least one of x and y is odd, add 1 to the result, because shifting negative numbers to the right\\n            // rounds toward negative infinity. The right part is equivalent to `sum + (x % 2 == 1 || y % 2 == 1)`.\\n            assembly (\\\"memory-safe\\\") {\\n                result := add(sum, and(or(xInt, yInt), 1))\\n            }\\n        } else {\\n            // Add 1 if both x and y are odd to account for the double 0.5 remainder truncated after shifting.\\n            result = wrap(sum + (xInt & yInt & 1));\\n        }\\n    }\\n}\\n\\n/// @notice Yields the smallest whole number greater than or equal to x.\\n///\\n/// @dev Optimized for fractional value inputs, because every whole value has (1e18 - 1) fractional counterparts.\\n/// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n///\\n/// Requirements:\\n/// - x must be less than or equal to `MAX_WHOLE_SD59x18`.\\n///\\n/// @param x The SD59x18 number to ceil.\\n/// @param result The smallest whole number greater than or equal to x, as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction ceil(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt > uMAX_WHOLE_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Ceil_Overflow(x);\\n    }\\n\\n    int256 remainder = xInt % uUNIT;\\n    if (remainder == 0) {\\n        result = x;\\n    } else {\\n        unchecked {\\n            // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n            int256 resultInt = xInt - remainder;\\n            if (xInt > 0) {\\n                resultInt += uUNIT;\\n            }\\n            result = wrap(resultInt);\\n        }\\n    }\\n}\\n\\n/// @notice Divides two SD59x18 numbers, returning a new SD59x18 number.\\n///\\n/// @dev This is an extension of {Common.mulDiv} for signed numbers, which works by computing the signs and the absolute\\n/// values separately.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv}.\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {Common.mulDiv}.\\n/// - None of the inputs can be `MIN_SD59x18`.\\n/// - The denominator must not be zero.\\n/// - The result must fit in SD59x18.\\n///\\n/// @param x The numerator as an SD59x18 number.\\n/// @param y The denominator as an SD59x18 number.\\n/// @param result The quotient as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction div(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n    if (xInt == uMIN_SD59x18 || yInt == uMIN_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Div_InputTooSmall();\\n    }\\n\\n    // Get hold of the absolute values of x and y.\\n    uint256 xAbs;\\n    uint256 yAbs;\\n    unchecked {\\n        xAbs = xInt < 0 ? uint256(-xInt) : uint256(xInt);\\n        yAbs = yInt < 0 ? uint256(-yInt) : uint256(yInt);\\n    }\\n\\n    // Compute the absolute value (x*UNIT\\u00f7y). The resulting value must fit in SD59x18.\\n    uint256 resultAbs = Common.mulDiv(xAbs, uint256(uUNIT), yAbs);\\n    if (resultAbs > uint256(uMAX_SD59x18)) {\\n        revert Errors.PRBMath_SD59x18_Div_Overflow(x, y);\\n    }\\n\\n    // Check if x and y have the same sign using two's complement representation. The left-most bit represents the sign (1 for\\n    // negative, 0 for positive or zero).\\n    bool sameSign = (xInt ^ yInt) > -1;\\n\\n    // If the inputs have the same sign, the result should be positive. Otherwise, it should be negative.\\n    unchecked {\\n        result = wrap(sameSign ? int256(resultAbs) : -int256(resultAbs));\\n    }\\n}\\n\\n/// @notice Calculates the natural exponent of x using the following formula:\\n///\\n/// $$\\n/// e^x = 2^{x * log_2{e}}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {exp2}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {exp2}.\\n/// - x must be less than 133_084258667509499441.\\n///\\n/// @param x The exponent as an SD59x18 number.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n\\n    // This check prevents values greater than 192e18 from being passed to {exp2}.\\n    if (xInt > uEXP_MAX_INPUT) {\\n        revert Errors.PRBMath_SD59x18_Exp_InputTooBig(x);\\n    }\\n\\n    unchecked {\\n        // Inline the fixed-point multiplication to save gas.\\n        int256 doubleUnitProduct = xInt * uLOG2_E;\\n        result = exp2(wrap(doubleUnitProduct / uUNIT));\\n    }\\n}\\n\\n/// @notice Calculates the binary exponent of x using the binary fraction method using the following formula:\\n///\\n/// $$\\n/// 2^{-x} = \\\\frac{1}{2^x}\\n/// $$\\n///\\n/// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n///\\n/// Notes:\\n/// - If x is less than -59_794705707972522261, the result is zero.\\n///\\n/// Requirements:\\n/// - x must be less than 192e18.\\n/// - The result must fit in SD59x18.\\n///\\n/// @param x The exponent as an SD59x18 number.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp2(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt < 0) {\\n        // The inverse of any number less than this is truncated to zero.\\n        if (xInt < -59_794705707972522261) {\\n            return ZERO;\\n        }\\n\\n        unchecked {\\n            // Inline the fixed-point inversion to save gas.\\n            result = wrap(uUNIT_SQUARED / exp2(wrap(-xInt)).unwrap());\\n        }\\n    } else {\\n        // Numbers greater than or equal to 192e18 don't fit in the 192.64-bit format.\\n        if (xInt > uEXP2_MAX_INPUT) {\\n            revert Errors.PRBMath_SD59x18_Exp2_InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x_192x64 = uint256((xInt << 64) / uUNIT);\\n\\n            // It is safe to cast the result to int256 due to the checks above.\\n            result = wrap(int256(Common.exp2(x_192x64)));\\n        }\\n    }\\n}\\n\\n/// @notice Yields the greatest whole number less than or equal to x.\\n///\\n/// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional\\n/// counterparts. See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n///\\n/// Requirements:\\n/// - x must be greater than or equal to `MIN_WHOLE_SD59x18`.\\n///\\n/// @param x The SD59x18 number to floor.\\n/// @param result The greatest whole number less than or equal to x, as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction floor(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt < uMIN_WHOLE_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Floor_Underflow(x);\\n    }\\n\\n    int256 remainder = xInt % uUNIT;\\n    if (remainder == 0) {\\n        result = x;\\n    } else {\\n        unchecked {\\n            // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n            int256 resultInt = xInt - remainder;\\n            if (xInt < 0) {\\n                resultInt -= uUNIT;\\n            }\\n            result = wrap(resultInt);\\n        }\\n    }\\n}\\n\\n/// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right.\\n/// of the radix point for negative numbers.\\n/// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n/// @param x The SD59x18 number to get the fractional part of.\\n/// @param result The fractional part of x as an SD59x18 number.\\nfunction frac(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() % uUNIT);\\n}\\n\\n/// @notice Calculates the geometric mean of x and y, i.e. $\\\\sqrt{x * y}$.\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x * y must fit in SD59x18.\\n/// - x * y must not be negative, since complex numbers are not supported.\\n///\\n/// @param x The first operand as an SD59x18 number.\\n/// @param y The second operand as an SD59x18 number.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction gm(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n    if (xInt == 0 || yInt == 0) {\\n        return ZERO;\\n    }\\n\\n    unchecked {\\n        // Equivalent to `xy / x != y`. Checking for overflow this way is faster than letting Solidity do it.\\n        int256 xyInt = xInt * yInt;\\n        if (xyInt / xInt != yInt) {\\n            revert Errors.PRBMath_SD59x18_Gm_Overflow(x, y);\\n        }\\n\\n        // The product must not be negative, since complex numbers are not supported.\\n        if (xyInt < 0) {\\n            revert Errors.PRBMath_SD59x18_Gm_NegativeProduct(x, y);\\n        }\\n\\n        // We don't need to multiply the result by `UNIT` here because the x*y product picked up a factor of `UNIT`\\n        // during multiplication. See the comments in {Common.sqrt}.\\n        uint256 resultUint = Common.sqrt(uint256(xyInt));\\n        result = wrap(int256(resultUint));\\n    }\\n}\\n\\n/// @notice Calculates the inverse of x.\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x must not be zero.\\n///\\n/// @param x The SD59x18 number for which to calculate the inverse.\\n/// @return result The inverse as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction inv(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(uUNIT_SQUARED / x.unwrap());\\n}\\n\\n/// @notice Calculates the natural logarithm of x using the following formula:\\n///\\n/// $$\\n/// ln{x} = log_2{x} / log_2{e}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2}.\\n/// - The precision isn't sufficiently fine-grained to return exactly `UNIT` when the input is `E`.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {log2}.\\n///\\n/// @param x The SD59x18 number for which to calculate the natural logarithm.\\n/// @return result The natural logarithm as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction ln(SD59x18 x) pure returns (SD59x18 result) {\\n    // Inline the fixed-point multiplication to save gas. This is overflow-safe because the maximum value that\\n    // {log2} can return is ~195_205294292027477728.\\n    result = wrap(log2(x).unwrap() * uUNIT / uLOG2_E);\\n}\\n\\n/// @notice Calculates the common logarithm of x using the following formula:\\n///\\n/// $$\\n/// log_{10}{x} = log_2{x} / log_2{10}\\n/// $$\\n///\\n/// However, if x is an exact power of ten, a hard coded value is returned.\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {log2}.\\n///\\n/// @param x The SD59x18 number for which to calculate the common logarithm.\\n/// @return result The common logarithm as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction log10(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt < 0) {\\n        revert Errors.PRBMath_SD59x18_Log_InputTooSmall(x);\\n    }\\n\\n    // Note that the `mul` in this block is the standard multiplication operation, not {SD59x18.mul}.\\n    // prettier-ignore\\n    assembly (\\\"memory-safe\\\") {\\n        switch x\\n        case 1 { result := mul(uUNIT, sub(0, 18)) }\\n        case 10 { result := mul(uUNIT, sub(1, 18)) }\\n        case 100 { result := mul(uUNIT, sub(2, 18)) }\\n        case 1000 { result := mul(uUNIT, sub(3, 18)) }\\n        case 10000 { result := mul(uUNIT, sub(4, 18)) }\\n        case 100000 { result := mul(uUNIT, sub(5, 18)) }\\n        case 1000000 { result := mul(uUNIT, sub(6, 18)) }\\n        case 10000000 { result := mul(uUNIT, sub(7, 18)) }\\n        case 100000000 { result := mul(uUNIT, sub(8, 18)) }\\n        case 1000000000 { result := mul(uUNIT, sub(9, 18)) }\\n        case 10000000000 { result := mul(uUNIT, sub(10, 18)) }\\n        case 100000000000 { result := mul(uUNIT, sub(11, 18)) }\\n        case 1000000000000 { result := mul(uUNIT, sub(12, 18)) }\\n        case 10000000000000 { result := mul(uUNIT, sub(13, 18)) }\\n        case 100000000000000 { result := mul(uUNIT, sub(14, 18)) }\\n        case 1000000000000000 { result := mul(uUNIT, sub(15, 18)) }\\n        case 10000000000000000 { result := mul(uUNIT, sub(16, 18)) }\\n        case 100000000000000000 { result := mul(uUNIT, sub(17, 18)) }\\n        case 1000000000000000000 { result := 0 }\\n        case 10000000000000000000 { result := uUNIT }\\n        case 100000000000000000000 { result := mul(uUNIT, 2) }\\n        case 1000000000000000000000 { result := mul(uUNIT, 3) }\\n        case 10000000000000000000000 { result := mul(uUNIT, 4) }\\n        case 100000000000000000000000 { result := mul(uUNIT, 5) }\\n        case 1000000000000000000000000 { result := mul(uUNIT, 6) }\\n        case 10000000000000000000000000 { result := mul(uUNIT, 7) }\\n        case 100000000000000000000000000 { result := mul(uUNIT, 8) }\\n        case 1000000000000000000000000000 { result := mul(uUNIT, 9) }\\n        case 10000000000000000000000000000 { result := mul(uUNIT, 10) }\\n        case 100000000000000000000000000000 { result := mul(uUNIT, 11) }\\n        case 1000000000000000000000000000000 { result := mul(uUNIT, 12) }\\n        case 10000000000000000000000000000000 { result := mul(uUNIT, 13) }\\n        case 100000000000000000000000000000000 { result := mul(uUNIT, 14) }\\n        case 1000000000000000000000000000000000 { result := mul(uUNIT, 15) }\\n        case 10000000000000000000000000000000000 { result := mul(uUNIT, 16) }\\n        case 100000000000000000000000000000000000 { result := mul(uUNIT, 17) }\\n        case 1000000000000000000000000000000000000 { result := mul(uUNIT, 18) }\\n        case 10000000000000000000000000000000000000 { result := mul(uUNIT, 19) }\\n        case 100000000000000000000000000000000000000 { result := mul(uUNIT, 20) }\\n        case 1000000000000000000000000000000000000000 { result := mul(uUNIT, 21) }\\n        case 10000000000000000000000000000000000000000 { result := mul(uUNIT, 22) }\\n        case 100000000000000000000000000000000000000000 { result := mul(uUNIT, 23) }\\n        case 1000000000000000000000000000000000000000000 { result := mul(uUNIT, 24) }\\n        case 10000000000000000000000000000000000000000000 { result := mul(uUNIT, 25) }\\n        case 100000000000000000000000000000000000000000000 { result := mul(uUNIT, 26) }\\n        case 1000000000000000000000000000000000000000000000 { result := mul(uUNIT, 27) }\\n        case 10000000000000000000000000000000000000000000000 { result := mul(uUNIT, 28) }\\n        case 100000000000000000000000000000000000000000000000 { result := mul(uUNIT, 29) }\\n        case 1000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 30) }\\n        case 10000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 31) }\\n        case 100000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 32) }\\n        case 1000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 33) }\\n        case 10000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 34) }\\n        case 100000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 35) }\\n        case 1000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 36) }\\n        case 10000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 37) }\\n        case 100000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 38) }\\n        case 1000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 39) }\\n        case 10000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 40) }\\n        case 100000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 41) }\\n        case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 42) }\\n        case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 43) }\\n        case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 44) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 45) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 46) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 47) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 48) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 49) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 50) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 51) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 52) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 53) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 54) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 55) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 56) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 57) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 58) }\\n        default { result := uMAX_SD59x18 }\\n    }\\n\\n    if (result.unwrap() == uMAX_SD59x18) {\\n        unchecked {\\n            // Inline the fixed-point division to save gas.\\n            result = wrap(log2(x).unwrap() * uUNIT / uLOG2_10);\\n        }\\n    }\\n}\\n\\n/// @notice Calculates the binary logarithm of x using the iterative approximation algorithm:\\n///\\n/// $$\\n/// log_2{x} = n + log_2{y}, \\\\text{ where } y = x*2^{-n}, \\\\ y \\\\in [1, 2)\\n/// $$\\n///\\n/// For $0 \\\\leq x \\\\lt 1$, the input is inverted:\\n///\\n/// $$\\n/// log_2{x} = -log_2{\\\\frac{1}{x}}\\n/// $$\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation.\\n///\\n/// Notes:\\n/// - Due to the lossy precision of the iterative approximation, the results are not perfectly accurate to the last decimal.\\n///\\n/// Requirements:\\n/// - x must be greater than zero.\\n///\\n/// @param x The SD59x18 number for which to calculate the binary logarithm.\\n/// @return result The binary logarithm as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction log2(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt <= 0) {\\n        revert Errors.PRBMath_SD59x18_Log_InputTooSmall(x);\\n    }\\n\\n    unchecked {\\n        int256 sign;\\n        if (xInt >= uUNIT) {\\n            sign = 1;\\n        } else {\\n            sign = -1;\\n            // Inline the fixed-point inversion to save gas.\\n            xInt = uUNIT_SQUARED / xInt;\\n        }\\n\\n        // Calculate the integer part of the logarithm.\\n        uint256 n = Common.msb(uint256(xInt / uUNIT));\\n\\n        // This is the integer part of the logarithm as an SD59x18 number. The operation can't overflow\\n        // because n is at most 255, `UNIT` is 1e18, and the sign is either 1 or -1.\\n        int256 resultInt = int256(n) * uUNIT;\\n\\n        // Calculate $y = x * 2^{-n}$.\\n        int256 y = xInt >> n;\\n\\n        // If y is the unit number, the fractional part is zero.\\n        if (y == uUNIT) {\\n            return wrap(resultInt * sign);\\n        }\\n\\n        // Calculate the fractional part via the iterative approximation.\\n        // The `delta >>= 1` part is equivalent to `delta /= 2`, but shifting bits is more gas efficient.\\n        int256 DOUBLE_UNIT = 2e18;\\n        for (int256 delta = uHALF_UNIT; delta > 0; delta >>= 1) {\\n            y = (y * y) / uUNIT;\\n\\n            // Is y^2 >= 2e18 and so in the range [2e18, 4e18)?\\n            if (y >= DOUBLE_UNIT) {\\n                // Add the 2^{-m} factor to the logarithm.\\n                resultInt = resultInt + delta;\\n\\n                // Halve y, which corresponds to z/2 in the Wikipedia article.\\n                y >>= 1;\\n            }\\n        }\\n        resultInt *= sign;\\n        result = wrap(resultInt);\\n    }\\n}\\n\\n/// @notice Multiplies two SD59x18 numbers together, returning a new SD59x18 number.\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {Common.mulDiv18}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {Common.mulDiv18}.\\n/// - None of the inputs can be `MIN_SD59x18`.\\n/// - The result must fit in SD59x18.\\n///\\n/// @param x The multiplicand as an SD59x18 number.\\n/// @param y The multiplier as an SD59x18 number.\\n/// @return result The product as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mul(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n    if (xInt == uMIN_SD59x18 || yInt == uMIN_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Mul_InputTooSmall();\\n    }\\n\\n    // Get hold of the absolute values of x and y.\\n    uint256 xAbs;\\n    uint256 yAbs;\\n    unchecked {\\n        xAbs = xInt < 0 ? uint256(-xInt) : uint256(xInt);\\n        yAbs = yInt < 0 ? uint256(-yInt) : uint256(yInt);\\n    }\\n\\n    // Compute the absolute value (x*y\\u00f7UNIT). The resulting value must fit in SD59x18.\\n    uint256 resultAbs = Common.mulDiv18(xAbs, yAbs);\\n    if (resultAbs > uint256(uMAX_SD59x18)) {\\n        revert Errors.PRBMath_SD59x18_Mul_Overflow(x, y);\\n    }\\n\\n    // Check if x and y have the same sign using two's complement representation. The left-most bit represents the sign (1 for\\n    // negative, 0 for positive or zero).\\n    bool sameSign = (xInt ^ yInt) > -1;\\n\\n    // If the inputs have the same sign, the result should be positive. Otherwise, it should be negative.\\n    unchecked {\\n        result = wrap(sameSign ? int256(resultAbs) : -int256(resultAbs));\\n    }\\n}\\n\\n/// @notice Raises x to the power of y using the following formula:\\n///\\n/// $$\\n/// x^y = 2^{log_2{x} * y}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {exp2}, {log2}, and {mul}.\\n/// - Returns `UNIT` for 0^0.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {exp2}, {log2}, and {mul}.\\n///\\n/// @param x The base as an SD59x18 number.\\n/// @param y Exponent to raise x to, as an SD59x18 number\\n/// @return result x raised to power y, as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction pow(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n\\n    // If both x and y are zero, the result is `UNIT`. If just x is zero, the result is always zero.\\n    if (xInt == 0) {\\n        return yInt == 0 ? UNIT : ZERO;\\n    }\\n    // If x is `UNIT`, the result is always `UNIT`.\\n    else if (xInt == uUNIT) {\\n        return UNIT;\\n    }\\n\\n    // If y is zero, the result is always `UNIT`.\\n    if (yInt == 0) {\\n        return UNIT;\\n    }\\n    // If y is `UNIT`, the result is always x.\\n    else if (yInt == uUNIT) {\\n        return x;\\n    }\\n\\n    // Calculate the result using the formula.\\n    result = exp2(mul(log2(x), y));\\n}\\n\\n/// @notice Raises x (an SD59x18 number) to the power y (an unsigned basic integer) using the well-known\\n/// algorithm \\\"exponentiation by squaring\\\".\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv18}.\\n/// - Returns `UNIT` for 0^0.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {abs} and {Common.mulDiv18}.\\n/// - The result must fit in SD59x18.\\n///\\n/// @param x The base as an SD59x18 number.\\n/// @param y The exponent as a uint256.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction powu(SD59x18 x, uint256 y) pure returns (SD59x18 result) {\\n    uint256 xAbs = uint256(abs(x).unwrap());\\n\\n    // Calculate the first iteration of the loop in advance.\\n    uint256 resultAbs = y & 1 > 0 ? xAbs : uint256(uUNIT);\\n\\n    // Equivalent to `for(y /= 2; y > 0; y /= 2)`.\\n    uint256 yAux = y;\\n    for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n        xAbs = Common.mulDiv18(xAbs, xAbs);\\n\\n        // Equivalent to `y % 2 == 1`.\\n        if (yAux & 1 > 0) {\\n            resultAbs = Common.mulDiv18(resultAbs, xAbs);\\n        }\\n    }\\n\\n    // The result must fit in SD59x18.\\n    if (resultAbs > uint256(uMAX_SD59x18)) {\\n        revert Errors.PRBMath_SD59x18_Powu_Overflow(x, y);\\n    }\\n\\n    unchecked {\\n        // Is the base negative and the exponent odd? If yes, the result should be negative.\\n        int256 resultInt = int256(resultAbs);\\n        bool isNegative = x.unwrap() < 0 && y & 1 == 1;\\n        if (isNegative) {\\n            resultInt = -resultInt;\\n        }\\n        result = wrap(resultInt);\\n    }\\n}\\n\\n/// @notice Calculates the square root of x using the Babylonian method.\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n///\\n/// Notes:\\n/// - Only the positive root is returned.\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x cannot be negative, since complex numbers are not supported.\\n/// - x must be less than `MAX_SD59x18 / UNIT`.\\n///\\n/// @param x The SD59x18 number for which to calculate the square root.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction sqrt(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt < 0) {\\n        revert Errors.PRBMath_SD59x18_Sqrt_NegativeInput(x);\\n    }\\n    if (xInt > uMAX_SD59x18 / uUNIT) {\\n        revert Errors.PRBMath_SD59x18_Sqrt_Overflow(x);\\n    }\\n\\n    unchecked {\\n        // Multiply x by `UNIT` to account for the factor of `UNIT` picked up when multiplying two SD59x18 numbers.\\n        // In this case, the two numbers are both the square root.\\n        uint256 resultUint = Common.sqrt(uint256(xInt * uUNIT));\\n        result = wrap(int256(resultUint));\\n    }\\n}\\n\",\"keccak256\":\"0xedd0635769176ab99878a91ce267cee2ca107b30e6b0db10736573ff4d102868\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/ValueType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Casting.sol\\\" as Casting;\\nimport \\\"./Helpers.sol\\\" as Helpers;\\nimport \\\"./Math.sol\\\" as Math;\\n\\n/// @notice The signed 59.18-decimal fixed-point number representation, which can have up to 59 digits and up to 18\\n/// decimals. The values of this are bound by the minimum and the maximum values permitted by the underlying Solidity\\n/// type int256.\\ntype SD59x18 is int256;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Casting.intoInt256,\\n    Casting.intoSD1x18,\\n    Casting.intoUD2x18,\\n    Casting.intoUD60x18,\\n    Casting.intoUint256,\\n    Casting.intoUint128,\\n    Casting.intoUint40,\\n    Casting.unwrap\\n} for SD59x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            MATHEMATICAL FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Math.abs,\\n    Math.avg,\\n    Math.ceil,\\n    Math.div,\\n    Math.exp,\\n    Math.exp2,\\n    Math.floor,\\n    Math.frac,\\n    Math.gm,\\n    Math.inv,\\n    Math.log10,\\n    Math.log2,\\n    Math.ln,\\n    Math.mul,\\n    Math.pow,\\n    Math.powu,\\n    Math.sqrt\\n} for SD59x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                HELPER FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Helpers.add,\\n    Helpers.and,\\n    Helpers.eq,\\n    Helpers.gt,\\n    Helpers.gte,\\n    Helpers.isZero,\\n    Helpers.lshift,\\n    Helpers.lt,\\n    Helpers.lte,\\n    Helpers.mod,\\n    Helpers.neq,\\n    Helpers.not,\\n    Helpers.or,\\n    Helpers.rshift,\\n    Helpers.sub,\\n    Helpers.uncheckedAdd,\\n    Helpers.uncheckedSub,\\n    Helpers.uncheckedUnary,\\n    Helpers.xor\\n} for SD59x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    OPERATORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// The global \\\"using for\\\" directive makes it possible to use these operators on the SD59x18 type.\\nusing {\\n    Helpers.add as +,\\n    Helpers.and2 as &,\\n    Math.div as /,\\n    Helpers.eq as ==,\\n    Helpers.gt as >,\\n    Helpers.gte as >=,\\n    Helpers.lt as <,\\n    Helpers.lte as <=,\\n    Helpers.mod as %,\\n    Math.mul as *,\\n    Helpers.neq as !=,\\n    Helpers.not as ~,\\n    Helpers.or as |,\\n    Helpers.sub as -,\\n    Helpers.unary as -,\\n    Helpers.xor as ^\\n} for SD59x18 global;\\n\",\"keccak256\":\"0xe03112d145dcd5863aff24e5f381debaae29d446acd5666f3d640e3d9af738d7\",\"license\":\"MIT\"},\"@prb/math/src/ud2x18/Casting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"../Common.sol\\\" as Common;\\nimport \\\"./Errors.sol\\\" as Errors;\\nimport { uMAX_SD1x18 } from \\\"../sd1x18/Constants.sol\\\";\\nimport { SD1x18 } from \\\"../sd1x18/ValueType.sol\\\";\\nimport { SD59x18 } from \\\"../sd59x18/ValueType.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"../ud60x18/ValueType.sol\\\";\\nimport { UD2x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts a UD2x18 number into SD1x18.\\n/// - x must be less than or equal to `uMAX_SD1x18`.\\nfunction intoSD1x18(UD2x18 x) pure returns (SD1x18 result) {\\n    uint64 xUint = UD2x18.unwrap(x);\\n    if (xUint > uint64(uMAX_SD1x18)) {\\n        revert Errors.PRBMath_UD2x18_IntoSD1x18_Overflow(x);\\n    }\\n    result = SD1x18.wrap(int64(xUint));\\n}\\n\\n/// @notice Casts a UD2x18 number into SD59x18.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of SD59x18.\\nfunction intoSD59x18(UD2x18 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(int256(uint256(UD2x18.unwrap(x))));\\n}\\n\\n/// @notice Casts a UD2x18 number into UD60x18.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of UD60x18.\\nfunction intoUD60x18(UD2x18 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(UD2x18.unwrap(x));\\n}\\n\\n/// @notice Casts a UD2x18 number into uint128.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of uint128.\\nfunction intoUint128(UD2x18 x) pure returns (uint128 result) {\\n    result = uint128(UD2x18.unwrap(x));\\n}\\n\\n/// @notice Casts a UD2x18 number into uint256.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of uint256.\\nfunction intoUint256(UD2x18 x) pure returns (uint256 result) {\\n    result = uint256(UD2x18.unwrap(x));\\n}\\n\\n/// @notice Casts a UD2x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(UD2x18 x) pure returns (uint40 result) {\\n    uint64 xUint = UD2x18.unwrap(x);\\n    if (xUint > uint64(Common.MAX_UINT40)) {\\n        revert Errors.PRBMath_UD2x18_IntoUint40_Overflow(x);\\n    }\\n    result = uint40(xUint);\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction ud2x18(uint64 x) pure returns (UD2x18 result) {\\n    result = UD2x18.wrap(x);\\n}\\n\\n/// @notice Unwrap a UD2x18 number into uint64.\\nfunction unwrap(UD2x18 x) pure returns (uint64 result) {\\n    result = UD2x18.unwrap(x);\\n}\\n\\n/// @notice Wraps a uint64 number into UD2x18.\\nfunction wrap(uint64 x) pure returns (UD2x18 result) {\\n    result = UD2x18.wrap(x);\\n}\\n\",\"keccak256\":\"0x07ec9a8adddfe6bf37f0d9ce7702c5620a6215340889701da0525ed190ccc099\",\"license\":\"MIT\"},\"@prb/math/src/ud2x18/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { UD2x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @dev Euler's number as a UD2x18 number.\\nUD2x18 constant E = UD2x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum value a UD2x18 number can have.\\nuint64 constant uMAX_UD2x18 = 18_446744073709551615;\\nUD2x18 constant MAX_UD2x18 = UD2x18.wrap(uMAX_UD2x18);\\n\\n/// @dev PI as a UD2x18 number.\\nUD2x18 constant PI = UD2x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit number, which gives the decimal precision of UD2x18.\\nuint256 constant uUNIT = 1e18;\\nUD2x18 constant UNIT = UD2x18.wrap(1e18);\\n\",\"keccak256\":\"0xbd11da8ad79ffc8b7b8244c82632b0ca31970e190a8877ba1a69b4b8065dcea5\",\"license\":\"MIT\"},\"@prb/math/src/ud2x18/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { UD2x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Thrown when trying to cast a UD2x18 number that doesn't fit in SD1x18.\\nerror PRBMath_UD2x18_IntoSD1x18_Overflow(UD2x18 x);\\n\\n/// @notice Thrown when trying to cast a UD2x18 number that doesn't fit in uint40.\\nerror PRBMath_UD2x18_IntoUint40_Overflow(UD2x18 x);\\n\",\"keccak256\":\"0xdf1e22f0b4c8032bcc8b7f63fe3984e1387f3dc7b2e9ab381822249f75376d33\",\"license\":\"MIT\"},\"@prb/math/src/ud2x18/ValueType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Casting.sol\\\" as Casting;\\n\\n/// @notice The unsigned 2.18-decimal fixed-point number representation, which can have up to 2 digits and up to 18\\n/// decimals. The values of this are bound by the minimum and the maximum values permitted by the underlying Solidity\\n/// type uint64. This is useful when end users want to use uint64 to save gas, e.g. with tight variable packing in contract\\n/// storage.\\ntype UD2x18 is uint64;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Casting.intoSD1x18,\\n    Casting.intoSD59x18,\\n    Casting.intoUD60x18,\\n    Casting.intoUint256,\\n    Casting.intoUint128,\\n    Casting.intoUint40,\\n    Casting.unwrap\\n} for UD2x18 global;\\n\",\"keccak256\":\"0x2802edc9869db116a0b5c490cc5f8554742f747183fa30ac5e9c80bb967e61a1\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Casting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Errors.sol\\\" as CastingErrors;\\nimport { MAX_UINT128, MAX_UINT40 } from \\\"../Common.sol\\\";\\nimport { uMAX_SD1x18 } from \\\"../sd1x18/Constants.sol\\\";\\nimport { SD1x18 } from \\\"../sd1x18/ValueType.sol\\\";\\nimport { uMAX_SD59x18 } from \\\"../sd59x18/Constants.sol\\\";\\nimport { SD59x18 } from \\\"../sd59x18/ValueType.sol\\\";\\nimport { uMAX_UD2x18 } from \\\"../ud2x18/Constants.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts a UD60x18 number into SD1x18.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `uMAX_SD1x18`.\\nfunction intoSD1x18(UD60x18 x) pure returns (SD1x18 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > uint256(int256(uMAX_SD1x18))) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoSD1x18_Overflow(x);\\n    }\\n    result = SD1x18.wrap(int64(uint64(xUint)));\\n}\\n\\n/// @notice Casts a UD60x18 number into UD2x18.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `uMAX_UD2x18`.\\nfunction intoUD2x18(UD60x18 x) pure returns (UD2x18 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > uMAX_UD2x18) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoUD2x18_Overflow(x);\\n    }\\n    result = UD2x18.wrap(uint64(xUint));\\n}\\n\\n/// @notice Casts a UD60x18 number into SD59x18.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `uMAX_SD59x18`.\\nfunction intoSD59x18(UD60x18 x) pure returns (SD59x18 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > uint256(uMAX_SD59x18)) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoSD59x18_Overflow(x);\\n    }\\n    result = SD59x18.wrap(int256(xUint));\\n}\\n\\n/// @notice Casts a UD60x18 number into uint128.\\n/// @dev This is basically an alias for {unwrap}.\\nfunction intoUint256(UD60x18 x) pure returns (uint256 result) {\\n    result = UD60x18.unwrap(x);\\n}\\n\\n/// @notice Casts a UD60x18 number into uint128.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UINT128`.\\nfunction intoUint128(UD60x18 x) pure returns (uint128 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > MAX_UINT128) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoUint128_Overflow(x);\\n    }\\n    result = uint128(xUint);\\n}\\n\\n/// @notice Casts a UD60x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(UD60x18 x) pure returns (uint40 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > MAX_UINT40) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoUint40_Overflow(x);\\n    }\\n    result = uint40(xUint);\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction ud(uint256 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(x);\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction ud60x18(uint256 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(x);\\n}\\n\\n/// @notice Unwraps a UD60x18 number into uint256.\\nfunction unwrap(UD60x18 x) pure returns (uint256 result) {\\n    result = UD60x18.unwrap(x);\\n}\\n\\n/// @notice Wraps a uint256 number into the UD60x18 value type.\\nfunction wrap(uint256 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(x);\\n}\\n\",\"keccak256\":\"0x5bb532da36921cbdac64d1f16de5d366ef1f664502e3b7c07d0ad06917551f85\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n// NOTICE: the \\\"u\\\" prefix stands for \\\"unwrapped\\\".\\n\\n/// @dev Euler's number as a UD60x18 number.\\nUD60x18 constant E = UD60x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum input permitted in {exp}.\\nuint256 constant uEXP_MAX_INPUT = 133_084258667509499440;\\nUD60x18 constant EXP_MAX_INPUT = UD60x18.wrap(uEXP_MAX_INPUT);\\n\\n/// @dev The maximum input permitted in {exp2}.\\nuint256 constant uEXP2_MAX_INPUT = 192e18 - 1;\\nUD60x18 constant EXP2_MAX_INPUT = UD60x18.wrap(uEXP2_MAX_INPUT);\\n\\n/// @dev Half the UNIT number.\\nuint256 constant uHALF_UNIT = 0.5e18;\\nUD60x18 constant HALF_UNIT = UD60x18.wrap(uHALF_UNIT);\\n\\n/// @dev $log_2(10)$ as a UD60x18 number.\\nuint256 constant uLOG2_10 = 3_321928094887362347;\\nUD60x18 constant LOG2_10 = UD60x18.wrap(uLOG2_10);\\n\\n/// @dev $log_2(e)$ as a UD60x18 number.\\nuint256 constant uLOG2_E = 1_442695040888963407;\\nUD60x18 constant LOG2_E = UD60x18.wrap(uLOG2_E);\\n\\n/// @dev The maximum value a UD60x18 number can have.\\nuint256 constant uMAX_UD60x18 = 115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\nUD60x18 constant MAX_UD60x18 = UD60x18.wrap(uMAX_UD60x18);\\n\\n/// @dev The maximum whole value a UD60x18 number can have.\\nuint256 constant uMAX_WHOLE_UD60x18 = 115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\nUD60x18 constant MAX_WHOLE_UD60x18 = UD60x18.wrap(uMAX_WHOLE_UD60x18);\\n\\n/// @dev PI as a UD60x18 number.\\nUD60x18 constant PI = UD60x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit number, which gives the decimal precision of UD60x18.\\nuint256 constant uUNIT = 1e18;\\nUD60x18 constant UNIT = UD60x18.wrap(uUNIT);\\n\\n/// @dev The unit number squared.\\nuint256 constant uUNIT_SQUARED = 1e36;\\nUD60x18 constant UNIT_SQUARED = UD60x18.wrap(uUNIT_SQUARED);\\n\\n/// @dev Zero as a UD60x18 number.\\nUD60x18 constant ZERO = UD60x18.wrap(0);\\n\",\"keccak256\":\"0x2b80d26153d3fdcfb3a9ca772d9309d31ed1275f5b8b54c3ffb54d3652b37d90\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Conversions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { uMAX_UD60x18, uUNIT } from \\\"./Constants.sol\\\";\\nimport { PRBMath_UD60x18_Convert_Overflow } from \\\"./Errors.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Converts a UD60x18 number to a simple integer by dividing it by `UNIT`.\\n/// @dev The result is rounded toward zero.\\n/// @param x The UD60x18 number to convert.\\n/// @return result The same number in basic integer form.\\nfunction convert(UD60x18 x) pure returns (uint256 result) {\\n    result = UD60x18.unwrap(x) / uUNIT;\\n}\\n\\n/// @notice Converts a simple integer to UD60x18 by multiplying it by `UNIT`.\\n///\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UD60x18 / UNIT`.\\n///\\n/// @param x The basic integer to convert.\\n/// @param result The same number converted to UD60x18.\\nfunction convert(uint256 x) pure returns (UD60x18 result) {\\n    if (x > uMAX_UD60x18 / uUNIT) {\\n        revert PRBMath_UD60x18_Convert_Overflow(x);\\n    }\\n    unchecked {\\n        result = UD60x18.wrap(x * uUNIT);\\n    }\\n}\\n\",\"keccak256\":\"0xaf7fc2523413822de3b66ba339fe2884fb3b8c6f6cf38ec90a2c3e3aae71df6b\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Thrown when ceiling a number overflows UD60x18.\\nerror PRBMath_UD60x18_Ceil_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when converting a basic integer to the fixed-point format overflows UD60x18.\\nerror PRBMath_UD60x18_Convert_Overflow(uint256 x);\\n\\n/// @notice Thrown when taking the natural exponent of a base greater than 133_084258667509499441.\\nerror PRBMath_UD60x18_Exp_InputTooBig(UD60x18 x);\\n\\n/// @notice Thrown when taking the binary exponent of a base greater than 192e18.\\nerror PRBMath_UD60x18_Exp2_InputTooBig(UD60x18 x);\\n\\n/// @notice Thrown when taking the geometric mean of two numbers and multiplying them overflows UD60x18.\\nerror PRBMath_UD60x18_Gm_Overflow(UD60x18 x, UD60x18 y);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in SD1x18.\\nerror PRBMath_UD60x18_IntoSD1x18_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in SD59x18.\\nerror PRBMath_UD60x18_IntoSD59x18_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in UD2x18.\\nerror PRBMath_UD60x18_IntoUD2x18_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint128.\\nerror PRBMath_UD60x18_IntoUint128_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint40.\\nerror PRBMath_UD60x18_IntoUint40_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when taking the logarithm of a number less than 1.\\nerror PRBMath_UD60x18_Log_InputTooSmall(UD60x18 x);\\n\\n/// @notice Thrown when calculating the square root overflows UD60x18.\\nerror PRBMath_UD60x18_Sqrt_Overflow(UD60x18 x);\\n\",\"keccak256\":\"0xa8c60d4066248df22c49c882873efbc017344107edabc48c52209abbc39cb1e3\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { wrap } from \\\"./Casting.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Implements the checked addition operation (+) in the UD60x18 type.\\nfunction add(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() + y.unwrap());\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the UD60x18 type.\\nfunction and(UD60x18 x, uint256 bits) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() & bits);\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the UD60x18 type.\\nfunction and2(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() & y.unwrap());\\n}\\n\\n/// @notice Implements the equal operation (==) in the UD60x18 type.\\nfunction eq(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() == y.unwrap();\\n}\\n\\n/// @notice Implements the greater than operation (>) in the UD60x18 type.\\nfunction gt(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() > y.unwrap();\\n}\\n\\n/// @notice Implements the greater than or equal to operation (>=) in the UD60x18 type.\\nfunction gte(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() >= y.unwrap();\\n}\\n\\n/// @notice Implements a zero comparison check function in the UD60x18 type.\\nfunction isZero(UD60x18 x) pure returns (bool result) {\\n    // This wouldn't work if x could be negative.\\n    result = x.unwrap() == 0;\\n}\\n\\n/// @notice Implements the left shift operation (<<) in the UD60x18 type.\\nfunction lshift(UD60x18 x, uint256 bits) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() << bits);\\n}\\n\\n/// @notice Implements the lower than operation (<) in the UD60x18 type.\\nfunction lt(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() < y.unwrap();\\n}\\n\\n/// @notice Implements the lower than or equal to operation (<=) in the UD60x18 type.\\nfunction lte(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() <= y.unwrap();\\n}\\n\\n/// @notice Implements the checked modulo operation (%) in the UD60x18 type.\\nfunction mod(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() % y.unwrap());\\n}\\n\\n/// @notice Implements the not equal operation (!=) in the UD60x18 type.\\nfunction neq(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() != y.unwrap();\\n}\\n\\n/// @notice Implements the NOT (~) bitwise operation in the UD60x18 type.\\nfunction not(UD60x18 x) pure returns (UD60x18 result) {\\n    result = wrap(~x.unwrap());\\n}\\n\\n/// @notice Implements the OR (|) bitwise operation in the UD60x18 type.\\nfunction or(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() | y.unwrap());\\n}\\n\\n/// @notice Implements the right shift operation (>>) in the UD60x18 type.\\nfunction rshift(UD60x18 x, uint256 bits) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() >> bits);\\n}\\n\\n/// @notice Implements the checked subtraction operation (-) in the UD60x18 type.\\nfunction sub(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() - y.unwrap());\\n}\\n\\n/// @notice Implements the unchecked addition operation (+) in the UD60x18 type.\\nfunction uncheckedAdd(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    unchecked {\\n        result = wrap(x.unwrap() + y.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the unchecked subtraction operation (-) in the UD60x18 type.\\nfunction uncheckedSub(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    unchecked {\\n        result = wrap(x.unwrap() - y.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the XOR (^) bitwise operation in the UD60x18 type.\\nfunction xor(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() ^ y.unwrap());\\n}\\n\",\"keccak256\":\"0xf5faff881391d2c060029499a666cc5f0bea90a213150bb476fae8f02a5df268\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"../Common.sol\\\" as Common;\\nimport \\\"./Errors.sol\\\" as Errors;\\nimport { wrap } from \\\"./Casting.sol\\\";\\nimport {\\n    uEXP_MAX_INPUT,\\n    uEXP2_MAX_INPUT,\\n    uHALF_UNIT,\\n    uLOG2_10,\\n    uLOG2_E,\\n    uMAX_UD60x18,\\n    uMAX_WHOLE_UD60x18,\\n    UNIT,\\n    uUNIT,\\n    uUNIT_SQUARED,\\n    ZERO\\n} from \\\"./Constants.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            MATHEMATICAL FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Calculates the arithmetic average of x and y using the following formula:\\n///\\n/// $$\\n/// avg(x, y) = (x & y) + ((xUint ^ yUint) / 2)\\n/// $$\\n//\\n/// In English, this is what this formula does:\\n///\\n/// 1. AND x and y.\\n/// 2. Calculate half of XOR x and y.\\n/// 3. Add the two results together.\\n///\\n/// This technique is known as SWAR, which stands for \\\"SIMD within a register\\\". You can read more about it here:\\n/// https://devblogs.microsoft.com/oldnewthing/20220207-00/?p=106223\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// @param x The first operand as a UD60x18 number.\\n/// @param y The second operand as a UD60x18 number.\\n/// @return result The arithmetic average as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction avg(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    uint256 yUint = y.unwrap();\\n    unchecked {\\n        result = wrap((xUint & yUint) + ((xUint ^ yUint) >> 1));\\n    }\\n}\\n\\n/// @notice Yields the smallest whole number greater than or equal to x.\\n///\\n/// @dev This is optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional\\n/// counterparts. See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n///\\n/// Requirements:\\n/// - x must be less than or equal to `MAX_WHOLE_UD60x18`.\\n///\\n/// @param x The UD60x18 number to ceil.\\n/// @param result The smallest whole number greater than or equal to x, as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction ceil(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    if (xUint > uMAX_WHOLE_UD60x18) {\\n        revert Errors.PRBMath_UD60x18_Ceil_Overflow(x);\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n        // Equivalent to `x % UNIT`.\\n        let remainder := mod(x, uUNIT)\\n\\n        // Equivalent to `UNIT - remainder`.\\n        let delta := sub(uUNIT, remainder)\\n\\n        // Equivalent to `x + remainder > 0 ? delta : 0`.\\n        result := add(x, mul(delta, gt(remainder, 0)))\\n    }\\n}\\n\\n/// @notice Divides two UD60x18 numbers, returning a new UD60x18 number.\\n///\\n/// @dev Uses {Common.mulDiv} to enable overflow-safe multiplication and division.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {Common.mulDiv}.\\n///\\n/// @param x The numerator as a UD60x18 number.\\n/// @param y The denominator as a UD60x18 number.\\n/// @param result The quotient as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction div(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(Common.mulDiv(x.unwrap(), uUNIT, y.unwrap()));\\n}\\n\\n/// @notice Calculates the natural exponent of x using the following formula:\\n///\\n/// $$\\n/// e^x = 2^{x * log_2{e}}\\n/// $$\\n///\\n/// @dev Requirements:\\n/// - x must be less than 133_084258667509499441.\\n///\\n/// @param x The exponent as a UD60x18 number.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n\\n    // This check prevents values greater than 192e18 from being passed to {exp2}.\\n    if (xUint > uEXP_MAX_INPUT) {\\n        revert Errors.PRBMath_UD60x18_Exp_InputTooBig(x);\\n    }\\n\\n    unchecked {\\n        // Inline the fixed-point multiplication to save gas.\\n        uint256 doubleUnitProduct = xUint * uLOG2_E;\\n        result = exp2(wrap(doubleUnitProduct / uUNIT));\\n    }\\n}\\n\\n/// @notice Calculates the binary exponent of x using the binary fraction method.\\n///\\n/// @dev See https://ethereum.stackexchange.com/q/79903/24693\\n///\\n/// Requirements:\\n/// - x must be less than 192e18.\\n/// - The result must fit in UD60x18.\\n///\\n/// @param x The exponent as a UD60x18 number.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp2(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n\\n    // Numbers greater than or equal to 192e18 don't fit in the 192.64-bit format.\\n    if (xUint > uEXP2_MAX_INPUT) {\\n        revert Errors.PRBMath_UD60x18_Exp2_InputTooBig(x);\\n    }\\n\\n    // Convert x to the 192.64-bit fixed-point format.\\n    uint256 x_192x64 = (xUint << 64) / uUNIT;\\n\\n    // Pass x to the {Common.exp2} function, which uses the 192.64-bit fixed-point number representation.\\n    result = wrap(Common.exp2(x_192x64));\\n}\\n\\n/// @notice Yields the greatest whole number less than or equal to x.\\n/// @dev Optimized for fractional value inputs, because every whole value has (1e18 - 1) fractional counterparts.\\n/// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n/// @param x The UD60x18 number to floor.\\n/// @param result The greatest whole number less than or equal to x, as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction floor(UD60x18 x) pure returns (UD60x18 result) {\\n    assembly (\\\"memory-safe\\\") {\\n        // Equivalent to `x % UNIT`.\\n        let remainder := mod(x, uUNIT)\\n\\n        // Equivalent to `x - remainder > 0 ? remainder : 0)`.\\n        result := sub(x, mul(remainder, gt(remainder, 0)))\\n    }\\n}\\n\\n/// @notice Yields the excess beyond the floor of x using the odd function definition.\\n/// @dev See https://en.wikipedia.org/wiki/Fractional_part.\\n/// @param x The UD60x18 number to get the fractional part of.\\n/// @param result The fractional part of x as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction frac(UD60x18 x) pure returns (UD60x18 result) {\\n    assembly (\\\"memory-safe\\\") {\\n        result := mod(x, uUNIT)\\n    }\\n}\\n\\n/// @notice Calculates the geometric mean of x and y, i.e. $\\\\sqrt{x * y}$, rounding down.\\n///\\n/// @dev Requirements:\\n/// - x * y must fit in UD60x18.\\n///\\n/// @param x The first operand as a UD60x18 number.\\n/// @param y The second operand as a UD60x18 number.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction gm(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    uint256 yUint = y.unwrap();\\n    if (xUint == 0 || yUint == 0) {\\n        return ZERO;\\n    }\\n\\n    unchecked {\\n        // Checking for overflow this way is faster than letting Solidity do it.\\n        uint256 xyUint = xUint * yUint;\\n        if (xyUint / xUint != yUint) {\\n            revert Errors.PRBMath_UD60x18_Gm_Overflow(x, y);\\n        }\\n\\n        // We don't need to multiply the result by `UNIT` here because the x*y product picked up a factor of `UNIT`\\n        // during multiplication. See the comments in {Common.sqrt}.\\n        result = wrap(Common.sqrt(xyUint));\\n    }\\n}\\n\\n/// @notice Calculates the inverse of x.\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x must not be zero.\\n///\\n/// @param x The UD60x18 number for which to calculate the inverse.\\n/// @return result The inverse as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction inv(UD60x18 x) pure returns (UD60x18 result) {\\n    unchecked {\\n        result = wrap(uUNIT_SQUARED / x.unwrap());\\n    }\\n}\\n\\n/// @notice Calculates the natural logarithm of x using the following formula:\\n///\\n/// $$\\n/// ln{x} = log_2{x} / log_2{e}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2}.\\n/// - The precision isn't sufficiently fine-grained to return exactly `UNIT` when the input is `E`.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {log2}.\\n///\\n/// @param x The UD60x18 number for which to calculate the natural logarithm.\\n/// @return result The natural logarithm as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction ln(UD60x18 x) pure returns (UD60x18 result) {\\n    unchecked {\\n        // Inline the fixed-point multiplication to save gas. This is overflow-safe because the maximum value that\\n        // {log2} can return is ~196_205294292027477728.\\n        result = wrap(log2(x).unwrap() * uUNIT / uLOG2_E);\\n    }\\n}\\n\\n/// @notice Calculates the common logarithm of x using the following formula:\\n///\\n/// $$\\n/// log_{10}{x} = log_2{x} / log_2{10}\\n/// $$\\n///\\n/// However, if x is an exact power of ten, a hard coded value is returned.\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {log2}.\\n///\\n/// @param x The UD60x18 number for which to calculate the common logarithm.\\n/// @return result The common logarithm as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction log10(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    if (xUint < uUNIT) {\\n        revert Errors.PRBMath_UD60x18_Log_InputTooSmall(x);\\n    }\\n\\n    // Note that the `mul` in this assembly block is the standard multiplication operation, not {UD60x18.mul}.\\n    // prettier-ignore\\n    assembly (\\\"memory-safe\\\") {\\n        switch x\\n        case 1 { result := mul(uUNIT, sub(0, 18)) }\\n        case 10 { result := mul(uUNIT, sub(1, 18)) }\\n        case 100 { result := mul(uUNIT, sub(2, 18)) }\\n        case 1000 { result := mul(uUNIT, sub(3, 18)) }\\n        case 10000 { result := mul(uUNIT, sub(4, 18)) }\\n        case 100000 { result := mul(uUNIT, sub(5, 18)) }\\n        case 1000000 { result := mul(uUNIT, sub(6, 18)) }\\n        case 10000000 { result := mul(uUNIT, sub(7, 18)) }\\n        case 100000000 { result := mul(uUNIT, sub(8, 18)) }\\n        case 1000000000 { result := mul(uUNIT, sub(9, 18)) }\\n        case 10000000000 { result := mul(uUNIT, sub(10, 18)) }\\n        case 100000000000 { result := mul(uUNIT, sub(11, 18)) }\\n        case 1000000000000 { result := mul(uUNIT, sub(12, 18)) }\\n        case 10000000000000 { result := mul(uUNIT, sub(13, 18)) }\\n        case 100000000000000 { result := mul(uUNIT, sub(14, 18)) }\\n        case 1000000000000000 { result := mul(uUNIT, sub(15, 18)) }\\n        case 10000000000000000 { result := mul(uUNIT, sub(16, 18)) }\\n        case 100000000000000000 { result := mul(uUNIT, sub(17, 18)) }\\n        case 1000000000000000000 { result := 0 }\\n        case 10000000000000000000 { result := uUNIT }\\n        case 100000000000000000000 { result := mul(uUNIT, 2) }\\n        case 1000000000000000000000 { result := mul(uUNIT, 3) }\\n        case 10000000000000000000000 { result := mul(uUNIT, 4) }\\n        case 100000000000000000000000 { result := mul(uUNIT, 5) }\\n        case 1000000000000000000000000 { result := mul(uUNIT, 6) }\\n        case 10000000000000000000000000 { result := mul(uUNIT, 7) }\\n        case 100000000000000000000000000 { result := mul(uUNIT, 8) }\\n        case 1000000000000000000000000000 { result := mul(uUNIT, 9) }\\n        case 10000000000000000000000000000 { result := mul(uUNIT, 10) }\\n        case 100000000000000000000000000000 { result := mul(uUNIT, 11) }\\n        case 1000000000000000000000000000000 { result := mul(uUNIT, 12) }\\n        case 10000000000000000000000000000000 { result := mul(uUNIT, 13) }\\n        case 100000000000000000000000000000000 { result := mul(uUNIT, 14) }\\n        case 1000000000000000000000000000000000 { result := mul(uUNIT, 15) }\\n        case 10000000000000000000000000000000000 { result := mul(uUNIT, 16) }\\n        case 100000000000000000000000000000000000 { result := mul(uUNIT, 17) }\\n        case 1000000000000000000000000000000000000 { result := mul(uUNIT, 18) }\\n        case 10000000000000000000000000000000000000 { result := mul(uUNIT, 19) }\\n        case 100000000000000000000000000000000000000 { result := mul(uUNIT, 20) }\\n        case 1000000000000000000000000000000000000000 { result := mul(uUNIT, 21) }\\n        case 10000000000000000000000000000000000000000 { result := mul(uUNIT, 22) }\\n        case 100000000000000000000000000000000000000000 { result := mul(uUNIT, 23) }\\n        case 1000000000000000000000000000000000000000000 { result := mul(uUNIT, 24) }\\n        case 10000000000000000000000000000000000000000000 { result := mul(uUNIT, 25) }\\n        case 100000000000000000000000000000000000000000000 { result := mul(uUNIT, 26) }\\n        case 1000000000000000000000000000000000000000000000 { result := mul(uUNIT, 27) }\\n        case 10000000000000000000000000000000000000000000000 { result := mul(uUNIT, 28) }\\n        case 100000000000000000000000000000000000000000000000 { result := mul(uUNIT, 29) }\\n        case 1000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 30) }\\n        case 10000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 31) }\\n        case 100000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 32) }\\n        case 1000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 33) }\\n        case 10000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 34) }\\n        case 100000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 35) }\\n        case 1000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 36) }\\n        case 10000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 37) }\\n        case 100000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 38) }\\n        case 1000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 39) }\\n        case 10000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 40) }\\n        case 100000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 41) }\\n        case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 42) }\\n        case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 43) }\\n        case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 44) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 45) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 46) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 47) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 48) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 49) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 50) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 51) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 52) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 53) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 54) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 55) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 56) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 57) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 58) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 59) }\\n        default { result := uMAX_UD60x18 }\\n    }\\n\\n    if (result.unwrap() == uMAX_UD60x18) {\\n        unchecked {\\n            // Inline the fixed-point division to save gas.\\n            result = wrap(log2(x).unwrap() * uUNIT / uLOG2_10);\\n        }\\n    }\\n}\\n\\n/// @notice Calculates the binary logarithm of x using the iterative approximation algorithm:\\n///\\n/// $$\\n/// log_2{x} = n + log_2{y}, \\\\text{ where } y = x*2^{-n}, \\\\ y \\\\in [1, 2)\\n/// $$\\n///\\n/// For $0 \\\\leq x \\\\lt 1$, the input is inverted:\\n///\\n/// $$\\n/// log_2{x} = -log_2{\\\\frac{1}{x}}\\n/// $$\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n///\\n/// Notes:\\n/// - Due to the lossy precision of the iterative approximation, the results are not perfectly accurate to the last decimal.\\n///\\n/// Requirements:\\n/// - x must be greater than zero.\\n///\\n/// @param x The UD60x18 number for which to calculate the binary logarithm.\\n/// @return result The binary logarithm as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction log2(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n\\n    if (xUint < uUNIT) {\\n        revert Errors.PRBMath_UD60x18_Log_InputTooSmall(x);\\n    }\\n\\n    unchecked {\\n        // Calculate the integer part of the logarithm.\\n        uint256 n = Common.msb(xUint / uUNIT);\\n\\n        // This is the integer part of the logarithm as a UD60x18 number. The operation can't overflow because n\\n        // n is at most 255 and UNIT is 1e18.\\n        uint256 resultUint = n * uUNIT;\\n\\n        // Calculate $y = x * 2^{-n}$.\\n        uint256 y = xUint >> n;\\n\\n        // If y is the unit number, the fractional part is zero.\\n        if (y == uUNIT) {\\n            return wrap(resultUint);\\n        }\\n\\n        // Calculate the fractional part via the iterative approximation.\\n        // The `delta >>= 1` part is equivalent to `delta /= 2`, but shifting bits is more gas efficient.\\n        uint256 DOUBLE_UNIT = 2e18;\\n        for (uint256 delta = uHALF_UNIT; delta > 0; delta >>= 1) {\\n            y = (y * y) / uUNIT;\\n\\n            // Is y^2 >= 2e18 and so in the range [2e18, 4e18)?\\n            if (y >= DOUBLE_UNIT) {\\n                // Add the 2^{-m} factor to the logarithm.\\n                resultUint += delta;\\n\\n                // Halve y, which corresponds to z/2 in the Wikipedia article.\\n                y >>= 1;\\n            }\\n        }\\n        result = wrap(resultUint);\\n    }\\n}\\n\\n/// @notice Multiplies two UD60x18 numbers together, returning a new UD60x18 number.\\n///\\n/// @dev Uses {Common.mulDiv} to enable overflow-safe multiplication and division.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {Common.mulDiv}.\\n///\\n/// @dev See the documentation in {Common.mulDiv18}.\\n/// @param x The multiplicand as a UD60x18 number.\\n/// @param y The multiplier as a UD60x18 number.\\n/// @return result The product as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mul(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(Common.mulDiv18(x.unwrap(), y.unwrap()));\\n}\\n\\n/// @notice Raises x to the power of y.\\n///\\n/// For $1 \\\\leq x \\\\leq \\\\infty$, the following standard formula is used:\\n///\\n/// $$\\n/// x^y = 2^{log_2{x} * y}\\n/// $$\\n///\\n/// For $0 \\\\leq x \\\\lt 1$, since the unsigned {log2} is undefined, an equivalent formula is used:\\n///\\n/// $$\\n/// i = \\\\frac{1}{x}\\n/// w = 2^{log_2{i} * y}\\n/// x^y = \\\\frac{1}{w}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2} and {mul}.\\n/// - Returns `UNIT` for 0^0.\\n/// - It may not perform well with very small values of x. Consider using SD59x18 as an alternative.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {exp2}, {log2}, and {mul}.\\n///\\n/// @param x The base as a UD60x18 number.\\n/// @param y The exponent as a UD60x18 number.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction pow(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    uint256 yUint = y.unwrap();\\n\\n    // If both x and y are zero, the result is `UNIT`. If just x is zero, the result is always zero.\\n    if (xUint == 0) {\\n        return yUint == 0 ? UNIT : ZERO;\\n    }\\n    // If x is `UNIT`, the result is always `UNIT`.\\n    else if (xUint == uUNIT) {\\n        return UNIT;\\n    }\\n\\n    // If y is zero, the result is always `UNIT`.\\n    if (yUint == 0) {\\n        return UNIT;\\n    }\\n    // If y is `UNIT`, the result is always x.\\n    else if (yUint == uUNIT) {\\n        return x;\\n    }\\n\\n    // If x is greater than `UNIT`, use the standard formula.\\n    if (xUint > uUNIT) {\\n        result = exp2(mul(log2(x), y));\\n    }\\n    // Conversely, if x is less than `UNIT`, use the equivalent formula.\\n    else {\\n        UD60x18 i = wrap(uUNIT_SQUARED / xUint);\\n        UD60x18 w = exp2(mul(log2(i), y));\\n        result = wrap(uUNIT_SQUARED / w.unwrap());\\n    }\\n}\\n\\n/// @notice Raises x (a UD60x18 number) to the power y (an unsigned basic integer) using the well-known\\n/// algorithm \\\"exponentiation by squaring\\\".\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv18}.\\n/// - Returns `UNIT` for 0^0.\\n///\\n/// Requirements:\\n/// - The result must fit in UD60x18.\\n///\\n/// @param x The base as a UD60x18 number.\\n/// @param y The exponent as a uint256.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction powu(UD60x18 x, uint256 y) pure returns (UD60x18 result) {\\n    // Calculate the first iteration of the loop in advance.\\n    uint256 xUint = x.unwrap();\\n    uint256 resultUint = y & 1 > 0 ? xUint : uUNIT;\\n\\n    // Equivalent to `for(y /= 2; y > 0; y /= 2)`.\\n    for (y >>= 1; y > 0; y >>= 1) {\\n        xUint = Common.mulDiv18(xUint, xUint);\\n\\n        // Equivalent to `y % 2 == 1`.\\n        if (y & 1 > 0) {\\n            resultUint = Common.mulDiv18(resultUint, xUint);\\n        }\\n    }\\n    result = wrap(resultUint);\\n}\\n\\n/// @notice Calculates the square root of x using the Babylonian method.\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n///\\n/// Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x must be less than `MAX_UD60x18 / UNIT`.\\n///\\n/// @param x The UD60x18 number for which to calculate the square root.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction sqrt(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n\\n    unchecked {\\n        if (xUint > uMAX_UD60x18 / uUNIT) {\\n            revert Errors.PRBMath_UD60x18_Sqrt_Overflow(x);\\n        }\\n        // Multiply x by `UNIT` to account for the factor of `UNIT` picked up when multiplying two UD60x18 numbers.\\n        // In this case, the two numbers are both the square root.\\n        result = wrap(Common.sqrt(xUint * uUNIT));\\n    }\\n}\\n\",\"keccak256\":\"0xafe12d658b5bb495226df1841cbfbcb25e9fc443c6d41a85b5ac6aa7ec79ea29\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/ValueType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Casting.sol\\\" as Casting;\\nimport \\\"./Helpers.sol\\\" as Helpers;\\nimport \\\"./Math.sol\\\" as Math;\\n\\n/// @notice The unsigned 60.18-decimal fixed-point number representation, which can have up to 60 digits and up to 18\\n/// decimals. The values of this are bound by the minimum and the maximum values permitted by the Solidity type uint256.\\n/// @dev The value type is defined here so it can be imported in all other files.\\ntype UD60x18 is uint256;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Casting.intoSD1x18,\\n    Casting.intoUD2x18,\\n    Casting.intoSD59x18,\\n    Casting.intoUint128,\\n    Casting.intoUint256,\\n    Casting.intoUint40,\\n    Casting.unwrap\\n} for UD60x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            MATHEMATICAL FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// The global \\\"using for\\\" directive makes the functions in this library callable on the UD60x18 type.\\nusing {\\n    Math.avg,\\n    Math.ceil,\\n    Math.div,\\n    Math.exp,\\n    Math.exp2,\\n    Math.floor,\\n    Math.frac,\\n    Math.gm,\\n    Math.inv,\\n    Math.ln,\\n    Math.log10,\\n    Math.log2,\\n    Math.mul,\\n    Math.pow,\\n    Math.powu,\\n    Math.sqrt\\n} for UD60x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                HELPER FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// The global \\\"using for\\\" directive makes the functions in this library callable on the UD60x18 type.\\nusing {\\n    Helpers.add,\\n    Helpers.and,\\n    Helpers.eq,\\n    Helpers.gt,\\n    Helpers.gte,\\n    Helpers.isZero,\\n    Helpers.lshift,\\n    Helpers.lt,\\n    Helpers.lte,\\n    Helpers.mod,\\n    Helpers.neq,\\n    Helpers.not,\\n    Helpers.or,\\n    Helpers.rshift,\\n    Helpers.sub,\\n    Helpers.uncheckedAdd,\\n    Helpers.uncheckedSub,\\n    Helpers.xor\\n} for UD60x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    OPERATORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// The global \\\"using for\\\" directive makes it possible to use these operators on the UD60x18 type.\\nusing {\\n    Helpers.add as +,\\n    Helpers.and2 as &,\\n    Math.div as /,\\n    Helpers.eq as ==,\\n    Helpers.gt as >,\\n    Helpers.gte as >=,\\n    Helpers.lt as <,\\n    Helpers.lte as <=,\\n    Helpers.or as |,\\n    Helpers.mod as %,\\n    Math.mul as *,\\n    Helpers.neq as !=,\\n    Helpers.not as ~,\\n    Helpers.sub as -,\\n    Helpers.xor as ^\\n} for UD60x18 global;\\n\",\"keccak256\":\"0xdd873b5124180d9b71498b3a7fe93b1c08c368bec741f7d5f8e17f78a0b70f31\",\"license\":\"MIT\"},\"contracts/NetworkRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { IConnext } from \\\"@connext/interfaces/core/IConnext.sol\\\";\\nimport { IXReceiver } from \\\"@connext/interfaces/core/IXReceiver.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { UD60x18 } from \\\"@prb/math/src/UD60x18.sol\\\";\\n\\nimport { IMemberRegistry, INetworkMemberRegistry, ISplitManager } from \\\"./interfaces/INetworkMemberRegistry.sol\\\";\\nimport { ISplitMain } from \\\"./interfaces/ISplitMain.sol\\\";\\nimport { DataTypes } from \\\"./libraries/DataTypes.sol\\\";\\nimport { PGContribCalculator } from \\\"./libraries/PGContribCalculator.sol\\\";\\nimport { MemberRegistry } from \\\"./registry/MemberRegistry.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**\\n * CUSTOM ERRORS\\n */\\n\\n/// @notice Connext address cannot be 0x0\\nerror NetworkRegistry__InvalidConnextAddress();\\n/// @notice Network Registry must have an owner or updater address assigned.\\nerror NetworkRegistry__NeitherOwnableNorReplicaUpdater();\\n/// @notice The function is callable through Connext only.\\nerror NetworkRegistry__ConnextOnly();\\n/// @notice The function is callable only by the owner or by the updater through Connext.\\nerror NetworkRegistry__OnlyOwnerOrUpdater();\\n/// @notice The function is callable only on a main registry by the owner.\\nerror NetworkRegistry__OnlyMainRegistry();\\n/// @notice The function is callable only on a replica by the owner or through a sync event.\\nerror NetworkRegistry__OnlyReplicaRegistry();\\n/// @notice msg value sent does not cover relayer fees\\nerror NetworkRegistry__ValueSentLessThanRelayerFees();\\n/// @notice No replica registered on network with ID `_chainId`\\nerror NetworkRegistry__NoReplicaOnNetwork(uint32 _chainId);\\n/// @notice Control of 0xSplit contract hasn't been transferred to the registry\\nerror Split_ControlNotHandedOver();\\n/// @notice Function array parameter size mismatch\\nerror NetWorkRegistry__ParamsSizeMismatch();\\n/// @notice Registry has invalid domainId or registry address values\\nerror NetworkRegistry__InvalidReplica();\\n/// @notice 0xSplit doesn't exists or is immutable\\nerror NetworkRegistry__InvalidOrImmutableSplit();\\n\\n/**\\n * @title A cross-chain network registry to distribute funds escrowed in 0xSplit based on member activity\\n * @author DAOHaus\\n * @notice Manage a cross-chain member registry to distribute funds hold in 0xSplit based on member activity\\n * @dev Uses Connext XApp architecture to manage main + multiple replica registries across different networks.\\n * Features and important things to consider:\\n * - There are syncing methods for adding/updating members, update registry activity & split funds across networks.\\n * - Funds are escrowed in a 0xSplit contract so in order to split funds the NetworkRegistry must be set\\n *   as the controller.\\n * - A NetworkRegistry contract can be setup either as the main registry (updater == address(0)) or as a replica.\\n * - A main NetworkRegistry should be owned by the community (i.e. Safe or a DAO)\\n * - A replica NetworkRegistry must set the `updater` role to the main registry address and be registered in the main\\n *   NetworkRegistry in order to get in sync.\\n * - A replica NetworkRegistry should not be owned by anyone so it can only be controlled by the main registry (updater)\\n *   however another Safe or DAO in the replica network can act as a trusted delegate in case of a halt of the Connext\\n *   bridge which could potentially froze the 0xSplit funds as the replica NetworkRegistry and thus its controller will\\n *   become inaccessible.\\n */\\ncontract NetworkRegistry is OwnableUpgradeable, IXReceiver, INetworkMemberRegistry, MemberRegistry {\\n    using PGContribCalculator for DataTypes.Members;\\n\\n    /// @notice Connext contract in the current domain\\n    IConnext public connext;\\n    /// @notice Connext domain ID where the updater contract is deployed\\n    /// @dev In case of a main registry, the updater domain must be set to 0\\n    /// @dev In case of a replica, the Connext Domain ID must match to the network where main registry lives\\n    uint32 public updaterDomain;\\n    /// @notice Address of the updater role that can update the registry through the Connext bridge\\n    /// @dev In case of a main registry, the updater role must not be assigned to anyone (address(0))\\n    /// @dev In case of a replica deployed on a L2, the updater role must be the main NetworkRegistry address\\n    address public updater;\\n    /// @notice replicas tied to the current registry\\n    /// @dev chainId => Registry\\n    // solhint-disable-next-line named-parameters-mapping\\n    mapping(uint32 => DataTypes.Registry) public replicaRegistry;\\n    /// @notice 0xSplit proxy contract\\n    /// @dev 0xSplitMain contract\\n    ISplitMain public splitMain;\\n    /// @notice 0xSplit contract where funds are hold\\n    /// @dev 0xSplitWallet contract\\n    address public split;\\n\\n    /**\\n     * @notice A modifier for authenticated calls coming from the Connext bridge.\\n     * @dev This is an important security consideration. If the target contract\\n     * function should be authenticated, it must check three things:\\n     *    1) The originating call comes from the expected origin domain.\\n     *    2) The originating call comes from the expected source contract.\\n     *    3) The call to this contract comes from Connext.\\n     * This is useful when sending cross-chain messages for syncing / interacting with\\n     * replica registries.\\n     * @param _originSender source contract or updater\\n     * @param _origin origin domain ID\\n     */\\n    modifier onlyConnext(address _originSender, uint32 _origin) {\\n        if (_origin != updaterDomain || _originSender != updater || _msgSender() != address(connext))\\n            revert NetworkRegistry__ConnextOnly();\\n        _;\\n    }\\n\\n    /**\\n     * @notice A modifier for methods that should be called either by the owner or by the updater through Connext\\n     * @dev (updater != address(0) && _msgSender() == address(this)) means a method is called\\n     * through the xReceive function\\n     */\\n    modifier onlyOwnerOrUpdater() {\\n        if (_msgSender() != owner() && (updater == address(0) || _msgSender() != address(this)))\\n            revert NetworkRegistry__OnlyOwnerOrUpdater();\\n        _;\\n    }\\n\\n    /**\\n     * @notice A modifier for methods that can be only called on a main registry\\n     */\\n    modifier onlyMain() {\\n        if (!isMainRegistry()) revert NetworkRegistry__OnlyMainRegistry();\\n        _;\\n    }\\n\\n    /**\\n     * @notice A modifier for methods that can be only called on replica registries\\n     * through a cross-chain sync call\\n     * @dev (updater != address(0) && _msgSender() == address(this)) means method is called\\n     * through the xReceive function\\n     */\\n    modifier onlyReplica() {\\n        if (updater == address(0) || _msgSender() != address(this)) revert NetworkRegistry__OnlyReplicaRegistry();\\n        _;\\n    }\\n\\n    /**\\n     * @notice A modifier to check that parameters for cross-chain messaging are correct\\n     * @dev there must be a replica NetworkRegistry for each chainId. This is checked later on {validNetworkRegistry}\\n     * Total relayer fees must match the tx msg.value\\n     * @param _chainIds list of chainIds for each network a sync message should be forward to\\n     * @param _relayerFees relayer fee to be paid for executing a sync message on each network\\n     */\\n    modifier validNetworkParams(uint32[] memory _chainIds, uint256[] memory _relayerFees) {\\n        // TODO: validate .length = total replicas\\n        if (_chainIds.length != _relayerFees.length) revert NetWorkRegistry__ParamsSizeMismatch();\\n        uint256 totalRelayerFees;\\n        for (uint256 i = 0; i < _chainIds.length; ) {\\n            totalRelayerFees += _relayerFees[i];\\n            unchecked {\\n                ++i; // gas optimization: very unlikely to overflow\\n            }\\n        }\\n        if (msg.value < totalRelayerFees) revert NetworkRegistry__ValueSentLessThanRelayerFees();\\n        _;\\n    }\\n\\n    /**\\n     * @notice A modifier to validates there's a replica NetworkRegistry setup for the `_chainId` chainId\\n     */\\n    modifier validNetworkRegistry(uint32 _chainId) {\\n        if (replicaRegistry[_chainId].registryAddress == address(0))\\n            revert NetworkRegistry__NoReplicaOnNetwork(_chainId);\\n        _;\\n    }\\n\\n    /**\\n     * EVENTS\\n     */\\n\\n    /**\\n     * @notice emitted after the Connext and Updater role settings are updated\\n     * @param _connext Connext contract address\\n     * @param _updaterDomain new Updater domain ID\\n     * @param _updater new Updater address\\n     */\\n    event NewUpdaterConfig(address _connext, uint32 _updaterDomain, address _updater);\\n    /**\\n     * @notice emitted when the 0xSplit contract is updated\\n     * @param _splitMain new 0xSplitMain contract address\\n     * @param _split new 0xSplitWallet contract address\\n     */\\n    event SplitUpdated(address _splitMain, address _split);\\n    /**\\n     * @notice emitted when a new replica NetworkRegistry is added/updated\\n     * @param _chainId network chainId where the replica lives\\n     * @param _registryAddress replica contract address\\n     * @param _domainId Connext domain ID that correspond to the network where the replica lives\\n     * @param _delegate Delegate address in case of a bridge tx failure (currently not in use)\\n     */\\n    event NetworkRegistryUpdated(\\n        uint32 indexed _chainId,\\n        address indexed _registryAddress,\\n        uint32 indexed _domainId,\\n        address _delegate\\n    );\\n    /**\\n     * @notice emitted when a new split distribution is registered on the 0xSplit contract\\n     * @param _split 0xSplit contract address\\n     * @param _splitHash hash of the split distribution parameters\\n     * @param _splitDistributorFee split fee set at reward for the address that executes the distribution\\n     */\\n    event SplitsDistributionUpdated(address _split, bytes32 _splitHash, uint32 _splitDistributorFee);\\n    /**\\n     * @notice emitted when a registry synchronization message is forwarded through the Connext bridge\\n     * @param _transferId Transfer ID returned by Connext to identify the executed xCall\\n     * @param _chainId chainId of the destination network\\n     * @param _action Function selector for the action to be executed on the replica\\n     * @param _registryAddress replica NetworkRegistry address\\n     */\\n    event SyncMessageSubmitted(\\n        bytes32 indexed _transferId,\\n        uint32 indexed _chainId,\\n        bytes4 indexed _action,\\n        address _registryAddress\\n    );\\n    /**\\n     * @notice emitted when a registry synchronization message is received and executed on a replica\\n     * @param _transferId transfer ID returned by Connext that identifies the received xCall message\\n     * @param _originDomain Connext domain ID that correspond to the network where the sync message was submitted\\n     * @param _action Function selector for the action executed on the replica\\n     * @param _success Whether or not the action execution succeeded\\n     * @param _originSender main NetworkRegistry address that forwarded the sync message through the Connext bridge\\n     */\\n    event SyncActionPerformed(\\n        bytes32 indexed _transferId,\\n        uint32 indexed _originDomain,\\n        bytes4 indexed _action,\\n        bool _success,\\n        address _originSender\\n    );\\n\\n    constructor() {\\n        // disable initialization on singleton contract\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Setup the Connext bridge, Updater role & 0xSplit contracts settings.\\n     * If deploying a main registry both {updaterDomain} & {_updater} should be set to zero.\\n     * @param _connext Connext contract address in the current network\\n     * @param _updaterDomain Connext domain ID where the updater lives (replica only)\\n     * @param _updater Account that will update a registry through the Connext bridge (replica only)\\n     * @param _splitMain 0xSplit proxy contract\\n     * @param _split 0xSplit contract address\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __NetworkRegistry_init_unchained(\\n        address _connext,\\n        uint32 _updaterDomain,\\n        address _updater,\\n        address _splitMain,\\n        address _split\\n    ) internal onlyInitializing {\\n        connext = IConnext(_connext);\\n        updaterDomain = _updaterDomain;\\n        updater = _updater;\\n        splitMain = ISplitMain(_splitMain);\\n        split = _split;\\n    }\\n\\n    /**\\n     * @dev Executes initializers from parent contracts\\n     * @param _connext Connext contract address in the current network\\n     * @param _updaterDomain Connext domain ID where the updater lives (replica only)\\n     * @param _updater Account that will update the registry through the Connext bridge (replica only)\\n     * @param _splitMain 0xSplit proxy contract\\n     * @param _split 0xSplit contract address\\n     * @param _owner Account address that will own the registry contract\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __NetworkRegistry_init(\\n        address _connext,\\n        uint32 _updaterDomain,\\n        address _updater,\\n        address _splitMain,\\n        address _split,\\n        address _owner\\n    ) internal onlyInitializing {\\n        if (_connext == address(0)) revert NetworkRegistry__InvalidConnextAddress();\\n        address registryOwner = _owner == address(0) ? _msgSender() : _owner;\\n        __Ownable_init(registryOwner);\\n        if (_owner == address(0)) {\\n            if (_updater == address(0)) revert NetworkRegistry__NeitherOwnableNorReplicaUpdater();\\n            renounceOwnership();\\n        }\\n        __NetworkRegistry_init_unchained(_connext, _updaterDomain, _updater, _splitMain, _split);\\n    }\\n\\n    /**\\n     * @notice Initializes the registry contract\\n     * @dev Initialization parameters are abi-encoded (i.e. through the NetworkRegistrySummoner contract)\\n     * @param _initializationParams abi-encoded parameters\\n     */\\n    function initialize(bytes memory _initializationParams) external virtual initializer {\\n        (\\n            address _connext,\\n            uint32 _updaterDomain,\\n            address _updater,\\n            address _splitMain,\\n            address _split,\\n            address _owner\\n        ) = abi.decode(_initializationParams, (address, uint32, address, address, address, address));\\n        __NetworkRegistry_init(_connext, _updaterDomain, _updater, _splitMain, _split, _owner);\\n    }\\n\\n    /**\\n     * @dev Forwards a message to a replica NetworkRegistry through the Connext bridge\\n     * {validNetworkRegistry} verifies {_chainId} has a valid replica in {networkRegistry}\\n     * @param _chainId Network chainId where the replica lives\\n     * @param _callData Function calldata to forward\\n     * @param _relayerFee Fee to be paid to the Connext relayer\\n     * @return transferId ID returned by Connext that identifies the submitted xCall message\\n     */\\n    function _executeXCall(\\n        uint32 _chainId,\\n        bytes memory _callData,\\n        uint256 _relayerFee\\n    ) internal validNetworkRegistry(_chainId) returns (bytes32 transferId) {\\n        transferId = connext.xcall{ value: _relayerFee }(\\n            replicaRegistry[_chainId].domainId, // _destination: domain ID of the destination chain\\n            replicaRegistry[_chainId].registryAddress, // _to: address of the target contract (Pong)\\n            address(0), // _asset: use address zero for 0-value transfers\\n            replicaRegistry[_chainId].delegate, // _delegate: address that can revert or forceLocal on destination\\n            0, // _amount: 0 because no funds are being transferred\\n            0, // _slippage: can be anything between 0-10000 because no funds are being transferred\\n            _callData // _callData: the encoded calldata to send\\n        );\\n    }\\n\\n    /**\\n     * @dev Executes a syncing action through Connext\\n     * @param _action Function selector of the action that will be executed on the replica\\n     * @param _callData Function calldata to forward\\n     * @param _chainId Network chainId where the replica lives\\n     * @param _relayerFee Fee to be paid to the Connext relayer\\n     */\\n    function _execSyncAction(bytes4 _action, bytes memory _callData, uint32 _chainId, uint256 _relayerFee) internal {\\n        bytes32 transferId = _executeXCall(_chainId, _callData, _relayerFee);\\n        emit SyncMessageSubmitted(transferId, _chainId, _action, replicaRegistry[_chainId].registryAddress);\\n    }\\n\\n    /**\\n     * @dev Send syncing messages to registered networkRegistry replicas\\n     * @param _action Function selector of the action that will be executed on the replica\\n     * @param _callData Function calldata to forward\\n     * @param _chainIds A list of network chainIds where valid replicas live\\n     * @param _relayerFees A list of fees to be paid to the Connext relayer per sync message forwarded\\n     */\\n    function _syncRegistries(\\n        bytes4 _action,\\n        bytes memory _callData,\\n        uint32[] memory _chainIds,\\n        uint256[] memory _relayerFees\\n    ) internal {\\n        for (uint256 i = 0; i < _chainIds.length; ) {\\n            _execSyncAction(_action, _callData, _chainIds[i], _relayerFees[i]);\\n            unchecked {\\n                ++i; // gas optimization: very unlikely to overflow\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds a new set of members to the registry\\n     * @dev Callable on a replica registry through the Connext bridge\\n     * @inheritdoc IMemberRegistry\\n     */\\n    function batchNewMembers(\\n        address[] memory _members,\\n        uint32[] memory _activityMultipliers,\\n        uint32[] memory _startDates\\n    ) external onlyReplica {\\n        _batchNewMembers(_members, _activityMultipliers, _startDates);\\n    }\\n\\n    /**\\n     * @notice Adds a new set of members to the registry and sync with replicas\\n     * @dev Callable by the main registry owner\\n     * @inheritdoc INetworkMemberRegistry\\n     */\\n    function syncBatchNewMembers(\\n        address[] memory _members,\\n        uint32[] memory _activityMultipliers,\\n        uint32[] memory _startDates,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable onlyOwner onlyMain validNetworkParams(_chainIds, _relayerFees) {\\n        _batchNewMembers(_members, _activityMultipliers, _startDates);\\n        bytes4 action = IMemberRegistry.batchNewMembers.selector;\\n        bytes memory callData = abi.encode(action, _members, _activityMultipliers, _startDates);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    /**\\n     * @notice Updates the activity multiplier for a set of existing members\\n     * @dev Callable on a replica registry through the Connext bridge\\n     * @inheritdoc IMemberRegistry\\n     */\\n    function batchUpdateMembersActivity(\\n        address[] memory _members,\\n        uint32[] memory _activityMultipliers\\n    ) external onlyReplica {\\n        _batchUpdateMembersActivity(_members, _activityMultipliers);\\n    }\\n\\n    /**\\n     * @notice Updates the activity multiplier for a set of existing members and sync with replicas\\n     * @dev Callable by the main registry owner\\n     * @inheritdoc INetworkMemberRegistry\\n     */\\n    function syncBatchUpdateMembersActivity(\\n        address[] memory _members,\\n        uint32[] memory _activityMultipliers,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable onlyOwner onlyMain validNetworkParams(_chainIds, _relayerFees) {\\n        _batchUpdateMembersActivity(_members, _activityMultipliers);\\n        bytes4 action = IMemberRegistry.batchUpdateMembersActivity.selector;\\n        bytes memory callData = abi.encode(action, _members, _activityMultipliers);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    /**\\n     * @notice Adds and/or updates a set of members on the registry\\n     * @dev Callable on a replica registry through the Connext bridge.\\n     * The syncNetworkMemberRegistry function ensures that array params will always\\n     * be the same length so there is no need for args validation\\n     * @inheritdoc IMemberRegistry\\n     */\\n    function addOrUpdateMembersBatch(\\n        address[] memory _members,\\n        uint32[] memory _activityMultipliers,\\n        uint32[] memory _startDates,\\n        uint32[] memory _secondsActive\\n    ) external onlyReplica {\\n        uint256 totalMembers = _members.length;\\n        for (uint256 i = 0; i < totalMembers; ) {\\n            uint256 memberId = _getMemberId(_members[i]);\\n            if (memberId == 0) {\\n                _setNewMember(_members[i], _activityMultipliers[i], _startDates[i]);\\n            } else {\\n                DataTypes.Member storage member = _getMemberById(memberId);\\n                // overrides member startDate and secondsActive in order to\\n                // get in sync with the main registry\\n                member.startDate = _startDates[i];\\n                member.secondsActive = _secondsActive[i];\\n                _updateMemberActivity(_members[i], _activityMultipliers[i]);\\n            }\\n            unchecked {\\n                ++i; // gas optimization: very unlikely to overflow\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Sync the state of a set of registry members across networks.\\n     * Useful whether you're looking to sync a new replica from scratch or a subset of members. For example\\n     * this function can be used to sync member's state in batches instead of doing a full registry sync\\n     * which could become pretty gas intensive with a growing list of members.\\n     * @dev Callable by the main registry owner\\n     * @inheritdoc INetworkMemberRegistry\\n     */\\n    function syncNetworkMemberRegistry(\\n        address[] memory _members,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable onlyOwner onlyMain validNetworkParams(_chainIds, _relayerFees) {\\n        (\\n            uint32[] memory _activityMultipliers,\\n            uint32[] memory _startDates,\\n            uint32[] memory _secondsActive\\n        ) = getMembersProperties(_members);\\n        bytes4 action = IMemberRegistry.addOrUpdateMembersBatch.selector;\\n        bytes memory callData = abi.encode(action, _members, _activityMultipliers, _startDates, _secondsActive);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    /**\\n     * @notice Updates seconds active since the last update epoch for every member in the registry\\n     * @inheritdoc IMemberRegistry\\n     */\\n    function updateSecondsActive() external onlyReplica {\\n        _updateSecondsActive();\\n    }\\n\\n    /**\\n     * @notice Updates activity for each member in the registry since the last update epoch and sync with replicas\\n     * @dev Callable by the main registry owner\\n     * @inheritdoc INetworkMemberRegistry\\n     */\\n    function syncUpdateSecondsActive(\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable onlyOwner onlyMain validNetworkParams(_chainIds, _relayerFees) {\\n        _updateSecondsActive();\\n        bytes4 action = IMemberRegistry.updateSecondsActive.selector;\\n        bytes memory callData = abi.encode(action);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    /**\\n     * @notice Updates the 0xSplit distribution based on member activity during the last epoch\\n     * @param _sortedList sorted list (ascending order) of members to be considered in the 0xSplit distribution\\n     * @param _splitDistributorFee split fee set as reward for the address that executes the distribution\\n     */\\n    function _updateSplits(address[] memory _sortedList, uint32 _splitDistributorFee) internal {\\n        (address[] memory _receivers, uint32[] memory _percentAllocations) = calculate(_sortedList);\\n        // run splits update\\n        splitMain.updateSplit(split, _receivers, _percentAllocations, _splitDistributorFee);\\n        bytes32 splitHash = keccak256(abi.encodePacked(_receivers, _percentAllocations, _splitDistributorFee));\\n        emit SplitsDistributionUpdated(split, splitHash, _splitDistributorFee);\\n    }\\n\\n    /**\\n     * @notice Updates the 0xSplit distribution based on member activity during the last epoch\\n     * Consider calling {updateSecondsActive} prior triggering a 0xSplit distribution update\\n     * @inheritdoc ISplitManager\\n     */\\n    function updateSplits(address[] memory _sortedList, uint32 _splitDistributorFee) external onlyReplica {\\n        _updateSplits(_sortedList, _splitDistributorFee);\\n    }\\n\\n    /**\\n     * @notice Updates the 0xSplit distribution on all networks based on reported member activity during the last epoch.\\n     * Consider calling {syncUpdateSecondsActive} prior or after applying a 0xSplit distribution update\\n     * @dev Callable by the main registry owner.\\n     * - Addresses in _sortedList must be in the member registry\\n     * @inheritdoc INetworkMemberRegistry\\n     */\\n    function syncUpdateSplits(\\n        address[] memory _sortedList,\\n        uint32 _splitDistributorFee,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable onlyOwner onlyMain validNetworkParams(_chainIds, _relayerFees) {\\n        _updateSplits(_sortedList, _splitDistributorFee);\\n        bytes4 action = ISplitManager.updateSplits.selector;\\n        bytes memory callData = abi.encode(action, _sortedList, _splitDistributorFee);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    /**\\n     * @notice Executes both {updateSecondsActive} to update registry member's activity and {updateSplits}\\n     * for split distribution\\n     * @inheritdoc ISplitManager\\n     */\\n    function updateAll(address[] memory _sortedList, uint32 _splitDistributorFee) external onlyReplica {\\n        _updateSecondsActive();\\n        _updateSplits(_sortedList, _splitDistributorFee);\\n    }\\n\\n    /**\\n     * @notice Executes both {updateSecondsActive} to update member's activity and {updateSplits}\\n     * for split distribution across all networks\\n     * @dev Callable by the main registry owner\\n     * - Addresses in _sortedList must be in the member registry\\n     * @inheritdoc INetworkMemberRegistry\\n     */\\n    function syncUpdateAll(\\n        address[] memory _sortedList,\\n        uint32 _splitDistributorFee,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable onlyOwner onlyMain validNetworkParams(_chainIds, _relayerFees) {\\n        _updateSecondsActive();\\n        _updateSplits(_sortedList, _splitDistributorFee);\\n        bytes4 action = ISplitManager.updateAll.selector;\\n        bytes memory callData = abi.encode(action, _sortedList, _splitDistributorFee);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    /**\\n     * @notice Calculate 0xSplit distribution allocations\\n     * @dev It uses the PGContribCalculator library to calculate member allocations\\n     * @inheritdoc ISplitManager\\n     */\\n    function calculate(\\n        address[] memory _sortedList\\n    ) public view virtual returns (address[] memory _receivers, uint32[] memory _percentAllocations) {\\n        (_receivers, _percentAllocations) = members.calculate(_sortedList);\\n    }\\n\\n    /**\\n     * @notice Calculates a member individual contribution\\n     * @dev It uses the PGContribCalculator library\\n     * @inheritdoc ISplitManager\\n     */\\n    function calculateContributionOf(address _memberAddress) external view returns (uint256) {\\n        DataTypes.Member memory member = getMember(_memberAddress);\\n        return members.calculateContributionOf(member);\\n    }\\n\\n    /**\\n     * @notice Calculates the sum of all member contributions\\n     * @dev omit members with activityMultiplier == 0\\n     * @inheritdoc ISplitManager\\n     */\\n    function calculateTotalContributions() external view returns (uint256 total) {\\n        // TODO: how to avoid DoS due to growing list of members\\n        uint256 totalRegistryMembers = totalMembers();\\n        for (uint256 i = 0; i < totalRegistryMembers; ) {\\n            DataTypes.Member memory member = _getMemberByIndex(i);\\n            if (member.activityMultiplier > 0) {\\n                total += members.calculateContributionOf(member);\\n            }\\n            unchecked {\\n                ++i; // gas optimization: very unlikely to overflow\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns whether or not a registry has been setup as a main registry\\n     * @inheritdoc INetworkMemberRegistry\\n     */\\n    function isMainRegistry() public view returns (bool) {\\n        return updater == address(0) && updaterDomain == 0;\\n    }\\n\\n    /**\\n     * @notice Adds a replica NetworkRegistry that should get in sync with a main registry\\n     * @dev Callable by main registry owner\\n     * @inheritdoc INetworkMemberRegistry\\n     */\\n    function updateNetworkRegistry(\\n        uint32 _chainId,\\n        DataTypes.Registry memory _newRegistry\\n    ) external onlyOwner onlyMain {\\n        // TODO: add active replica counter\\n        if (replicaRegistry[_chainId].registryAddress != address(0) && _newRegistry.registryAddress == address(0)) {\\n            delete replicaRegistry[_chainId];\\n        } else {\\n            if (_newRegistry.domainId == 0 || _newRegistry.registryAddress == address(0))\\n                revert NetworkRegistry__InvalidReplica();\\n            replicaRegistry[_chainId] = _newRegistry;\\n        }\\n        emit NetworkRegistryUpdated(\\n            _chainId,\\n            _newRegistry.registryAddress,\\n            _newRegistry.domainId,\\n            _newRegistry.delegate\\n        );\\n    }\\n\\n    /**\\n     * @notice Set Connext and Updater config parameters\\n     * @dev Callable on both main and replica registries\\n     * @inheritdoc INetworkMemberRegistry\\n     */\\n    function setUpdaterConfig(address _connext, uint32 _updaterDomain, address _updater) external onlyOwnerOrUpdater {\\n        if (_connext == address(0)) revert NetworkRegistry__InvalidConnextAddress();\\n        connext = IConnext(_connext);\\n        updaterDomain = _updaterDomain;\\n        updater = _updater;\\n        emit NewUpdaterConfig(_connext, _updaterDomain, _updater);\\n    }\\n\\n    /**\\n     * @notice Set Connext & Updater config settings for existing NetworkRegistry replicas via sync message\\n     * @dev Callable by main registry owner\\n     * @inheritdoc INetworkMemberRegistry\\n     */\\n    function setNetworkUpdaterConfig(\\n        uint32[] memory _chainIds,\\n        address[] memory _connextAddrs,\\n        uint32[] memory _updaterDomains,\\n        address[] memory _updaterAddrs,\\n        uint256[] memory _relayerFees\\n    ) external payable onlyOwner onlyMain validNetworkParams(_chainIds, _relayerFees) {\\n        uint256 totalParams = _chainIds.length;\\n        if (\\n            _connextAddrs.length != totalParams ||\\n            _updaterDomains.length != totalParams ||\\n            _updaterAddrs.length != totalParams\\n        ) revert NetWorkRegistry__ParamsSizeMismatch();\\n        bytes4 action = INetworkMemberRegistry.setUpdaterConfig.selector;\\n        for (uint256 i = 0; i < totalParams; ) {\\n            bytes memory callData = abi.encode(action, _connextAddrs[i], _updaterDomains[i], _updaterAddrs[i]);\\n            _execSyncAction(action, callData, _chainIds[i], _relayerFees[i]);\\n            unchecked {\\n                ++i; // gas optimization: very unlikely to overflow\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the the 0xSplitMain proxy and 0xSplit contract addresses\\n     * @dev Callable on both main and replica registries\\n     * @inheritdoc ISplitManager\\n     */\\n    function setSplit(address _splitMain, address _split) external onlyOwnerOrUpdater {\\n        splitMain = ISplitMain(_splitMain);\\n        address currentController = splitMain.getController(_split);\\n        if (currentController == address(0)) revert NetworkRegistry__InvalidOrImmutableSplit();\\n        address newController = splitMain.getNewPotentialController(_split);\\n        if (currentController != address(this) && newController != address(this)) revert Split_ControlNotHandedOver();\\n        split = _split;\\n        emit SplitUpdated(_splitMain, split);\\n        acceptSplitControl();\\n    }\\n\\n    /**\\n     * @notice Updates the 0xSplit contracts on existing NetworkRegistry replicas via sync message\\n     * @dev Callable by main registry owner\\n     * @inheritdoc INetworkMemberRegistry\\n     */\\n    function updateNetworkSplit(\\n        uint32[] memory _chainIds,\\n        address[] memory _splitsMain,\\n        address[] memory _splits,\\n        uint256[] memory _relayerFees\\n    ) external payable onlyOwner onlyMain validNetworkParams(_chainIds, _relayerFees) {\\n        uint256 totalParams = _chainIds.length;\\n        if (_splitsMain.length != totalParams || _splits.length != totalParams)\\n            revert NetWorkRegistry__ParamsSizeMismatch();\\n        bytes4 action = ISplitManager.setSplit.selector;\\n        for (uint256 i = 0; i < totalParams; ) {\\n            bytes memory callData = abi.encode(action, _splitsMain[i], _splits[i]);\\n            _execSyncAction(action, callData, _chainIds[i], _relayerFees[i]);\\n            unchecked {\\n                ++i; // gas optimization: very unlikely to overflow\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer control of the current 0xSplit contract to `_newController`\\n     * @dev Callable on both main and replica registries\\n     * @inheritdoc ISplitManager\\n     */\\n    function transferSplitControl(address _newController) external onlyOwnerOrUpdater {\\n        splitMain.transferControl(split, _newController);\\n    }\\n\\n    /**\\n     * @notice Submit sync messages to replicas in order to transfer control\\n     * of the current 0xSplit contract to `_newController`\\n     * @dev Callable by main registry owner\\n     * @inheritdoc INetworkMemberRegistry\\n     */\\n    function transferNetworkSplitControl(\\n        uint32[] memory _chainIds,\\n        address[] memory _newControllers,\\n        uint256[] memory _relayerFees\\n    ) external payable onlyOwner onlyMain validNetworkParams(_chainIds, _relayerFees) {\\n        uint256 totalParams = _chainIds.length;\\n        if (_newControllers.length != totalParams) revert NetWorkRegistry__ParamsSizeMismatch();\\n        bytes4 action = ISplitManager.transferSplitControl.selector;\\n        for (uint256 i = 0; i < totalParams; ) {\\n            bytes memory callData = abi.encode(action, _newControllers[i]);\\n            _execSyncAction(action, callData, _chainIds[i], _relayerFees[i]);\\n            unchecked {\\n                ++i; // gas optimization: very unlikely to overflow\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Accepts control of the current 0xSplit contract\\n     * @dev Callable on both main and replica registries\\n     * @inheritdoc ISplitManager\\n     */\\n    function acceptSplitControl() public onlyOwnerOrUpdater {\\n        splitMain.acceptControl(split);\\n    }\\n\\n    /**\\n     * @notice Submit sync messages to replicas in order to accept control of the current 0xSplit contract\\n     * @dev Callable by main registry owner\\n     * @inheritdoc INetworkMemberRegistry\\n     */\\n    function acceptNetworkSplitControl(\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable onlyOwner onlyMain validNetworkParams(_chainIds, _relayerFees) {\\n        bytes4 action = ISplitManager.acceptSplitControl.selector;\\n        bytes memory callData = abi.encode(action);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    /**\\n     * @notice Cancel controller transfer of the current 0xSplit contract\\n     * @dev Callable on both main and replica registries\\n     * @inheritdoc ISplitManager\\n     */\\n    function cancelSplitControlTransfer() external onlyOwnerOrUpdater {\\n        splitMain.cancelControlTransfer(split);\\n    }\\n\\n    /**\\n     * @notice Submit sync messages to replicas in order to cancel a transfer control request\\n     * of the current 0xSplit contract\\n     * @dev Callable by main registry owner\\n     * @inheritdoc INetworkMemberRegistry\\n     */\\n    function cancelNetworkSplitControlTransfer(\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable onlyOwner onlyMain validNetworkParams(_chainIds, _relayerFees) {\\n        bytes4 action = ISplitManager.cancelSplitControlTransfer.selector;\\n        bytes memory callData = abi.encode(action);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    /**\\n     * @notice Accepts incoming sync messages from a main registry via Connext authenticated calls\\n     * @dev Forwarded messages can only be executed if the function selector is listed as valid action\\n     * @param _transferId transfer ID set by Connext to identify the incoming xCall message\\n     * @param _originSender main registry address that forwarded the xCall message through the Connext bridge\\n     * @param _origin Connext domain ID that correspond to the network where the the xCall message was submitted\\n     * @param _incomingCalldata message calldata to be used to invoke the required syncing action\\n     * @return any data returned by the action call\\n     */\\n    function xReceive(\\n        bytes32 _transferId,\\n        uint256 /* _amount */,\\n        address /* _asset */,\\n        address _originSender,\\n        uint32 _origin,\\n        bytes memory _incomingCalldata\\n    ) external onlyConnext(_originSender, _origin) returns (bytes memory) {\\n        bytes4 action = abi.decode(_incomingCalldata, (bytes4));\\n        bytes memory callData;\\n        if (action == IMemberRegistry.batchNewMembers.selector) {\\n            (, address[] memory _members, uint32[] memory _activityMultipliers, uint32[] memory _startDates) = abi\\n                .decode(_incomingCalldata, (bytes4, address[], uint32[], uint32[]));\\n            callData = abi.encodeWithSelector(action, _members, _activityMultipliers, _startDates);\\n        } else if (action == IMemberRegistry.batchUpdateMembersActivity.selector) {\\n            (, address[] memory _members, uint32[] memory _activityMultipliers) = abi.decode(\\n                _incomingCalldata,\\n                (bytes4, address[], uint32[])\\n            );\\n            callData = abi.encodeWithSelector(action, _members, _activityMultipliers);\\n        } else if (action == IMemberRegistry.addOrUpdateMembersBatch.selector) {\\n            (\\n                ,\\n                address[] memory _members,\\n                uint32[] memory _activityMultipliers,\\n                uint32[] memory _startDates,\\n                uint32[] memory _secondsActive\\n            ) = abi.decode(_incomingCalldata, (bytes4, address[], uint32[], uint32[], uint32[]));\\n            callData = abi.encodeWithSelector(action, _members, _activityMultipliers, _startDates, _secondsActive);\\n        } else if (action == IMemberRegistry.updateSecondsActive.selector) {\\n            callData = abi.encodeWithSelector(action);\\n        } else if (action == ISplitManager.updateSplits.selector) {\\n            (, address[] memory _sortedList, uint32 _splitDistributorFee) = abi.decode(\\n                _incomingCalldata,\\n                (bytes4, address[], uint32)\\n            );\\n            callData = abi.encodeWithSelector(action, _sortedList, _splitDistributorFee);\\n        } else if (action == ISplitManager.updateAll.selector) {\\n            (, address[] memory _sortedList, uint32 _splitDistributorFee) = abi.decode(\\n                _incomingCalldata,\\n                (bytes4, address[], uint32)\\n            );\\n            callData = abi.encodeWithSelector(action, _sortedList, _splitDistributorFee);\\n        } else if (action == INetworkMemberRegistry.setUpdaterConfig.selector) {\\n            (, address _connext, uint32 _updaterDomain, address _updater) = abi.decode(\\n                _incomingCalldata,\\n                (bytes4, address, uint32, address)\\n            );\\n            callData = abi.encodeWithSelector(action, _connext, _updaterDomain, _updater);\\n        } else if (action == ISplitManager.setSplit.selector) {\\n            (, address _splitMain, address _split) = abi.decode(_incomingCalldata, (bytes4, address, address));\\n            callData = abi.encodeWithSelector(action, _splitMain, _split);\\n        } else if (action == ISplitManager.transferSplitControl.selector) {\\n            (, address _newController) = abi.decode(_incomingCalldata, (bytes4, address));\\n            callData = abi.encodeWithSelector(action, _newController);\\n        } else if (action == ISplitManager.acceptSplitControl.selector) {\\n            callData = abi.encodeWithSelector(action);\\n        } else if (action == ISplitManager.cancelSplitControlTransfer.selector) {\\n            callData = abi.encodeWithSelector(action);\\n        }\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory data) = address(this).call(callData);\\n        emit SyncActionPerformed(_transferId, _origin, action, success, _originSender);\\n        return data;\\n    }\\n}\\n\",\"keccak256\":\"0x3cd17766e21ad7ed7d3ac4e9c186b89b8f66e42ac72a67c12f768dadc84d1e98\",\"license\":\"MIT\"},\"contracts/NetworkRegistryShaman.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { IBaal } from \\\"@daohaus/baal-contracts/contracts/interfaces/IBaal.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { NetworkRegistry } from \\\"./NetworkRegistry.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nerror NetworkRegistryShaman__NotManagerShaman();\\nerror NetworkRegistryShaman__InvalidBaalAddress();\\n\\n/**\\n * @title A cross-chain network registry and Baal shaman module to distribute funds escrowed in 0xSplit based\\n * on member activity.\\n * @author DAOHaus\\n * @notice Manage a cross-chain member registry that mints/burn Baal DAO shares and distribute funds\\n * hold in 0xSplit based on member activity.\\n * @dev Setup contract as a MolochV3 manager shaman module to mint/burn shares based on member activity.\\n * Features and important things to consider:\\n * - Inherits all the features of NetworkRegistry contract.\\n * - It can be setup as a manager Shaman module on a MolochV3 DAO (codename Baal) to mint/burn shares when\\n *   adding/updating members without the need of sending a separate/additional actions within a multicall proposal.\\n * - You can setup the amount of {sharesToMint} to new members being added to the registry.\\n * - You can enable/disable burning shares to inactive members (activityMultiplier == 0).\\n * - As the DAO usually lives only on the main network, it is recommended to deploy a NetworkRegistryShaman\\n *   as the main registry while replicas being of type NetworkRegistry.\\n */\\ncontract NetworkRegistryShaman is NetworkRegistry {\\n    /// @notice MolochV3 DAO address\\n    /// @dev Baal address\\n    IBaal public baal;\\n    /// @notice The amount of shares to mint to new members\\n    uint256 public sharesToMint;\\n    /// @notice Wether or not to burn shares if a member activityMultiplier is set to zero\\n    bool public burnShares;\\n\\n    constructor() {\\n        // disable initialization on singleton contract\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice A modifier to check if the registry has been setup as a manager shaman module\\n     */\\n    modifier isManagerShaman() {\\n        if (!baal.isManager(address(this))) revert NetworkRegistryShaman__NotManagerShaman();\\n        _;\\n    }\\n\\n    /**\\n     * @notice emitted when the shaman config is updated\\n     * @param _sharesToMint new amount of shares to mint to registered members\\n     * @param _burnShares wether or not to burn shares to inactive members\\n     */\\n    event ShamanConfigUpdated(uint256 _sharesToMint, bool _burnShares);\\n\\n    /**\\n     * @notice Initializes the registry shaman contract\\n     * @dev Initialization parameters are abi-encoded (i.e. through the NetworkRegistrySummoner contract)\\n     * @param _initializationParams abi-encoded parameters\\n     */\\n    function initialize(bytes memory _initializationParams) external override initializer {\\n        (\\n            address _connext,\\n            uint32 _updaterDomain,\\n            address _updater,\\n            address _splitMain,\\n            address _split,\\n            address _baal,\\n            uint256 _sharesToMint,\\n            bool _burnShares\\n        ) = abi.decode(_initializationParams, (address, uint32, address, address, address, address, uint256, bool));\\n        if (_baal == address(0)) revert NetworkRegistryShaman__InvalidBaalAddress();\\n        baal = IBaal(_baal);\\n        __NetworkRegistry_init(\\n            _connext,\\n            _updaterDomain,\\n            _updater,\\n            _splitMain,\\n            _split,\\n            baal.avatar() // NOTICE: Baal avatar is set as the registry owner\\n        );\\n        sharesToMint = _sharesToMint;\\n        burnShares = _burnShares;\\n    }\\n\\n    /**\\n     * @notice Updates the shaman config parameters\\n     * @dev Callable by the registry owner\\n     * @param _sharesToMint Amount of shares to mint to new members\\n     * @param _burnShares Whether or not to burn shares if a member activityMultiplier is set to zero\\n     */\\n    function setShamanConfig(uint256 _sharesToMint, bool _burnShares) external onlyOwner {\\n        burnShares = _burnShares;\\n        sharesToMint = _sharesToMint;\\n        emit ShamanConfigUpdated(sharesToMint, burnShares);\\n    }\\n\\n    /**\\n     * @notice Adds a new member to the registry and mints shares in the DAO\\n     * @dev {isManagerShaman} verifies the registry has a manager role in the DAO\\n     * @param _member new member address\\n     * @param _activityMultiplier member activity multiplier\\n     * @param _startDate timestamp (in seconds) when the member got active\\n     */\\n    function _setNewMember(\\n        address _member,\\n        uint32 _activityMultiplier,\\n        uint32 _startDate\\n    ) internal override isManagerShaman {\\n        super._setNewMember(_member, _activityMultiplier, _startDate);\\n        address[] memory _receivers = new address[](1);\\n        _receivers[0] = _member;\\n        uint256[] memory _amounts = new uint256[](1);\\n        _amounts[0] = sharesToMint;\\n        baal.mintShares(_receivers, _amounts);\\n    }\\n\\n    /**\\n     * @notice Updates the activity multiplier for an existing member and mint/burn DAO shares if applicable\\n     * @dev {isManagerShaman} verifies the registry has a manager role in the DAO\\n     * @param _member member address\\n     * @param _activityMultiplier member new activity multiplier\\n     */\\n    function _updateMemberActivity(address _member, uint32 _activityMultiplier) internal override isManagerShaman {\\n        super._updateMemberActivity(_member, _activityMultiplier);\\n        address[] memory _to = new address[](1);\\n        _to[0] = _member;\\n        uint256[] memory _amounts = new uint256[](1);\\n        _amounts[0] = sharesToMint;\\n        if (_activityMultiplier > 0 && IERC20(baal.sharesToken()).balanceOf(_member) == 0) {\\n            baal.mintShares(_to, _amounts);\\n        } else if (_activityMultiplier == 0 && burnShares) {\\n            baal.burnShares(_to, _amounts);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf784b7d7e736f2e773a79d26d9851654873a2f4251e3440e87cf79f44565acd9\",\"license\":\"MIT\"},\"contracts/interfaces/IMemberRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { DataTypes } from \\\"../libraries/DataTypes.sol\\\";\\n\\n/**\\n * @title An on-chain member activity registry\\n * @author DAOHaus\\n * @notice Interface to manage an on-chain member activity registry\\n * @dev Includes minimal interfaces to implement a registry to track members + activity time\\n */\\ninterface IMemberRegistry {\\n    /**\\n     * @notice Adds a new set of members to the registry\\n     * @dev Make sure array parameters are of the same length\\n     * Activity multiplier could be set within 0-100 (%) range (i.e. 50 -> part-time 100 -> full-time)\\n     * but it's up to the implementer to establish the multiplier boundaries\\n     * @param _members A list of member addresses to be added to the registry\\n     * @param _activityMultipliers Activity multipliers for each new member\\n     * @param _startDates A list of dates when each member got active\\n     */\\n    function batchNewMembers(\\n        address[] memory _members,\\n        uint32[] memory _activityMultipliers,\\n        uint32[] memory _startDates\\n    ) external;\\n\\n    /**\\n     * @notice Updates the activity multiplier for a set of existing members\\n     * @dev Make sure members are in the registry\\n     * Activity multiplier could be set within 0-100 (%) range (i.e. 50 -> part-time 100 -> full-time)\\n     * but it's up to the implementer to establish the multiplier boundaries\\n     * @param _members A list of existing members\\n     * @param _activityMultipliers New activity multipliers for each member\\n     */\\n    function batchUpdateMembersActivity(address[] memory _members, uint32[] memory _activityMultipliers) external;\\n\\n    /**\\n     * @notice Adds and/or updates a set of members on the registry\\n     * @dev Make sure array parameters are of the same length\\n     * Activity multiplier could be set within 0-100 (%) range (i.e. 50 -> part-time 100 -> full-time)\\n     * but it's up to the implementer to establish the multiplier boundaries\\n     * @param _members A list of member addresses to be added to the registry\\n     * @param _activityMultipliers Activity multipliers for each new member\\n     * @param _startDates A list of dates when each member got active\\n     * @param _secondsActive A list of members reported activity in seconds\\n     */\\n    function addOrUpdateMembersBatch(\\n        address[] memory _members,\\n        uint32[] memory _activityMultipliers,\\n        uint32[] memory _startDates,\\n        uint32[] memory _secondsActive\\n    ) external;\\n\\n    /**\\n     * @notice Updates seconds active since the last update epoch for every member in the registry\\n     * @dev It should manage a lastActivityUpdate state variable to update activity based on last update epoch.\\n     * For new members it should update seconds based each member startDate.\\n     */\\n    function updateSecondsActive() external;\\n\\n    /**\\n     * @notice Fetch a member's metadata\\n     * @dev It throws an exception if member is not in the registry\\n     * @param _memberAddress member address\\n     * @return member metadata\\n     */\\n    function getMember(address _memberAddress) external view returns (DataTypes.Member memory member);\\n\\n    /**\\n     * @notice Returns the total No of members in the registry\\n     * @return total members in the registry\\n     */\\n    function totalMembers() external view returns (uint256);\\n\\n    /**\\n     * @notice Fetch members metadata as separate property arrays\\n     * @dev Function should revert if any address in _memberAddrs is not registered\\n     * @param _members list of registered member addresses\\n     * @return list of member activity multipliers\\n     * @return list of member start dates\\n     * @return list of member seconds active\\n     */\\n    function getMembersProperties(\\n        address[] memory _members\\n    ) external view returns (uint32[] memory, uint32[] memory, uint32[] memory);\\n\\n    /**\\n     * @notice Fetch all members from the registry\\n     * @dev In case of a growing number of members in the registry\\n     * it is recommended to use {getMembersPaginated}\\n     * @return an array of Members in the registry\\n     */\\n    function getMembers() external view returns (DataTypes.Member[] memory);\\n\\n    /**\\n     * @notice Fetch a subset of members from the registry\\n     * @param _fromIndex starting index in Member's db\\n     * @param _toIndex ending index in Member's db\\n     * @return an array of Members in the registry\\n     */\\n    function getMembersPaginated(\\n        uint256 _fromIndex,\\n        uint256 _toIndex\\n    ) external view returns (DataTypes.Member[] memory);\\n}\\n\",\"keccak256\":\"0x759edea734fe57e54b828d3fc9af76b66eb18010e04ef90d9222aefd20ea0120\",\"license\":\"MIT\"},\"contracts/interfaces/INetworkMemberRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { IMemberRegistry } from \\\"./IMemberRegistry.sol\\\";\\nimport { ISplitManager } from \\\"./ISplitManager.sol\\\";\\nimport { DataTypes } from \\\"../libraries/DataTypes.sol\\\";\\n\\n/**\\n * @title A cross-chain member activity registry in sync across multiple networks\\n * @author DAOHaus\\n * @notice Interface to manage a cross-chain member activity registry\\n * @dev Includes minimal interfaces to implement a registry to keep track of members and their\\n * activity time both in the home chain as well as in any replicas living in other networks.\\n * It should also be able to use member activity to distribute funds escrowed on a 0xSplit contract.\\n */\\ninterface INetworkMemberRegistry is IMemberRegistry, ISplitManager {\\n    /**\\n     * @notice Initializes the registry contract\\n     * @dev Initialization parameters are abi-encoded (i.e. through a summoner contract).\\n     * It should call any initializer methods from other parent contracts\\n     * @param _initializationParams abi-encoded parameters\\n     */\\n    function initialize(bytes memory _initializationParams) external;\\n\\n    /**\\n     * @notice Set Connext and Updater config parameters\\n     * @dev Zero values in updater settings will setup the contract as a main registry\\n     * @param _connext Connext contract address\\n     * @param _updaterDomain Connext domain ID where the Updater lives\\n     * @param _updater Main NetworkRegistry address that will update the replica registry using the Connext bridge\\n     */\\n    function setUpdaterConfig(address _connext, uint32 _updaterDomain, address _updater) external;\\n\\n    /**\\n     * @notice Adds a replica NetworkRegistry that should get in sync with a main registry\\n     * @dev Zero values on {_newRegistry} should remove/disable an existing replica\\n     * @param _chainId Network chainId where the replica registry lives\\n     * @param _newRegistry Connext domain ID and replica NetworkRegistry address\\n     */\\n    function updateNetworkRegistry(uint32 _chainId, DataTypes.Registry memory _newRegistry) external;\\n\\n    /**\\n     * @notice Returns whether or not a registry has been setup as a main registry\\n     * @dev Verifies if updater params are set to zero\\n     */\\n    function isMainRegistry() external view returns (bool);\\n\\n    /**\\n     * @notice Adds a new set of members to the registry and sync with replicas\\n     * @dev It should forward messages to stay in sync with provided replicas,\\n     * Must be used only if registries are in sync.\\n     * {msg.value} must match the total fees required to pay the Connext relayer to execute\\n     * forwarded messages in the destination.\\n     * @param _members A list of member addresses to be added to the registry\\n     * @param _activityMultipliers A list of activity multipliers for each new member\\n     * @param _startDates A list of dates when each member got active\\n     * @param _chainIds a list of network chainIds where valid replicas live\\n     * @param _relayerFees a list of fees to be paid to the Connext relayer per sync message forwarded\\n     */\\n    function syncBatchNewMembers(\\n        address[] memory _members,\\n        uint32[] memory _activityMultipliers,\\n        uint32[] memory _startDates,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable;\\n\\n    /**\\n     * @notice Updates the activity multiplier for a set of existing members and sync with replicas\\n     * @dev It should forward messages to stay in sync with provided replicas.\\n     * Must be used only if registries are in sync.\\n     * {msg.value} must match the total fees required to pay the Connext relayer to execute\\n     * forwarded messages in the destination.\\n     * @param _members A list of existing members\\n     * @param _activityMultipliers A list of new activity multipliers for each member\\n     * @param _chainIds a list of network chainIds where valid replicas live\\n     * @param _relayerFees a list of fees to be paid to the Connext relayer per sync message forwarded\\n     */\\n    function syncBatchUpdateMembersActivity(\\n        address[] memory _members,\\n        uint32[] calldata _activityMultipliers,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable;\\n\\n    /**\\n     * @notice Sync the state of a set of registry members across networks.\\n     * Useful whether you're looking to sync a new replica from scratch or a subset of members. For example\\n     * this function can be used to sync member's state in batches instead of doing a full registry sync\\n     * which could become pretty gas intensive with a growing list of members.\\n     * @dev It should forward messages to stay in sync with provided replicas.\\n     * Be aware of the size of member list as this function can be costly or just not fit into a block gas limit\\n     * {msg.value} must match the total fees required to pay the Connext relayer to execute\\n     * forwarded messages in the destination.\\n     * @param _members list of member addresses you look to sync\\n     * @param _chainIds a list of network chainIds where valid replicas live\\n     * @param _relayerFees a list of fees to be paid to the Connext relayer per sync message forwarded\\n     */\\n    function syncNetworkMemberRegistry(\\n        address[] memory _members,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable;\\n\\n    /**\\n     * @notice Updates activity for each member in the registry since the last update epoch and sync with replicas\\n     * @dev It should forward messages to stay in sync with provided replicas.\\n     * {msg.value} must match the total fees required to pay the Connext relayer to execute\\n     * forwarded messages in the destination.\\n     * @param _chainIds a list of network chainIds where valid replicas live\\n     * @param _relayerFees a list of fees to be paid to the Connext relayer per sync message forwarded\\n     */\\n    function syncUpdateSecondsActive(uint32[] calldata _chainIds, uint256[] calldata _relayerFees) external payable;\\n\\n    /**\\n     * @notice Updates the 0xSplit distribution on all networks based on reported member activity during the last epoch.\\n     * Consider calling {syncUpdateSecondsActive} prior or after applying a 0xSplit distribution update.\\n     * @dev It should forward messages to stay in sync with provided replicas.\\n     * - The registry must hold the controller role of the 0xSplit contract.\\n     * - Addresses in _sortedList must be in the member registry.\\n     * - {msg.value} must match the total fees required to pay the Connext relayer to execute\\n     * forwarded messages in the destination.\\n     * @param _sortedList sorted list (ascending order) of members to be considered in the 0xSplit distribution\\n     * @param _splitDistributorFee split fee set as reward for the address that executes the distribution\\n     * @param _chainIds a list of network chainIds where valid replicas live\\n     * @param _relayerFees a list of fees to be paid to the Connext relayer per sync message forwarded\\n     */\\n    function syncUpdateSplits(\\n        address[] memory _sortedList,\\n        uint32 _splitDistributorFee,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable;\\n\\n    /**\\n     * @notice Executes both {updateSecondsActive} to update member's activity and {updateSplits}\\n     * for split distribution across all networks\\n     * @dev It should forward messages to stay in sync with provided replicas.\\n     * - The registry must hold the controller role of the 0xSplit contract.\\n     * - Addresses in _sortedList must be in the member registry.\\n     * - {msg.value} must match the total fees required to pay the Connext relayer to execute\\n     * forwarded messages in the destination.\\n     * @param _sortedList sorted list (ascending order) of members to be considered in the 0xSplit distribution\\n     * @param _splitDistributorFee split fee set as reward for the address that executes the distribution\\n     * @param _chainIds a list of network chainIds where valid replicas live\\n     * @param _relayerFees a list of fees to be paid to the Connext relayer per sync message forwarded\\n     */\\n    function syncUpdateAll(\\n        address[] memory _sortedList,\\n        uint32 _splitDistributorFee,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable;\\n\\n    /**\\n     * @notice Set Connext & Updater config settings for existing NetworkRegistry replicas via sync message\\n     * @dev It should forward messages to stay in sync with provided replicas.\\n     * - {msg.value} must match the total fees required to pay the Connext relayer to execute\\n     * forwarded messages in the destination.\\n     * @param _chainIds a list of network chainIds where valid replicas live\\n     * @param _connextAddrs a list Connext bridge addresses to be used on each replica\\n     * @param _updaterDomains a list of Connext updater domain IDs to be used on each replica\\n     * @param _updaterAddrs a list of updater role addresses to be used on each replica\\n     * @param _relayerFees a list of fees to be paid to the Connext relayer per sync message forwarded\\n     */\\n    function setNetworkUpdaterConfig(\\n        uint32[] memory _chainIds,\\n        address[] memory _connextAddrs,\\n        uint32[] memory _updaterDomains,\\n        address[] memory _updaterAddrs,\\n        uint256[] memory _relayerFees\\n    ) external payable;\\n\\n    /**\\n     * @notice Updates the 0xSplit contracts on existing NetworkRegistry replicas via sync message\\n     * @dev It should forward messages to stay in sync with provided replicas.\\n     * - {msg.value} must match the total fees required to pay the Connext relayer to execute\\n     * forwarded messages in the destination.\\n     * @param _chainIds a list of network chainIds where valid replicas live\\n     * @param _splitsMain a list of 0xSplit proxy addresses for each replica\\n     * @param _splits a list of 0xSplit addresses for each replica\\n     * @param _relayerFees a list of fees to be paid to the Connext relayer per sync message forwarded\\n     */\\n    function updateNetworkSplit(\\n        uint32[] memory _chainIds,\\n        address[] memory _splitsMain,\\n        address[] memory _splits,\\n        uint256[] memory _relayerFees\\n    ) external payable;\\n\\n    /**\\n     * @notice Submit sync messages to replicas in order to transfer control\\n     * of the current 0xSplit contract to `_newController`\\n     * @dev It should forward messages to stay in sync with provided replicas.\\n     * - {msg.value} must match the total fees required to pay the Connext relayer to execute\\n     * forwarded messages in the destination.\\n     * @param _chainIds a list of network chainIds where valid replicas live\\n     * @param _newControllers new controller address per replica\\n     * @param _relayerFees a list of fees to be paid to the Connext relayer per sync message forwarded\\n     */\\n    function transferNetworkSplitControl(\\n        uint32[] memory _chainIds,\\n        address[] memory _newControllers,\\n        uint256[] memory _relayerFees\\n    ) external payable;\\n\\n    /**\\n     * @notice Submit sync messages to replicas in order to accept control of the current 0xSplit contract\\n     * @dev It should forward messages to stay in sync with provided replicas.\\n     * - {msg.value} must match the total fees required to pay the Connext relayer to execute\\n     * forwarded messages in the destination.\\n     * @param _chainIds a list of network chainIds where valid replicas live\\n     * @param _relayerFees a list of fees to be paid to the Connext relayer per sync message forwarded\\n     */\\n    function acceptNetworkSplitControl(uint32[] calldata _chainIds, uint256[] calldata _relayerFees) external payable;\\n\\n    /**\\n     * @notice Submit sync messages to replicas in order to cancel a transfer control request\\n     * of the current 0xSplit contract\\n     * @dev It should forward messages to stay in sync with provided replicas.\\n     * - {msg.value} must match the total fees required to pay the Connext relayer to execute\\n     * forwarded messages in the destination.\\n     * @param _chainIds a list of network chainIds where valid replicas live\\n     * @param _relayerFees a list of fees to be paid to the Connext relayer per sync message forwarded\\n     */\\n    function cancelNetworkSplitControlTransfer(\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xd167cee8a14dd66881916a41c63b58a6d8050eb99637ef2869507250eaaab424\",\"license\":\"MIT\"},\"contracts/interfaces/ISplitMain.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISplitMain {\\n    /**\\n     * FUNCTIONS\\n     */\\n\\n    function walletImplementation() external returns (address);\\n\\n    function createSplit(\\n        address[] calldata accounts,\\n        uint32[] calldata percentAllocations,\\n        uint32 distributorFee,\\n        address controller\\n    ) external returns (address);\\n\\n    function predictImmutableSplitAddress(\\n        address[] calldata accounts,\\n        uint32[] calldata percentAllocations,\\n        uint32 distributorFee\\n    ) external view returns (address);\\n\\n    function updateSplit(\\n        address split,\\n        address[] calldata accounts,\\n        uint32[] calldata percentAllocations,\\n        uint32 distributorFee\\n    ) external;\\n\\n    function getController(address split) external view returns (address);\\n\\n    function getNewPotentialController(address split) external view returns (address);\\n\\n    function transferControl(address split, address newController) external;\\n\\n    function cancelControlTransfer(address split) external;\\n\\n    function acceptControl(address split) external;\\n\\n    function makeSplitImmutable(address split) external;\\n\\n    function distributeETH(\\n        address split,\\n        address[] calldata accounts,\\n        uint32[] calldata percentAllocations,\\n        uint32 distributorFee,\\n        address distributorAddress\\n    ) external;\\n\\n    function updateAndDistributeETH(\\n        address split,\\n        address[] calldata accounts,\\n        uint32[] calldata percentAllocations,\\n        uint32 distributorFee,\\n        address distributorAddress\\n    ) external;\\n\\n    function distributeERC20(\\n        address split,\\n        IERC20 token,\\n        address[] calldata accounts,\\n        uint32[] calldata percentAllocations,\\n        uint32 distributorFee,\\n        address distributorAddress\\n    ) external;\\n\\n    function updateAndDistributeERC20(\\n        address split,\\n        IERC20 token,\\n        address[] calldata accounts,\\n        uint32[] calldata percentAllocations,\\n        uint32 distributorFee,\\n        address distributorAddress\\n    ) external;\\n\\n    function withdraw(address account, uint256 withdrawETH, IERC20[] calldata tokens) external;\\n\\n    /**\\n     * EVENTS\\n     */\\n\\n    /** @notice emitted after each successful split creation\\n     *  @param split Address of the created split\\n     */\\n    event CreateSplit(address indexed split);\\n\\n    /** @notice emitted after each successful split update\\n     *  @param split Address of the updated split\\n     */\\n    event UpdateSplit(address indexed split);\\n\\n    /** @notice emitted after each initiated split control transfer\\n     *  @param split Address of the split control transfer was initiated for\\n     *  @param newPotentialController Address of the split's new potential controller\\n     */\\n    event InitiateControlTransfer(address indexed split, address indexed newPotentialController);\\n\\n    /** @notice emitted after each canceled split control transfer\\n     *  @param split Address of the split control transfer was canceled for\\n     */\\n    event CancelControlTransfer(address indexed split);\\n\\n    /** @notice emitted after each successful split control transfer\\n     *  @param split Address of the split control was transferred for\\n     *  @param previousController Address of the split's previous controller\\n     *  @param newController Address of the split's new controller\\n     */\\n    event ControlTransfer(address indexed split, address indexed previousController, address indexed newController);\\n\\n    /** @notice emitted after each successful ETH balance split\\n     *  @param split Address of the split that distributed its balance\\n     *  @param amount Amount of ETH distributed\\n     *  @param distributorAddress Address to credit distributor fee to\\n     */\\n    event DistributeETH(address indexed split, uint256 amount, address indexed distributorAddress);\\n\\n    /** @notice emitted after each successful ERC20 balance split\\n     *  @param split Address of the split that distributed its balance\\n     *  @param token Address of ERC20 distributed\\n     *  @param amount Amount of ERC20 distributed\\n     *  @param distributorAddress Address to credit distributor fee to\\n     */\\n    event DistributeERC20(\\n        address indexed split,\\n        IERC20 indexed token,\\n        uint256 amount,\\n        address indexed distributorAddress\\n    );\\n\\n    /** @notice emitted after each successful withdrawal\\n     *  @param account Address that funds were withdrawn to\\n     *  @param ethAmount Amount of ETH withdrawn\\n     *  @param tokens Addresses of ERC20s withdrawn\\n     *  @param tokenAmounts Amounts of corresponding ERC20s withdrawn\\n     */\\n    event Withdrawal(address indexed account, uint256 ethAmount, IERC20[] tokens, uint256[] tokenAmounts);\\n}\\n\",\"keccak256\":\"0x21bee940dd4656471020c2d7d531242edc8580ff21f5addbd696564c4334a619\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ISplitManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title A 0xSplit manager interface\\n * @author DAOHaus\\n * @notice Allows a contract to become a 0xSplit controller and trigger a split distribution based\\n * on member contributions\\n * @dev Includes minimal functions to calculate contributions and manage 0xSplit contract.\\n * Calculate functions can be implemented in different flavours and use on-chain and/or off-chain via oracles\\n */\\ninterface ISplitManager {\\n    /**\\n     * @notice Calculate 0xSplit distribution allocations\\n     * @dev Verify if the address list is sorted, has no duplicates and is valid.\\n     * @param _sortedList sorted list (ascending order) of members to be considered in the 0xSplit distribution\\n     * @return _receivers list of eligible recipients (non-zero allocation) for the next split distribution\\n     * @return _percentAllocations list of split allocations for each eligible recipient\\n     */\\n    function calculate(address[] memory _sortedList) external view returns (address[] memory, uint32[] memory);\\n\\n    /**\\n     * @notice Calculates a member individual contribution\\n     * @dev It could use member activity / other metadata\\n     * @param _memberAddress member address\\n     * @return calculated contribution as uin256 value\\n     */\\n    function calculateContributionOf(address _memberAddress) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the sum of all member contributions\\n     * @return total calculated contributions from active members\\n     */\\n    function calculateTotalContributions() external view returns (uint256 total);\\n\\n    /**\\n     * @notice Updates the 0xSplit distribution based on member activity during the last epoch\\n     * @dev Verify if the address list is sorted, has no duplicates and is valid\\n     * @param _sortedList sorted list (ascending order) of members to be considered in the 0xSplit distribution\\n     * @param _splitDistributorFee split fee set as reward for the address that executes the distribution\\n     */\\n    function updateSplits(address[] memory _sortedList, uint32 _splitDistributorFee) external;\\n\\n    /**\\n     * @notice Executes both {updateSecondsActive} to update registry member's activity and {updateSplits}\\n     * for split distribution\\n     * @dev Verify if the address list is sorted, has no duplicates and is valid\\n     * @param _sortedList sorted list (ascending order) of members to be considered in the 0xSplit distribution\\n     * @param _splitDistributorFee split fee set as reward for the address that executes the distribution\\n     */\\n    function updateAll(address[] memory _sortedList, uint32 _splitDistributorFee) external;\\n\\n    /**\\n     * @notice Updates the the 0xSplitMain proxy and 0xSplit contract addresses\\n     * @dev Should verify the 0xSplit contract exists and that it isn't immutable (no owner).\\n     * Also make sure controller has been already handed over to the registry or it's waiting to be accepted.\\n     * @param _splitMain The address of the 0xSplitMain\\n     * @param _split The address of the 0xSplit contract\\n     */\\n    function setSplit(address _splitMain, address _split) external;\\n\\n    /**\\n     * @notice Transfer control of the current 0xSplit contract to `_newController`\\n     * @param _newController new controller address\\n     */\\n    function transferSplitControl(address _newController) external;\\n\\n    /**\\n     * @notice Accepts control of the current 0xSplit contract\\n     */\\n    function acceptSplitControl() external;\\n\\n    /**\\n     * @notice Cancel controller transfer of the current 0xSplit contract\\n     * @dev Should cancel a previous request to update the controller of the current 0xSplit contract\\n     */\\n    function cancelSplitControlTransfer() external;\\n}\\n\",\"keccak256\":\"0xc28944328ef629f5286383928af33ac716ebfdefe84aa32841d3194cb793fe71\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title A helper library that contains data types used for creating a registry data model\\n * @author DAOHaus\\n */\\nlibrary DataTypes {\\n    /// @dev Member data model to track minimal information about member activity in the registry\\n    struct Member {\\n        /// @notice member address\\n        address account;\\n        /// @notice total active time in seconds\\n        uint32 secondsActive;\\n        /// @notice timestamp where member started activities\\n        /// @dev timestamp format in seconds\\n        uint32 startDate;\\n        /**\\n         * @notice member activity multiplier (i.e. 50 -> part-time 100 -> full-time)\\n         * @dev activity multiplier should be set as a 0-100 (%)\\n         * but it's up to the implementer to establish the multiplier boundaries\\n         */\\n        uint32 activityMultiplier;\\n    }\\n\\n    /// @dev Data model to store a registry of Members\\n    struct Members {\\n        /// @notice list of members in the registry\\n        Member[] db;\\n        /// @dev internal counter to set a record ID for new members\\n        uint256 count;\\n        /// @notice index of member record IDs in the registry\\n        /// @dev mapping between member address and record ID assigned during registration\\n        // solhint-disable-next-line named-parameters-mapping\\n        mapping(address => uint256) index;\\n    }\\n\\n    /// @dev Data structure to store a NetworkRegistry replica config\\n    struct Registry {\\n        /// @notice Connext Domain ID where the NetworkRegistry lives\\n        uint32 domainId;\\n        /// @notice NetworkRegistry address\\n        address registryAddress;\\n        /// @notice delegate address that can revert or forceLocal on destination (not used)\\n        /// @dev It is very unlikely for this use case to get a failed tx on the replica if it doesn't revert\\n        /// in the main registry first. More info at https://docs.connext.network/developers/guides/handling-failures\\n        address delegate;\\n    }\\n}\\n\",\"keccak256\":\"0x4fd90647515e7637598313eef36fd86aa463c064b877095b95a883b989bde293\",\"license\":\"MIT\"},\"contracts/libraries/PGContribCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { UD60x18 } from \\\"@prb/math/src/UD60x18.sol\\\";\\n\\nimport { DataTypes } from \\\"../libraries/DataTypes.sol\\\";\\nimport { MemberRegistry } from \\\"../registry/MemberRegistry.sol\\\";\\n\\n/// @notice Member list must be sorted in ascending order\\n/// @param _index index where a member address is not properly sorted\\nerror InvalidSplit__AccountsOutOfOrder(uint256 _index);\\n/// @notice Member is not registered\\n/// @param _member member address\\nerror InvalidSplit__MemberNotRegistered(address _member);\\n/// @notice Member list does not have any active member\\nerror InvalidSplit__NoActiveMembers();\\n\\n/**\\n * @title A 0xSplit allocations calculator library\\n * @author DAOHaus\\n * @notice A Library that calculates 0xSplit allocations using ProtocolGuild MemberRegistry\\n * time-based member contributions\\n * @dev The DataTypes.Members data model is used to feed member's metadata to the calculate function\\n */\\nlibrary PGContribCalculator {\\n    /// @dev used to store individual members contributions prior getting overall split percentages\\n    struct MemberContribution {\\n        /// @notice member address\\n        address receiverAddress;\\n        /// @notice member calculated contribution\\n        /// @dev use calculateContributionOf(member)\\n        uint256 calcContribution;\\n    }\\n\\n    // @dev constant to scale UINT values into percentages (1e6 == 100%)\\n    uint256 private constant PERCENTAGE_SCALE = 1e6;\\n\\n    /**\\n     * @notice Calculate 0xSplit allocations\\n     * @dev Verifies if the address list is sorted, has no duplicates and is valid.\\n     * Formula to calculate individual allocations:\\n     *  - (SQRT(secondsActive * activityMultiplier) * PERCENTAGE_SCALE) / totalContributions\\n     *  - Total allocations from all members must be equal to 0xSplit PERCENTAGE_SCALE\\n     * The goal of the weighting formula is to reduce the total variance range of every member weight (hence using SQRT)\\n     * @param _sortedList sorted list (ascending order) of members to be considered in the 0xSplit distribution\\n     * @return _receivers list of eligible recipients (non-zero allocation) for the next split distribution\\n     * @return _percentAllocations list of split allocations for each eligible recipient\\n     */\\n    function calculate(\\n        DataTypes.Members storage self,\\n        address[] memory _sortedList\\n    ) external view returns (address[] memory _receivers, uint32[] memory _percentAllocations) {\\n        uint256 activeMembers;\\n        uint256 total;\\n        address previous;\\n\\n        MemberContribution[] memory memberDistribution = new MemberContribution[](_sortedList.length);\\n        for (uint256 i = 0; i < _sortedList.length; ) {\\n            address memberAddress = _sortedList[i];\\n            DataTypes.Member memory member = getMember(self, memberAddress); // TODO:\\n            if (previous >= memberAddress) revert InvalidSplit__AccountsOutOfOrder(i);\\n\\n            // ignore inactive members\\n            if (member.activityMultiplier > 0) {\\n                memberDistribution[i] = MemberContribution({\\n                    // TODO: how to allow recipient to assign different addresses per network?\\n                    receiverAddress: memberAddress,\\n                    calcContribution: calculateContributionOf(self, member) // TODO:\\n                });\\n                // get the total seconds in the last period\\n                // total = total + unwrap(wrap(members[memberIdx - 1].secondsActive).sqrt());\\n                total += memberDistribution[i].calcContribution;\\n                unchecked {\\n                    ++activeMembers; // gas optimization: very unlikely to overflow\\n                }\\n                previous = memberAddress;\\n            }\\n            unchecked {\\n                ++i; // gas optimization: very unlikely to overflow\\n            }\\n        }\\n\\n        if (activeMembers == 0) revert InvalidSplit__NoActiveMembers();\\n\\n        // define variables for split params\\n        _receivers = new address[](activeMembers);\\n        _percentAllocations = new uint32[](activeMembers);\\n\\n        // define variables for second loop\\n        uint32 runningTotal;\\n        uint256 nonZeroIndex; // index counter for non zero allocations\\n        uint256 minAllocation = type(uint256).max;\\n        uint256 minAllocationIndex;\\n        // fill 0xSplits arrays with sorted list\\n        for (uint256 i = 0; i < _sortedList.length; ) {\\n            if (memberDistribution[i].calcContribution > 0) {\\n                _receivers[nonZeroIndex] = memberDistribution[i].receiverAddress;\\n                _percentAllocations[nonZeroIndex] = uint32(\\n                    (memberDistribution[i].calcContribution * PERCENTAGE_SCALE) / total\\n                );\\n\\n                runningTotal += _percentAllocations[nonZeroIndex];\\n\\n                // find the recipient with lowest allocation\\n                if (_percentAllocations[nonZeroIndex] < minAllocation) {\\n                    minAllocation = _percentAllocations[nonZeroIndex];\\n                    minAllocationIndex = nonZeroIndex;\\n                }\\n\\n                unchecked {\\n                    ++nonZeroIndex; // gas optimization: very unlikely to overflow\\n                }\\n            }\\n            unchecked {\\n                ++i; // gas optimization: very unlikely to overflow\\n            }\\n        }\\n\\n        // NOTICE: In case sum(percentAllocations) < PERCENTAGE_SCALE\\n        // the remainder will be added to the recipient with lowest allocation\\n        if (runningTotal != PERCENTAGE_SCALE) {\\n            _percentAllocations[minAllocationIndex] += uint32(PERCENTAGE_SCALE - runningTotal);\\n        }\\n    }\\n\\n    /**\\n     * @notice Fetch a member metadata from the registry\\n     * @dev throw an exception if member is not in the registry\\n     * @param _memberAddress member address\\n     * @return a Member's metadata\\n     */\\n    function getMember(\\n        DataTypes.Members storage self,\\n        address _memberAddress\\n    ) internal view returns (DataTypes.Member memory) {\\n        if (self.index[_memberAddress] == 0) revert InvalidSplit__MemberNotRegistered(_memberAddress);\\n        return self.db[self.index[_memberAddress] - 1];\\n    }\\n\\n    /**\\n     * @notice Calculates individual contribution based on member activity\\n     * @dev Contribution is calculated as SQRT(member.secondsActive)\\n     * @param _member Member metadata\\n     * @return calculated contribution as uint256 value\\n     */\\n    function calculateContributionOf(\\n        DataTypes.Members storage /*self*/,\\n        DataTypes.Member memory _member\\n    ) public pure returns (uint256) {\\n        return UD60x18.unwrap(UD60x18.wrap(_member.secondsActive).sqrt());\\n    }\\n}\\n\",\"keccak256\":\"0x620c60dc086e289acb4793d9766856db230c0d412170704dd804a347237c72cf\",\"license\":\"MIT\"},\"contracts/registry/MemberRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { IMemberRegistry } from \\\"../interfaces/IMemberRegistry.sol\\\";\\nimport { DataTypes } from \\\"../libraries/DataTypes.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/**\\n * CUSTOM ERRORS\\n */\\n\\n/// @notice Function array parameter size mismatch\\nerror MemberRegistry__ParamsSizeMismatch();\\n/// @notice Member index out of bounds\\nerror Member__IndexOutOfBounds();\\n/// @notice Member is already registered\\n/// @param _memberAddress member address\\nerror Member__AlreadyRegistered(address _memberAddress);\\n/// @notice Member is not registered\\n/// @param _memberAddress member address\\nerror Member__NotRegistered(address _memberAddress);\\n/// @notice Invalid member address\\n/// @param _memberAddress submitted member address\\nerror InvalidMember__Address(address _memberAddress);\\n/// @notice Invalid member start date\\n/// @param _memberAddress member address\\n/// @param _startDate start date in seconds\\nerror InvalidMember__StartDateInTheFuture(address _memberAddress, uint32 _startDate);\\n/// @notice Invalid value for member activity multiplier\\n/// @param _memberAddress member address\\n/// @param _activityMultiplier activity multiplier\\nerror InvalidMember__ActivityMultiplier(address _memberAddress, uint32 _activityMultiplier);\\n\\n/**\\n * @title An On-chain member registry\\n * @author DAOHaus\\n * @notice Manage an on-chain member activity registry\\n * @dev Includes minimal functions to implement an on-chain registry that tracks members & activity time\\n */\\nabstract contract MemberRegistry is IMemberRegistry {\\n    /// @notice Member registry\\n    /// @dev members should be fetched with proper getters that interact with Members db and index\\n    DataTypes.Members internal members;\\n    /// @notice last timestamp where the registry got updated\\n    /// @dev should be assigned to uint32(block.timestamp)\\n    uint32 public lastActivityUpdate;\\n    /// @dev Activity multiplier upper bound\\n    uint32 internal constant MULTIPLIER_UPPER_BOUND = 100;\\n\\n    /**\\n     * EVENTS\\n     */\\n\\n    /**\\n     * @notice emitted after a new member is added to the registry\\n     * @param _memberAddress member address\\n     * @param _startDate timestamp the member started activities in seconds\\n     * @param _activityMultiplier member activity multiplier\\n     */\\n    event NewMember(address indexed _memberAddress, uint32 _startDate, uint32 _activityMultiplier);\\n    /**\\n     * @notice emitted after the an existing member is updated\\n     * @param _memberAddress member address\\n     * @param _activityMultiplier new member activity multiplier\\n     * @param _startDate timestamp the member started activities in seconds\\n     * @param _secondsActive member seconds active since last update\\n     */\\n    event UpdateMember(\\n        address indexed _memberAddress,\\n        uint32 _activityMultiplier,\\n        uint32 _startDate,\\n        uint32 _secondsActive\\n    );\\n    /**\\n     * @notice emitted after each time a member registry activity is updated\\n     * @param _memberAddress member address\\n     * @param _secondsActive member activity in seconds since last registry update\\n     */\\n    event UpdateMemberSeconds(address indexed _memberAddress, uint32 _secondsActive);\\n    /**\\n     * @notice emitted after an registry activity update epoch is executed\\n     * @param _timestamp timestamp registry activity update epoch was executed\\n     * @param _totalMemberUpdates total updated members during the epoch\\n     */\\n    event RegistryActivityUpdate(uint32 _timestamp, uint256 _totalMemberUpdates);\\n\\n    /**\\n     * @notice Adds a new member to the registry\\n     * @dev Activity multiplier could be set within 0-100 (%) range (i.e. 50 -> part-time 100 -> full-time).\\n     * Notice function is set as virtual so base functionality can be overridden by the implementer.\\n     * @param _memberAddress new member address\\n     * @param _activityMultiplier member activity multiplier\\n     * @param _startDate timestamp (in seconds) when the member got active\\n     */\\n    function _setNewMember(address _memberAddress, uint32 _activityMultiplier, uint32 _startDate) internal virtual {\\n        if (_memberAddress == address(0)) revert InvalidMember__Address(_memberAddress);\\n        if (_getMemberId(_memberAddress) != 0) revert Member__AlreadyRegistered(_memberAddress);\\n        if (_activityMultiplier > MULTIPLIER_UPPER_BOUND)\\n            revert InvalidMember__ActivityMultiplier(_memberAddress, _activityMultiplier);\\n        if (_startDate > block.timestamp) revert InvalidMember__StartDateInTheFuture(_memberAddress, _startDate);\\n\\n        // secondsActive set to 0, will be updated in next update\\n        members.db.push(DataTypes.Member(_memberAddress, 0, _startDate, _activityMultiplier));\\n        unchecked {\\n            members.index[_memberAddress] = ++members.count;\\n        }\\n        emit NewMember(_memberAddress, _startDate, _activityMultiplier);\\n    }\\n\\n    /**\\n     * @notice Adds a new set of members to the registry\\n     * @param _members A list of member addresses to be added to the registry\\n     * @param _activityMultipliers Activity multipliers for each new member\\n     * @param _startDates A list of dates when each member got active\\n     */\\n    function _batchNewMembers(\\n        address[] memory _members,\\n        uint32[] memory _activityMultipliers,\\n        uint32[] memory _startDates\\n    ) internal {\\n        uint256 batchSize = _members.length;\\n        if (_activityMultipliers.length != batchSize || _startDates.length != batchSize)\\n            revert MemberRegistry__ParamsSizeMismatch();\\n        for (uint256 i = 0; i < batchSize; ) {\\n            _setNewMember(_members[i], _activityMultipliers[i], _startDates[i]);\\n            unchecked {\\n                ++i; // gas optimization: very unlikely to overflow\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the activity multiplier for an existing member.\\n     * Consider updating a member activity multiplier for the next activity update epoch.\\n     * @dev {_getMember} function makes sure member is in the registry.\\n     * Activity multiplier can be set within 0-100 (%) range (i.e. 50 -> part-time 100 -> full-time).\\n     * Notice function is set as virtual so base functionality can be overridden by the implementer.\\n     * @param _memberAddress member address\\n     * @param _activityMultiplier member new activity multiplier\\n     */\\n    function _updateMemberActivity(address _memberAddress, uint32 _activityMultiplier) internal virtual {\\n        if (_activityMultiplier > MULTIPLIER_UPPER_BOUND)\\n            revert InvalidMember__ActivityMultiplier(_memberAddress, _activityMultiplier);\\n\\n        DataTypes.Member storage member = _getMember(_memberAddress);\\n        member.activityMultiplier = _activityMultiplier;\\n\\n        emit UpdateMember(_memberAddress, _activityMultiplier, member.startDate, member.secondsActive);\\n    }\\n\\n    /**\\n     * @notice Updates the activity multiplier for a set of existing members\\n     * @param _members A list of existing members\\n     * @param _activityMultipliers New activity multipliers for each member\\n     */\\n    function _batchUpdateMembersActivity(address[] memory _members, uint32[] memory _activityMultipliers) internal {\\n        uint256 batchSize = _members.length;\\n        if (_activityMultipliers.length != batchSize) revert MemberRegistry__ParamsSizeMismatch();\\n        for (uint256 i = 0; i < batchSize; ) {\\n            _updateMemberActivity(_members[i], _activityMultipliers[i]);\\n            unchecked {\\n                ++i; // gas optimization: very unlikely to overflow\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates seconds active for each member in the registry since the last update (epoch).\\n     * This function is called periodically (i.e. each quarter) so member's activity should be properly\\n     * updated before calling this function.\\n     * @dev Manages a {lastActivityUpdate} state variable to update member's activity time since the\\n     * last registry update. Member's seconds active are calculated as follows:\\n     * - For new members (secondsActive == 0) it will consider the period {block.timestamp - member.startDate}\\n     * - Else for existing members it will consider the period {block.timestamp - lastActivityUpdate}\\n     * If there are registered members previously marked as inactive (activityMultiplier == 0) that should be\\n     * considered in the current epoch, you should make the proper updates to their state prior executing the\\n     * function.\\n     * Notice function is set as virtual so base functionality can be overridden by the implementer.\\n     */\\n    function _updateSecondsActive() internal virtual {\\n        uint32 currentDate = uint32(block.timestamp);\\n        uint256 membersLength = totalMembers();\\n        // update Member total seconds active\\n        for (uint256 i = 0; i < membersLength; ) {\\n            DataTypes.Member storage _member = _getMemberByIndex(i);\\n            uint32 newSecondsActive;\\n            if (_member.activityMultiplier > 0) {\\n                uint32 initDate = _member.secondsActive > 0 ? lastActivityUpdate : _member.startDate;\\n                uint256 totalSeconds = currentDate - initDate;\\n                // divide activityMultiplier by 100 -> then multiply seconds active by \\\"modifier %\\\"\\n                newSecondsActive = uint32((totalSeconds * _member.activityMultiplier) / MULTIPLIER_UPPER_BOUND);\\n                _member.secondsActive += newSecondsActive;\\n            }\\n            emit UpdateMemberSeconds(_member.account, newSecondsActive);\\n            unchecked {\\n                ++i; // gas optimization: very unlikely to overflow\\n            }\\n        }\\n        emit RegistryActivityUpdate(currentDate, membersLength);\\n        lastActivityUpdate = currentDate;\\n    }\\n\\n    /**\\n     * @dev Fetch a member by Members.db index position.\\n     * Methods calling this function must ensure that index is within the boundaries.\\n     * @param _memberIdx member index position in Members.db\\n     * @return Member metadata\\n     */\\n    function _getMemberByIndex(uint256 _memberIdx) internal view returns (DataTypes.Member storage) {\\n        return members.db[_memberIdx];\\n    }\\n\\n    /**\\n     * @dev Fetch a member by record ID\\n     * _memberId must be greater than zero.\\n     * @param _memberId member record ID\\n     * @return Member metadata\\n     */\\n    function _getMemberById(uint256 _memberId) internal view returns (DataTypes.Member storage) {\\n        return _getMemberByIndex(_memberId - 1);\\n    }\\n\\n    /**\\n     * @dev Query the Members.index by address to obtain a member's record ID.\\n     * Returns 0 if member is not registered.\\n     * @param _memberAddress member address\\n     * @return member record ID\\n     */\\n    function _getMemberId(address _memberAddress) internal view returns (uint256) {\\n        return members.index[_memberAddress];\\n    }\\n\\n    /**\\n     * @dev Fetch a member's metadata from the registry.\\n     * It should throw an exception if member is not in the db\\n     * @param _memberAddress member address\\n     * @return member metadata\\n     */\\n    function _getMember(address _memberAddress) internal view returns (DataTypes.Member storage) {\\n        uint256 memberId = _getMemberId(_memberAddress);\\n        if (memberId == 0) revert Member__NotRegistered(_memberAddress);\\n        return _getMemberById(memberId);\\n    }\\n\\n    /**\\n     * @notice Fetch a member's metadata from the registry.\\n     * @dev It throws an exception if member is not in the db\\n     * @inheritdoc IMemberRegistry\\n     */\\n    function getMember(address _memberAddress) public view returns (DataTypes.Member memory member) {\\n        member = _getMember(_memberAddress);\\n    }\\n\\n    /**\\n     * @notice Returns the total No of members in the registry\\n     * @inheritdoc IMemberRegistry\\n     */\\n    function totalMembers() public view returns (uint256) {\\n        return members.db.length;\\n    }\\n\\n    /**\\n     * @notice Fetch members metadata as separate property arrays\\n     * @inheritdoc IMemberRegistry\\n     */\\n    function getMembersProperties(\\n        address[] memory _members\\n    ) public view returns (uint32[] memory, uint32[] memory, uint32[] memory) {\\n        uint256 membersLength = _members.length;\\n        uint32[] memory activityMultipliers = new uint32[](membersLength);\\n        uint32[] memory startDates = new uint32[](membersLength);\\n        uint32[] memory secondsActive = new uint32[](membersLength);\\n        for (uint256 i = 0; i < membersLength; ) {\\n            DataTypes.Member memory member = _getMember(_members[i]);\\n            activityMultipliers[i] = member.activityMultiplier;\\n            startDates[i] = member.startDate;\\n            secondsActive[i] = member.secondsActive;\\n            unchecked {\\n                ++i; // gas optimization: very unlikely to overflow\\n            }\\n        }\\n        return (activityMultipliers, startDates, secondsActive);\\n    }\\n\\n    /**\\n     * @notice Fetch all members from the registry\\n     * @inheritdoc IMemberRegistry\\n     */\\n    function getMembers() external view returns (DataTypes.Member[] memory) {\\n        return members.db;\\n    }\\n\\n    /**\\n     * @notice Fetch a subset of members from the registry\\n     * @inheritdoc IMemberRegistry\\n     */\\n    function getMembersPaginated(\\n        uint256 _fromIndex,\\n        uint256 _toIndex\\n    ) external view returns (DataTypes.Member[] memory memberList) {\\n        uint256 maxIndex = totalMembers();\\n        if (_fromIndex >= maxIndex || _toIndex >= maxIndex) revert Member__IndexOutOfBounds();\\n        memberList = new DataTypes.Member[](_toIndex - _fromIndex + 1);\\n        for (uint256 i = _fromIndex; i <= _toIndex; ) {\\n            DataTypes.Member memory member = _getMemberByIndex(i);\\n            memberList[i] = member;\\n            unchecked {\\n                ++i; // gas optimization: very unlikely to overflow\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdf8c2656bc4de2ad92b119b1da6ad141d908e96b3519ab3ae2222cd37b25b117\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c6200002c565b620000266200002c565b620000e0565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff16156200007d5760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000dd5780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b6159d880620000f06000396000f3fe6080604052600436106102935760003560e01c80638da5cb5b1161015a578063b85a2ce1116100c1578063e5a2a2a51161007a578063e5a2a2a5146107c3578063e9172c2d146107e3578063f2fde38b14610803578063f6ce035414610823578063f765417614610843578063fd614f411461086357600080fd5b8063b85a2ce1146106a7578063bcecc5ba146106c7578063bf59b48814610743578063de4b054814610767578063df034cd01461078e578063e4a7c603146107ae57600080fd5b8063a02b600611610113578063a02b600614610609578063a084b6c014610629578063a8e6f1e71461063e578063ab6efc3014610651578063b044631c14610666578063b0affdf71461067957600080fd5b80638da5cb5b1461054d5780638dc15791146105625780638e58c55d146105825780638ee31392146105a25780639d7b8545146105d45780639eab5253146105f457600080fd5b806356c0e992116101fe5780637698a833116101b75780637698a833146104a357806376e92559146104c357806379962a26146104d85780637f6d2708146104eb57806380e038bc1461050b5780638bd1e6781461052057600080fd5b806356c0e9921461040257806358fa68841461041557806364c6d00a146104445780636bda59da14610457578063715018a61461046a578063754915121461047f57600080fd5b806345e838ca1161025057806345e838ca146103765780634fa20a2914610389578063524a1541146103a957806353c470d3146103bc5780635523a960146103cf57806355f36638146103e257600080fd5b80630bddc56b146102985780630e769b2b146102c75780632ada2596146102ff578063371b52e31461032c5780633a8246f314610343578063439fab9114610356575b600080fd5b3480156102a457600080fd5b50600a546102b29060ff1681565b60405190151581526020015b60405180910390f35b3480156102d357600080fd5b506006546102e7906001600160a01b031681565b6040516001600160a01b0390911681526020016102be565b34801561030b57600080fd5b5061031f61031a3660046142a9565b610890565b6040516102be9190614300565b34801561033857600080fd5b5061034161090b565b005b610341610351366004614448565b6109c9565b34801561036257600080fd5b5061034161037136600461455f565b610b9c565b6103416103843660046145ff565b610db3565b34801561039557600080fd5b506103416103a43660046146dc565b610f82565b6103416103b736600461473f565b610fc6565b6103416103ca36600461480e565b611104565b6103416103dd366004614448565b6112f3565b3480156103ee57600080fd5b506103416103fd3660046148df565b611431565b610341610410366004614966565b611477565b34801561042157600080fd5b506104356104303660046149d1565b61162e565b6040516102be93929190614a46565b610341610452366004614966565b61182b565b610341610465366004614a89565b61195b565b34801561047657600080fd5b50610341611abd565b34801561048b57600080fd5b5061049560095481565b6040519081526020016102be565b3480156104af57600080fd5b506103416104be366004614b06565b611ad1565b3480156104cf57600080fd5b50600054610495565b6103416104e6366004614ba0565b611c8b565b3480156104f757600080fd5b50610341610506366004614c42565b611e79565b34801561051757600080fd5b50610341611ed9565b34801561052c57600080fd5b5061054061053b366004614c72565b611f67565b6040516102be9190614c94565b34801561055957600080fd5b506102e76120b5565b34801561056e57600080fd5b5061034161057d366004614ce2565b6120e3565b34801561058e57600080fd5b5061034161059d366004614d28565b612123565b3480156105ae57600080fd5b506003546105bf9063ffffffff1681565b60405163ffffffff90911681526020016102be565b3480156105e057600080fd5b506103416105ef3660046142a9565b6122d3565b34801561060057600080fd5b50610540612399565b34801561061557600080fd5b50610341610624366004614ce2565b612432565b34801561063557600080fd5b506102b2612470565b61034161064c366004614dd4565b61249e565b34801561065d57600080fd5b5061049561263d565b610341610674366004614966565b612749565b34801561068557600080fd5b506106996106943660046149d1565b612881565b6040516102be929190614ead565b3480156106b357600080fd5b506103416106c2366004614ed2565b61290f565b3480156106d357600080fd5b506107176106e2366004614f00565b6005602052600090815260409020805460019091015463ffffffff8216916001600160a01b03600160201b9091048116911683565b6040805163ffffffff90941684526001600160a01b0392831660208501529116908201526060016102be565b34801561074f57600080fd5b506003546105bf90600160c01b900463ffffffff1681565b34801561077357600080fd5b506003546102e790600160201b90046001600160a01b031681565b34801561079a57600080fd5b506004546102e7906001600160a01b031681565b3480156107ba57600080fd5b50610341612b27565b3480156107cf57600080fd5b506008546102e7906001600160a01b031681565b3480156107ef57600080fd5b506104956107fe3660046142a9565b612b65565b34801561080f57600080fd5b5061034161081e3660046142a9565b612bf6565b34801561082f57600080fd5b5061034161083e366004614f1d565b612c39565b34801561084f57600080fd5b506007546102e7906001600160a01b031681565b34801561086f57600080fd5b5061088361087e366004614f68565b612d5e565b6040516102be919061503e565b6040805160808101825260008082526020820181905291810182905260608101919091526108bd826132fc565b6040805160808101825291546001600160a01b038116835263ffffffff600160a01b820481166020850152600160c01b8204811692840192909252600160e01b900416606082015292915050565b6109136120b5565b6001600160a01b0316336001600160a01b03161415801561094757506004546001600160a01b031615806109475750333014155b1561096557604051633b4e61ad60e01b815260040160405180910390fd5b600654600754604051630933e36d60e11b81526001600160a01b039182166004820152911690631267c6da906024015b600060405180830381600087803b1580156109af57600080fd5b505af11580156109c3573d6000803e3d6000fd5b50505050565b6109d161334a565b6109d9612470565b6109f6576040516386e2123960e01b815260040160405180910390fd5b838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208087028281018201909352868252909350869250859182918501908490808284376000920191909152505082518451149150610a7e905057604051631d3c4ecb60e31b815260040160405180910390fd5b6000805b8351811015610aba57828181518110610a9d57610a9d615051565b602002602001015182610ab0919061507d565b9150600101610a82565b5080341015610adc57604051631144943160e21b815260040160405180910390fd5b610ae461337c565b610aee898961351a565b604051635015b00360e11b90600090610b0f9083908d908d90602001615090565b6040516020818303038152906040529050610b8f82828b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525061361b92505050565b5050505050505050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff1615906001600160401b0316600081158015610be15750825b90506000826001600160401b03166001148015610bfd5750303b155b905081158015610c0b575080155b15610c295760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610c5357845460ff60401b1916600160401b1785555b6000806000806000806000808d806020019051810190610c7391906150c8565b9750975097509750975097509750975060006001600160a01b0316836001600160a01b031603610cb657604051635dafaab560e11b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b03851690811790915560408051632d77bef360e11b81529051610d46928b928b928b928b928b92635aef7de6916004808201926020929091908290030181865afa158015610d1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d41919061516e565b613660565b600991909155600a805460ff1916911515919091179055505087159350610dab9250505057845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b505050505050565b610dbb61334a565b610dc3612470565b610de0576040516386e2123960e01b815260040160405180910390fd5b838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208087028281018201909352868252909350869250859182918501908490808284376000920191909152505082518451149150610e68905057604051631d3c4ecb60e31b815260040160405180910390fd5b6000805b8351811015610ea457828181518110610e8757610e87615051565b602002602001015182610e9a919061507d565b9150600101610e6c565b5080341015610ec657604051631144943160e21b815260040160405180910390fd5b610ed18a8a8a613706565b604051630abe6cc760e31b90600090610ef49083908e908e908e9060200161518b565b6040516020818303038152906040529050610f7482828b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525061361b92505050565b505050505050505050505050565b6004546001600160a01b03161580610f9a5750333014155b15610fb8576040516312ab28a760e11b815260040160405180910390fd5b610fc28282613793565b5050565b610fce61334a565b610fd6612470565b610ff3576040516386e2123960e01b815260040160405180910390fd5b83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808702828101820190935286825290935086925085918291850190849080828437600092019190915250508251845114915061107b905057604051631d3c4ecb60e31b815260040160405180910390fd5b6000805b83518110156110b75782818151811061109a5761109a615051565b6020026020010151826110ad919061507d565b915060010161107f565b50803410156110d957604051631144943160e21b815260040160405180910390fd5b6110e38989613793565b604051634fa20a2960e01b90600090610b0f9083908d908d906020016151de565b61110c61334a565b611114612470565b611131576040516386e2123960e01b815260040160405180910390fd5b8481805182511461115557604051631d3c4ecb60e31b815260040160405180910390fd5b6000805b83518110156111915782818151811061117457611174615051565b602002602001015182611187919061507d565b9150600101611159565b50803410156111b357604051631144943160e21b815260040160405180910390fd5b87518751811415806111c6575080875114155b806111d2575080865114155b156111f057604051631d3c4ecb60e31b815260040160405180910390fd5b633db380d560e21b60005b82811015610b8f576000828b838151811061121857611218615051565b60200260200101518b848151811061123257611232615051565b60200260200101518b858151811061124c5761124c615051565b602002602001015160405160200161129b94939291906001600160e01b03199490941684526001600160a01b03928316602085015263ffffffff91909116604084015216606082015260800190565b60405160208183030381529060405290506112ea83828e85815181106112c3576112c3615051565b60200260200101518b86815181106112dd576112dd615051565b60200260200101516137f8565b506001016111fb565b6112fb61334a565b611303612470565b611320576040516386e2123960e01b815260040160405180910390fd5b8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080870282810182019093528682529093508692508591829185019084908082843760009201919091525050825184511491506113a8905057604051631d3c4ecb60e31b815260040160405180910390fd5b6000805b83518110156113e4578281815181106113c7576113c7615051565b6020026020010151826113da919061507d565b91506001016113ac565b508034101561140657604051631144943160e21b815260040160405180910390fd5b611410898961351a565b604051638dc1579160e01b90600090610b0f9083908d908d90602001615090565b6004546001600160a01b031615806114495750333014155b15611467576040516312ab28a760e11b815260040160405180910390fd5b611472838383613706565b505050565b61147f61334a565b611487612470565b6114a4576040516386e2123960e01b815260040160405180910390fd5b83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808702828101820190935286825290935086925085918291850190849080828437600092019190915250508251845114915061152c905057604051631d3c4ecb60e31b815260040160405180910390fd5b6000805b83518110156115685782818151811061154b5761154b615051565b60200260200101518261155e919061507d565b9150600101611530565b508034101561158a57604051631144943160e21b815260040160405180910390fd5b604080516320380e2f60e21b6020820181905291600091015b604051602081830303815290604052905061162382828b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d91829185019084908082843760009201919091525061361b92505050565b505050505050505050565b60608060606000845190506000816001600160401b038111156116535761165361430e565b60405190808252806020026020018201604052801561167c578160200160208202803683370190505b5090506000826001600160401b038111156116995761169961430e565b6040519080825280602002602001820160405280156116c2578160200160208202803683370190505b5090506000836001600160401b038111156116df576116df61430e565b604051908082528060200260200182016040528015611708578160200160208202803683370190505b50905060005b8481101561181c57600061173a8a838151811061172d5761172d615051565b60200260200101516132fc565b6040805160808101825291546001600160a01b038116835263ffffffff600160a01b820481166020850152600160c01b8204811692840192909252600160e01b9004166060820181905286519192509086908490811061179c5761179c615051565b602002602001019063ffffffff16908163ffffffff168152505080604001518483815181106117cd576117cd615051565b602002602001019063ffffffff16908163ffffffff168152505080602001518383815181106117fe576117fe615051565b63ffffffff909216602092830291909101909101525060010161170e565b50919790965090945092505050565b61183361334a565b61183b612470565b611858576040516386e2123960e01b815260040160405180910390fd5b8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080870282810182019093528682529093508692508591829185019084908082843760009201919091525050825184511491506118e0905057604051631d3c4ecb60e31b815260040160405180910390fd5b6000805b835181101561191c578281815181106118ff576118ff615051565b602002602001015182611912919061507d565b91506001016118e4565b508034101561193e57604051631144943160e21b815260040160405180910390fd5b6040805163371b52e360e01b6020820181905291600091016115a3565b61196361334a565b61196b612470565b611988576040516386e2123960e01b815260040160405180910390fd5b828180518251146119ac57604051631d3c4ecb60e31b815260040160405180910390fd5b6000805b83518110156119e8578281815181106119cb576119cb615051565b6020026020010151826119de919061507d565b91506001016119b0565b5080341015611a0a57604051631144943160e21b815260040160405180910390fd5b855185518114611a2d57604051631d3c4ecb60e31b815260040160405180910390fd5b639d7b854560e01b60005b8281101561162357600082898381518110611a5557611a55615051565b6020026020010151604051602001611a8c9291906001600160e01b03199290921682526001600160a01b0316602082015260400190565b6040516020818303038152906040529050611ab483828c85815181106112c3576112c3615051565b50600101611a38565b611ac561334a565b611acf6000613877565b565b611ad961334a565b611ae1612470565b611afe576040516386e2123960e01b815260040160405180910390fd5b63ffffffff8216600090815260056020526040902054600160201b90046001600160a01b031615801590611b3d575060208101516001600160a01b0316155b15611b7b5763ffffffff8216600090815260056020526040902080546001600160c01b031916815560010180546001600160a01b0319169055611c1d565b805163ffffffff161580611b9a575060208101516001600160a01b0316155b15611bb857604051638c9c2fed60e01b815260040160405180910390fd5b63ffffffff828116600090815260056020908152604091829020845181549286015194166001600160c01b031990921691909117600160201b6001600160a01b039485160217815590830151600190910180546001600160a01b031916919092161790555b806000015163ffffffff1681602001516001600160a01b03168363ffffffff167f4db6d44cad7c0eddcb10fcbcb14f9600520da0ea078eedc230cbed5aa0661d208460400151604051611c7f91906001600160a01b0391909116815260200190565b60405180910390a45050565b611c9361334a565b611c9b612470565b611cb8576040516386e2123960e01b815260040160405180910390fd5b838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208087028281018201909352868252909350869250859182918501908490808284376000920191909152505082518451149150611d40905057604051631d3c4ecb60e31b815260040160405180910390fd5b6000805b8351811015611d7c57828181518110611d5f57611d5f615051565b602002602001015182611d72919061507d565b9150600101611d44565b5080341015611d9e57604051631144943160e21b815260040160405180910390fd5b6000806000611dac8b61162e565b6040519295509093509150638e58c55d60e01b90600090611dd99083908f90889088908890602001615212565b6040516020818303038152906040529050611e6a82828e8e80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508d8d8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061361b92505050565b50505050505050505050505050565b611e8161334a565b600a805460ff191682151590811790915560098390556040805184815260ff909216151560208301527f49af6cea37f232eb643c8b8dc8fd4ae6068e08bad978b48e8782c453e277c3b0910160405180910390a15050565b611ee16120b5565b6001600160a01b0316336001600160a01b031614158015611f1557506004546001600160a01b03161580611f155750333014155b15611f3357604051633b4e61ad60e01b815260040160405180910390fd5b60065460075460405163031f799160e61b81526001600160a01b03918216600482015291169063c7de644090602401610995565b60606000611f7460005490565b90508084101580611f855750808310155b15611fa357604051631a1015fd60e01b815260040160405180910390fd5b611fad848461527a565b611fb890600161507d565b6001600160401b03811115611fcf57611fcf61430e565b60405190808252806020026020018201604052801561202157816020015b604080516080810182526000808252602080830182905292820181905260608201528252600019909201910181611fed5790505b509150835b8381116120ad576000612038826138e8565b6040805160808101825291546001600160a01b038116835263ffffffff600160a01b820481166020850152600160c01b8204811692840192909252600160e01b90041660608201528451909150819085908490811061209957612099615051565b602090810291909101015250600101612026565b505092915050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6004546001600160a01b031615806120fb5750333014155b15612119576040516312ab28a760e11b815260040160405180910390fd5b610fc2828261351a565b6004546001600160a01b0316158061213b5750333014155b15612159576040516312ab28a760e11b815260040160405180910390fd5b835160005b81811015610dab5760006121a087838151811061217d5761217d615051565b60200260200101516001600160a01b031660009081526002602052604090205490565b905080600003612205576122008783815181106121bf576121bf615051565b60200260200101518784815181106121d9576121d9615051565b60200260200101518785815181106121f3576121f3615051565b6020026020010151613910565b6122ca565b600061221082613a9b565b905085838151811061222457612224615051565b6020908102919091010151815463ffffffff909116600160c01b0263ffffffff60c01b19909116178155845185908490811061226257612262615051565b60200260200101518160000160146101000a81548163ffffffff021916908363ffffffff1602179055506122c88884815181106122a1576122a1615051565b60200260200101518885815181106122bb576122bb615051565b6020026020010151613ab6565b505b5060010161215e565b6122db6120b5565b6001600160a01b0316336001600160a01b03161415801561230f57506004546001600160a01b0316158061230f5750333014155b1561232d57604051633b4e61ad60e01b815260040160405180910390fd5b6006546007546040516334392cbd60e21b81526001600160a01b039182166004820152838216602482015291169063d0e4b2f490604401600060405180830381600087803b15801561237e57600080fd5b505af1158015612392573d6000803e3d6000fd5b5050505050565b606060008001805480602002602001604051908101604052809291908181526020016000905b8282101561242957600084815260209081902060408051608081018252918501546001600160a01b038116835263ffffffff600160a01b8204811684860152600160c01b8204811692840192909252600160e01b90041660608201528252600190920191016123bf565b50505050905090565b6004546001600160a01b0316158061244a5750333014155b15612468576040516312ab28a760e11b815260040160405180910390fd5b61211961337c565b6004546000906001600160a01b03161580156124995750600354600160c01b900463ffffffff16155b905090565b6124a661334a565b6124ae612470565b6124cb576040516386e2123960e01b815260040160405180910390fd5b838180518251146124ef57604051631d3c4ecb60e31b815260040160405180910390fd5b6000805b835181101561252b5782818151811061250e5761250e615051565b602002602001015182612521919061507d565b91506001016124f3565b508034101561254d57604051631144943160e21b815260040160405180910390fd5b8651865181141580612560575080865114155b1561257e57604051631d3c4ecb60e31b815260040160405180910390fd5b63b85a2ce160e01b60005b82811015612631576000828a83815181106125a6576125a6615051565b60200260200101518a84815181106125c0576125c0615051565b6020026020010151604051602001612600939291906001600160e01b03199390931683526001600160a01b03918216602084015216604082015260600190565b604051602081830303815290604052905061262883828d85815181106112c3576112c3615051565b50600101612589565b50505050505050505050565b60008061264960005490565b905060005b81811015612744576000612661826138e8565b6040805160808101825291546001600160a01b038116835263ffffffff600160a01b820481166020850152600160c01b8204811692840192909252600160e01b900416606082018190529091501561273b57604051636018660f60e01b8152734bB8B77C13a17E9704c6212509ED0D572619e3b090636018660f906126ed90600090859060040161528d565b602060405180830381865af415801561270a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272e91906152a1565b612738908561507d565b93505b5060010161264e565b505090565b61275161334a565b612759612470565b612776576040516386e2123960e01b815260040160405180910390fd5b8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080870282810182019093528682529093508692508591829185019084908082843760009201919091525050825184511491506127fe905057604051631d3c4ecb60e31b815260040160405180910390fd5b6000805b835181101561283a5782818151811061281d5761281d615051565b602002602001015182612830919061507d565b9150600101612802565b508034101561285c57604051631144943160e21b815260040160405180910390fd5b61286461337c565b6040805163e4a7c60360e01b6020820181905291600091016115a3565b60405163c0c53f1d60e01b81526060908190734bB8B77C13a17E9704c6212509ED0D572619e3b09063c0c53f1d906128c09060009087906004016152ba565b600060405180830381865af41580156128dd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261290591908101906153d9565b9094909350915050565b6129176120b5565b6001600160a01b0316336001600160a01b03161415801561294b57506004546001600160a01b0316158061294b5750333014155b1561296957604051633b4e61ad60e01b815260040160405180910390fd5b600680546001600160a01b0319166001600160a01b03848116918217909255604051634463315560e11b815291831660048301526000916388c662aa90602401602060405180830381865afa1580156129c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ea919061516e565b90506001600160a01b038116612a1357604051630352b0d160e41b815260040160405180910390fd5b60065460405163708728eb60e11b81526001600160a01b038481166004830152600092169063e10e51d690602401602060405180830381865afa158015612a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a82919061516e565b90506001600160a01b0382163014801590612aa657506001600160a01b0381163014155b15612ac457604051633170a38d60e01b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0385811691821790925560408051928716835260208301919091527fc8d09d7710e05a8ef2f307dcf13f859ce7e661b3eee1a04a57c4d481758a6c1d910160405180910390a16109c3611ed9565b6004546001600160a01b03161580612b3f5750333014155b15612b5d576040516312ab28a760e11b815260040160405180910390fd5b611acf61337c565b600080612b7183610890565b604051636018660f60e01b8152909150734bB8B77C13a17E9704c6212509ED0D572619e3b090636018660f90612bae90600090859060040161528d565b602060405180830381865af4158015612bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bef91906152a1565b9392505050565b612bfe61334a565b6001600160a01b038116612c2d57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b612c3681613877565b50565b612c416120b5565b6001600160a01b0316336001600160a01b031614158015612c7557506004546001600160a01b03161580612c755750333014155b15612c9357604051633b4e61ad60e01b815260040160405180910390fd5b6001600160a01b038316612cba5760405163bb4bcc3b60e01b815260040160405180910390fd5b60038054640100000000600160e01b031916600160201b6001600160a01b0386811691820263ffffffff60c01b191692909217600160c01b63ffffffff871690810291909117909355600480546001600160a01b0319169285169283179055604080519182526020820193909352918201527f21ae9d1c05d009b6af15c73821748e22e498496e2b29672090c67ae892322d6f9060600160405180910390a1505050565b6003546060908490849063ffffffff808316600160c01b90920416141580612d9457506004546001600160a01b03838116911614155b80612dba5750600354600160201b90046001600160a01b0316336001600160a01b031614155b15612dd85760405163b36b498160e01b815260040160405180910390fd5b600084806020019051810190612dee919061544f565b90506060631541933960e31b6001600160e01b0319831601612e7d57600080600088806020019051810190612e23919061546a565b9350935093505084838383604051602401612e40939291906154f6565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152935061322a92505050565b63b05df5d760e01b6001600160e01b0319831601612f015760008087806020019051810190612eac9190615509565b9250925050838282604051602401612ec5929190614ead565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152925061322a915050565b6371a73aa360e01b6001600160e01b0319831601612f925760008060008089806020019051810190612f339190615572565b9450945094509450508584848484604051602401612f549493929190615622565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152945061322a9350505050565b631b5839fd60e01b6001600160e01b0319831601612fdc57506040805160048152602481019091526020810180516001600160e01b03166001600160e01b0319841617905261322a565b63723ea86f60e01b6001600160e01b0319831601613024576000808780602001905181019061300b919061565b565b9250925050838282604051602401612ec59291906156b1565b632fea4ffd60e11b6001600160e01b0319831601613053576000808780602001905181019061300b919061565b565b63024c7f2b60e21b6001600160e01b03198316016130bd5760008060008880602001905181019061308491906156d9565b6040516001600160a01b03808516602483015263ffffffff84166044830152821660648201529296509094509250869150608401612e40565b6347a5d31f60e01b6001600160e01b031983160161311657600080878060200190518101906130ec9190615735565b6040516001600160a01b038084166024830152821660448201529194509250859150606401612ec5565b6362847abb60e01b6001600160e01b031983160161319a576000868060200190518101906131449190615774565b6040516001600160a01b038216602482015290925084915060440160408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152915061322a9050565b631fc7f1d160e21b6001600160e01b03198316016131e457506040805160048152602481019091526020810180516001600160e01b03166001600160e01b0319841617905261322a565b63c8e4ad1d60e01b6001600160e01b031983160161322a57506040805160048152602481019091526020810180516001600160e01b03166001600160e01b031984161790525b600080306001600160a01b03168360405161324591906157a0565b6000604051808303816000865af19150503d8060008114613282576040519150601f19603f3d011682016040523d82523d6000602084013e613287565b606091505b5091509150836001600160e01b0319168963ffffffff168e7f1291b044e5e68ff17a19703d0775336ad7ec700ef5679fbd11bd0084af55baf3858e6040516132e492919091151582526001600160a01b0316602082015260400190565b60405180910390a49c9b505050505050505050505050565b6001600160a01b038116600090815260026020526040812054806000036133415760405163c6040d1d60e01b81526001600160a01b0384166004820152602401612c24565b612bef81613a9b565b336133536120b5565b6001600160a01b031614611acf5760405163118cdaa760e01b8152336004820152602401612c24565b42600061338860005490565b905060005b818110156134bd5760006133a0826138e8565b8054909150600090600160e01b900463ffffffff161561346c578154600090600160a01b900463ffffffff166133e4578254600160c01b900463ffffffff166133ee565b60035463ffffffff165b905060006133fc82886157bc565b845463ffffffff918216925060649161341d91600160e01b900416836157e0565b61342791906157f7565b84549093508390859060149061344b908490600160a01b900463ffffffff16615819565b92506101000a81548163ffffffff021916908363ffffffff16021790555050505b815460405163ffffffff831681526001600160a01b03909116907f780f517310a8481b4817e26f9d1a336e49e7522775e8e6b4fb22c73908be6ce69060200160405180910390a2505060010161338d565b506040805163ffffffff84168152602081018390527f896e364af402e453909cff1f8bb117d283d37a717e7cf4a5c5b88be2197fa09f910160405180910390a1506003805463ffffffff191663ffffffff92909216919091179055565b60008061352684612881565b600654600754604051637677856760e11b81529395509193506001600160a01b039081169263ecef0ace92613565921690869086908990600401615836565b600060405180830381600087803b15801561357f57600080fd5b505af1158015613593573d6000803e3d6000fd5b5050505060008282856040516020016135ae93929190615884565b60408051601f1981840301815282825280516020918201206007546001600160a01b0316845290830181905263ffffffff87168383015290519092507fd4b7a01ea5a8b6ac341311c6e426730790e70b6ca9c8d9adee240379b5e81c289181900360600190a15050505050565b60005b825181101561239257613658858585848151811061363e5761363e615051565b60200260200101518585815181106112dd576112dd615051565b60010161361e565b613668613dca565b6001600160a01b03861661368f5760405163bb4bcc3b60e01b815260040160405180910390fd5b60006001600160a01b038216156136a657816136a8565b335b90506136b381613e13565b6001600160a01b0382166136f0576001600160a01b0385166136e857604051635413b8d760e11b815260040160405180910390fd5b6136f0611abd565b6136fd8787878787613e24565b50505050505050565b8251825181141580613719575080825114155b1561373757604051630533bc9360e21b815260040160405180910390fd5b60005b818110156123925761378b85828151811061375757613757615051565b602002602001015185838151811061377157613771615051565b60200260200101518584815181106121f3576121f3615051565b60010161373a565b8151815181146137b657604051630533bc9360e21b815260040160405180910390fd5b60005b818110156109c3576137f08482815181106137d6576137d6615051565b60200260200101518483815181106122bb576122bb615051565b6001016137b9565b6000613805838584613ea9565b63ffffffff8416600081815260056020908152604091829020549151600160201b9092046001600160a01b031682529293506001600160e01b031988169284917f20ffb62aa5e31e4b559317e8af8f877e19a9126fd6ff1fee93bcf06e59d385cc910160405180910390a45050505050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b60008060000182815481106138ff576138ff615051565b906000526020600020019050919050565b60085460405163f3ae241560e01b81523060048201526001600160a01b039091169063f3ae241590602401602060405180830381865afa158015613958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061397c9190615909565b61399c576040516001622e7c1b60e21b0319815260040160405180910390fd5b6139a7838383613fac565b6040805160018082528183019092526000916020808301908036833701905050905083816000815181106139dd576139dd615051565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905060095481600081518110613a3057613a30615051565b6020908102919091010152600854604051632c78fd0360e21b81526001600160a01b039091169063b1e3f40c90613a6d9085908590600401615926565b600060405180830381600087803b158015613a8757600080fd5b505af1158015611623573d6000803e3d6000fd5b6000613ab0613aab60018461527a565b6138e8565b92915050565b60085460405163f3ae241560e01b81523060048201526001600160a01b039091169063f3ae241590602401602060405180830381865afa158015613afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b229190615909565b613b42576040516001622e7c1b60e21b0319815260040160405180910390fd5b613b4c82826141c3565b604080516001808252818301909252600091602080830190803683370190505090508281600081518110613b8257613b82615051565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905060095481600081518110613bd557613bd5615051565b60200260200101818152505060008363ffffffff16118015613cd75750600860009054906101000a90046001600160a01b03166001600160a01b0316638009ba1f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c69919061516e565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a0823190602401602060405180830381865afa158015613cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cd591906152a1565b155b15613d4557600854604051632c78fd0360e21b81526001600160a01b039091169063b1e3f40c90613d0e9085908590600401615926565b600060405180830381600087803b158015613d2857600080fd5b505af1158015613d3c573d6000803e3d6000fd5b505050506109c3565b63ffffffff8316158015613d5b5750600a5460ff165b156109c35760085460405163262949f360e21b81526001600160a01b03909116906398a527cc90613d929085908590600401615926565b600060405180830381600087803b158015613dac57600080fd5b505af1158015613dc0573d6000803e3d6000fd5b5050505050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16611acf57604051631afcd79f60e31b815260040160405180910390fd5b613e1b613dca565b612c368161428c565b613e2c613dca565b6003805463ffffffff909516600160c01b0263ffffffff60c01b196001600160a01b03978816600160201b0216640100000000600160e01b03199096169590951794909417909355600480549285166001600160a01b03199384161790556006805491851691831691909117905560078054929093169116179055565b63ffffffff83166000908152600560205260408120548490600160201b90046001600160a01b0316613ef557604051628adb6d60e11b815263ffffffff82166004820152602401612c24565b60035463ffffffff808716600090815260056020526040808220805460019091015491516345560b5d60e11b81526001600160a01b03600160201b96879004811696638aac16ba968b96613f6096918616959290920483169391921690829081908e90600401615970565b60206040518083038185885af1158015613f7e573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190613fa391906152a1565b95945050505050565b6001600160a01b038316613fde57604051633899e57b60e01b81526001600160a01b0384166004820152602401612c24565b6001600160a01b0383166000908152600260205260409020541561402057604051636822fa9960e11b81526001600160a01b0384166004820152602401612c24565b606463ffffffff8316111561405f5760405163424f515b60e11b81526001600160a01b038416600482015263ffffffff83166024820152604401612c24565b428163ffffffff16111561409d5760405163faac476360e01b81526001600160a01b038416600482015263ffffffff82166024820152604401612c24565b604080516080810182526001600160a01b038086168083526000602080850182815263ffffffff8881168789019081528a82166060890190815285546001818101885587805299517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390910180549551935192518516600160e01b026001600160e01b03938616600160c01b02939093166001600160c01b0394909516600160a01b026001600160c01b031990961691909916179390931716171790935583548401938490558181526002909252908390209190915590517f13ca1f9a974ca1b85618843282dc1981c63a62c389aa5cf6e4a31937f8434e73906141b6908490869063ffffffff92831681529116602082015260400190565b60405180910390a2505050565b606463ffffffff821611156142025760405163424f515b60e11b81526001600160a01b038316600482015263ffffffff82166024820152604401612c24565b600061420d836132fc565b805463ffffffff848116600160e01b81026001600160e01b039093169290921780845560408051938452600160c01b820483166020850152600160a01b909104909116908201529091506001600160a01b038416907f59f55668c694024ea61bdb5bb12ea8897197f9d9825fa7bee1195e263b644727906060016141b6565b612bfe613dca565b6001600160a01b0381168114612c3657600080fd5b6000602082840312156142bb57600080fd5b8135612bef81614294565b80516001600160a01b0316825260208082015163ffffffff9081169184019190915260408083015182169084015260609182015116910152565b60808101613ab082846142c6565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561434c5761434c61430e565b604052919050565b60006001600160401b0382111561436d5761436d61430e565b5060051b60200190565b600082601f83011261438857600080fd5b8135602061439d61439883614354565b614324565b82815260059290921b840181019181810190868411156143bc57600080fd5b8286015b848110156143e05780356143d381614294565b83529183019183016143c0565b509695505050505050565b63ffffffff81168114612c3657600080fd5b60008083601f84011261440f57600080fd5b5081356001600160401b0381111561442657600080fd5b6020830191508360208260051b850101111561444157600080fd5b9250929050565b6000806000806000806080878903121561446157600080fd5b86356001600160401b038082111561447857600080fd5b6144848a838b01614377565b975060208901359150614496826143eb565b909550604088013590808211156144ac57600080fd5b6144b88a838b016143fd565b909650945060608901359150808211156144d157600080fd5b506144de89828a016143fd565b979a9699509497509295939492505050565b600082601f83011261450157600080fd5b81356001600160401b0381111561451a5761451a61430e565b61452d601f8201601f1916602001614324565b81815284602083860101111561454257600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561457157600080fd5b81356001600160401b0381111561458757600080fd5b614593848285016144f0565b949350505050565b600082601f8301126145ac57600080fd5b813560206145bc61439883614354565b82815260059290921b840181019181810190868411156145db57600080fd5b8286015b848110156143e05780356145f2816143eb565b83529183019183016145df565b600080600080600080600060a0888a03121561461a57600080fd5b87356001600160401b038082111561463157600080fd5b61463d8b838c01614377565b985060208a013591508082111561465357600080fd5b61465f8b838c0161459b565b975060408a013591508082111561467557600080fd5b6146818b838c0161459b565b965060608a013591508082111561469757600080fd5b6146a38b838c016143fd565b909650945060808a01359150808211156146bc57600080fd5b506146c98a828b016143fd565b989b979a50959850939692959293505050565b600080604083850312156146ef57600080fd5b82356001600160401b038082111561470657600080fd5b61471286838701614377565b9350602085013591508082111561472857600080fd5b506147358582860161459b565b9150509250929050565b6000806000806000806080878903121561475857600080fd5b86356001600160401b038082111561476f57600080fd5b61477b8a838b01614377565b9750602089013591508082111561479157600080fd5b61479d8a838b0161459b565b965060408901359150808211156144ac57600080fd5b600082601f8301126147c457600080fd5b813560206147d461439883614354565b82815260059290921b840181019181810190868411156147f357600080fd5b8286015b848110156143e057803583529183019183016147f7565b600080600080600060a0868803121561482657600080fd5b85356001600160401b038082111561483d57600080fd5b61484989838a0161459b565b9650602088013591508082111561485f57600080fd5b61486b89838a01614377565b9550604088013591508082111561488157600080fd5b61488d89838a0161459b565b945060608801359150808211156148a357600080fd5b6148af89838a01614377565b935060808801359150808211156148c557600080fd5b506148d2888289016147b3565b9150509295509295909350565b6000806000606084860312156148f457600080fd5b83356001600160401b038082111561490b57600080fd5b61491787838801614377565b9450602086013591508082111561492d57600080fd5b6149398783880161459b565b9350604086013591508082111561494f57600080fd5b5061495c8682870161459b565b9150509250925092565b6000806000806040858703121561497c57600080fd5b84356001600160401b038082111561499357600080fd5b61499f888389016143fd565b909650945060208701359150808211156149b857600080fd5b506149c5878288016143fd565b95989497509550505050565b6000602082840312156149e357600080fd5b81356001600160401b038111156149f957600080fd5b61459384828501614377565b600081518084526020808501945080840160005b83811015614a3b57815163ffffffff1687529582019590820190600101614a19565b509495945050505050565b606081526000614a596060830186614a05565b8281036020840152614a6b8186614a05565b90508281036040840152614a7f8185614a05565b9695505050505050565b600080600060608486031215614a9e57600080fd5b83356001600160401b0380821115614ab557600080fd5b614ac18783880161459b565b94506020860135915080821115614ad757600080fd5b614ae387838801614377565b93506040860135915080821115614af957600080fd5b5061495c868287016147b3565b6000808284036080811215614b1a57600080fd5b8335614b25816143eb565b92506060601f1982011215614b3957600080fd5b50604051606081018181106001600160401b0382111715614b5c57614b5c61430e565b6040526020840135614b6d816143eb565b81526040840135614b7d81614294565b60208201526060840135614b9081614294565b6040820152919491935090915050565b600080600080600060608688031215614bb857600080fd5b85356001600160401b0380821115614bcf57600080fd5b614bdb89838a01614377565b96506020880135915080821115614bf157600080fd5b614bfd89838a016143fd565b90965094506040880135915080821115614c1657600080fd5b50614c23888289016143fd565b969995985093965092949392505050565b8015158114612c3657600080fd5b60008060408385031215614c5557600080fd5b823591506020830135614c6781614c34565b809150509250929050565b60008060408385031215614c8557600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015614cd657614cc38385516142c6565b9284019260809290920191600101614cb0565b50909695505050505050565b60008060408385031215614cf557600080fd5b82356001600160401b03811115614d0b57600080fd5b614d1785828601614377565b9250506020830135614c67816143eb565b60008060008060808587031215614d3e57600080fd5b84356001600160401b0380821115614d5557600080fd5b614d6188838901614377565b95506020870135915080821115614d7757600080fd5b614d838883890161459b565b94506040870135915080821115614d9957600080fd5b614da58883890161459b565b93506060870135915080821115614dbb57600080fd5b50614dc88782880161459b565b91505092959194509250565b60008060008060808587031215614dea57600080fd5b84356001600160401b0380821115614e0157600080fd5b614e0d8883890161459b565b95506020870135915080821115614e2357600080fd5b614e2f88838901614377565b94506040870135915080821115614e4557600080fd5b614e5188838901614377565b93506060870135915080821115614e6757600080fd5b50614dc8878288016147b3565b600081518084526020808501945080840160005b83811015614a3b5781516001600160a01b031687529582019590820190600101614e88565b604081526000614ec06040830185614e74565b8281036020840152613fa38185614a05565b60008060408385031215614ee557600080fd5b8235614ef081614294565b91506020830135614c6781614294565b600060208284031215614f1257600080fd5b8135612bef816143eb565b600080600060608486031215614f3257600080fd5b8335614f3d81614294565b92506020840135614f4d816143eb565b91506040840135614f5d81614294565b809150509250925092565b60008060008060008060c08789031215614f8157600080fd5b86359550602087013594506040870135614f9a81614294565b93506060870135614faa81614294565b92506080870135614fba816143eb565b915060a08701356001600160401b03811115614fd557600080fd5b614fe189828a016144f0565b9150509295509295509295565b60005b83811015615009578181015183820152602001614ff1565b50506000910152565b6000815180845261502a816020860160208601614fee565b601f01601f19169290920160200192915050565b602081526000612bef6020830184615012565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115613ab057613ab0615067565b63ffffffff60e01b841681526060602082015260006150b26060830185614e74565b905063ffffffff83166040830152949350505050565b600080600080600080600080610100898b0312156150e557600080fd5b88516150f081614294565b60208a0151909850615101816143eb565b60408a015190975061511281614294565b60608a015190965061512381614294565b60808a015190955061513481614294565b60a08a015190945061514581614294565b60c08a015160e08b0151919450925061515d81614c34565b809150509295985092959890939650565b60006020828403121561518057600080fd5b8151612bef81614294565b63ffffffff60e01b851681526080602082015260006151ad6080830186614e74565b82810360408401526151bf8186614a05565b905082810360608401526151d38185614a05565b979650505050505050565b63ffffffff60e01b841681526060602082015260006152006060830185614e74565b8281036040840152614a7f8185614a05565b63ffffffff60e01b8616815260a06020820152600061523460a0830187614e74565b82810360408401526152468187614a05565b9050828103606084015261525a8186614a05565b9050828103608084015261526e8185614a05565b98975050505050505050565b81810381811115613ab057613ab0615067565b82815260a08101612bef60208301846142c6565b6000602082840312156152b357600080fd5b5051919050565b6000604082018483526020604081850152818551808452606086019150828701935060005b818110156153045784516001600160a01b0316835293830193918301916001016152df565b5090979650505050505050565b600082601f83011261532257600080fd5b8151602061533261439883614354565b82815260059290921b8401810191818101908684111561535157600080fd5b8286015b848110156143e057805161536881614294565b8352918301918301615355565b600082601f83011261538657600080fd5b8151602061539661439883614354565b82815260059290921b840181019181810190868411156153b557600080fd5b8286015b848110156143e05780516153cc816143eb565b83529183019183016153b9565b600080604083850312156153ec57600080fd5b82516001600160401b038082111561540357600080fd5b61540f86838701615311565b9350602085015191508082111561542557600080fd5b5061473585828601615375565b80516001600160e01b03198116811461544a57600080fd5b919050565b60006020828403121561546157600080fd5b612bef82615432565b6000806000806080858703121561548057600080fd5b61548985615432565b935060208501516001600160401b03808211156154a557600080fd5b6154b188838901615311565b945060408701519150808211156154c757600080fd5b6154d388838901615375565b935060608701519150808211156154e957600080fd5b50614dc887828801615375565b606081526000614a596060830186614e74565b60008060006060848603121561551e57600080fd5b61552784615432565b925060208401516001600160401b038082111561554357600080fd5b61554f87838801615311565b9350604086015191508082111561556557600080fd5b5061495c86828701615375565b600080600080600060a0868803121561558a57600080fd5b61559386615432565b945060208601516001600160401b03808211156155af57600080fd5b6155bb89838a01615311565b955060408801519150808211156155d157600080fd5b6155dd89838a01615375565b945060608801519150808211156155f357600080fd5b6155ff89838a01615375565b9350608088015191508082111561561557600080fd5b506148d288828901615375565b6080815260006156356080830187614e74565b82810360208401526156478187614a05565b905082810360408401526151bf8186614a05565b60008060006060848603121561567057600080fd5b61567984615432565b925060208401516001600160401b0381111561569457600080fd5b6156a086828701615311565b9250506040840151614f5d816143eb565b6040815260006156c46040830185614e74565b905063ffffffff831660208301529392505050565b600080600080608085870312156156ef57600080fd5b6156f885615432565b9350602085015161570881614294565b6040860151909350615719816143eb565b606086015190925061572a81614294565b939692955090935050565b60008060006060848603121561574a57600080fd5b61575384615432565b9250602084015161576381614294565b6040850151909250614f5d81614294565b6000806040838503121561578757600080fd5b61579083615432565b91506020830151614c6781614294565b600082516157b2818460208701614fee565b9190910192915050565b63ffffffff8281168282160390808211156157d9576157d9615067565b5092915050565b8082028115828204841417613ab057613ab0615067565b60008261581457634e487b7160e01b600052601260045260246000fd5b500490565b63ffffffff8181168382160190808211156157d9576157d9615067565b6001600160a01b038516815260806020820181905260009061585a90830186614e74565b828103604084015261586c8186614a05565b91505063ffffffff8316606083015295945050505050565b835160009082906020808801845b838110156158b75781516001600160a01b031685529382019390820190600101615892565b5050865181880193925060005b818110156158e657845163ffffffff16845293820193928201926001016158c4565b50505060e09490941b6001600160e01b0319168452505060049091019392505050565b60006020828403121561591b57600080fd5b8151612bef81614c34565b6040815260006159396040830185614e74565b82810360208481019190915284518083528582019282019060005b8181101561530457845183529383019391830191600101615954565b63ffffffff881681526001600160a01b0387811660208301528681166040830152851660608201526080810184905260a0810183905260e060c082018190526000906159be90830184615012565b999850505050505050505056fea164736f6c6343000815000a",
  "deployedBytecode": "$c9b295241042fdfde6acd02a7cacb6a640$__90636018660f906126ed90600090859060040161528d565b602060405180830381865af415801561270a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272e91906152a1565b612738908561507d565b93505b5060010161264e565b505090565b61275161334a565b612759612470565b612776576040516386e2123960e01b815260040160405180910390fd5b8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080870282810182019093528682529093508692508591829185019084908082843760009201919091525050825184511491506127fe905057604051631d3c4ecb60e31b815260040160405180910390fd5b6000805b835181101561283a5782818151811061281d5761281d615051565b602002602001015182612830919061507d565b9150600101612802565b508034101561285c57604051631144943160e21b815260040160405180910390fd5b61286461337c565b6040805163e4a7c60360e01b6020820181905291600091016115a3565b60405163c0c53f1d60e01b8152606090819073__$c9b295241042fdfde6acd02a7cacb6a640$__9063c0c53f1d906128c09060009087906004016152ba565b600060405180830381865af41580156128dd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261290591908101906153d9565b9094909350915050565b6129176120b5565b6001600160a01b0316336001600160a01b03161415801561294b57506004546001600160a01b0316158061294b5750333014155b1561296957604051633b4e61ad60e01b815260040160405180910390fd5b600680546001600160a01b0319166001600160a01b03848116918217909255604051634463315560e11b815291831660048301526000916388c662aa90602401602060405180830381865afa1580156129c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ea919061516e565b90506001600160a01b038116612a1357604051630352b0d160e41b815260040160405180910390fd5b60065460405163708728eb60e11b81526001600160a01b038481166004830152600092169063e10e51d690602401602060405180830381865afa158015612a5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a82919061516e565b90506001600160a01b0382163014801590612aa657506001600160a01b0381163014155b15612ac457604051633170a38d60e01b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0385811691821790925560408051928716835260208301919091527fc8d09d7710e05a8ef2f307dcf13f859ce7e661b3eee1a04a57c4d481758a6c1d910160405180910390a16109c3611ed9565b6004546001600160a01b03161580612b3f5750333014155b15612b5d576040516312ab28a760e11b815260040160405180910390fd5b611acf61337c565b600080612b7183610890565b604051636018660f60e01b815290915073__$c9b295241042fdfde6acd02a7cacb6a640$__90636018660f90612bae90600090859060040161528d565b602060405180830381865af4158015612bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bef91906152a1565b9392505050565b612bfe61334a565b6001600160a01b038116612c2d57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b612c3681613877565b50565b612c416120b5565b6001600160a01b0316336001600160a01b031614158015612c7557506004546001600160a01b03161580612c755750333014155b15612c9357604051633b4e61ad60e01b815260040160405180910390fd5b6001600160a01b038316612cba5760405163bb4bcc3b60e01b815260040160405180910390fd5b60038054640100000000600160e01b031916600160201b6001600160a01b0386811691820263ffffffff60c01b191692909217600160c01b63ffffffff871690810291909117909355600480546001600160a01b0319169285169283179055604080519182526020820193909352918201527f21ae9d1c05d009b6af15c73821748e22e498496e2b29672090c67ae892322d6f9060600160405180910390a1505050565b6003546060908490849063ffffffff808316600160c01b90920416141580612d9457506004546001600160a01b03838116911614155b80612dba5750600354600160201b90046001600160a01b0316336001600160a01b031614155b15612dd85760405163b36b498160e01b815260040160405180910390fd5b600084806020019051810190612dee919061544f565b90506060631541933960e31b6001600160e01b0319831601612e7d57600080600088806020019051810190612e23919061546a565b9350935093505084838383604051602401612e40939291906154f6565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152935061322a92505050565b63b05df5d760e01b6001600160e01b0319831601612f015760008087806020019051810190612eac9190615509565b9250925050838282604051602401612ec5929190614ead565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152925061322a915050565b6371a73aa360e01b6001600160e01b0319831601612f925760008060008089806020019051810190612f339190615572565b9450945094509450508584848484604051602401612f549493929190615622565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152945061322a9350505050565b631b5839fd60e01b6001600160e01b0319831601612fdc57506040805160048152602481019091526020810180516001600160e01b03166001600160e01b0319841617905261322a565b63723ea86f60e01b6001600160e01b0319831601613024576000808780602001905181019061300b919061565b565b9250925050838282604051602401612ec59291906156b1565b632fea4ffd60e11b6001600160e01b0319831601613053576000808780602001905181019061300b919061565b565b63024c7f2b60e21b6001600160e01b03198316016130bd5760008060008880602001905181019061308491906156d9565b6040516001600160a01b03808516602483015263ffffffff84166044830152821660648201529296509094509250869150608401612e40565b6347a5d31f60e01b6001600160e01b031983160161311657600080878060200190518101906130ec9190615735565b6040516001600160a01b038084166024830152821660448201529194509250859150606401612ec5565b6362847abb60e01b6001600160e01b031983160161319a576000868060200190518101906131449190615774565b6040516001600160a01b038216602482015290925084915060440160408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152915061322a9050565b631fc7f1d160e21b6001600160e01b03198316016131e457506040805160048152602481019091526020810180516001600160e01b03166001600160e01b0319841617905261322a565b63c8e4ad1d60e01b6001600160e01b031983160161322a57506040805160048152602481019091526020810180516001600160e01b03166001600160e01b031984161790525b600080306001600160a01b03168360405161324591906157a0565b6000604051808303816000865af19150503d8060008114613282576040519150601f19603f3d011682016040523d82523d6000602084013e613287565b606091505b5091509150836001600160e01b0319168963ffffffff168e7f1291b044e5e68ff17a19703d0775336ad7ec700ef5679fbd11bd0084af55baf3858e6040516132e492919091151582526001600160a01b0316602082015260400190565b60405180910390a49c9b505050505050505050505050565b6001600160a01b038116600090815260026020526040812054806000036133415760405163c6040d1d60e01b81526001600160a01b0384166004820152602401612c24565b612bef81613a9b565b336133536120b5565b6001600160a01b031614611acf5760405163118cdaa760e01b8152336004820152602401612c24565b42600061338860005490565b905060005b818110156134bd5760006133a0826138e8565b8054909150600090600160e01b900463ffffffff161561346c578154600090600160a01b900463ffffffff166133e4578254600160c01b900463ffffffff166133ee565b60035463ffffffff165b905060006133fc82886157bc565b845463ffffffff918216925060649161341d91600160e01b900416836157e0565b61342791906157f7565b84549093508390859060149061344b908490600160a01b900463ffffffff16615819565b92506101000a81548163ffffffff021916908363ffffffff16021790555050505b815460405163ffffffff831681526001600160a01b03909116907f780f517310a8481b4817e26f9d1a336e49e7522775e8e6b4fb22c73908be6ce69060200160405180910390a2505060010161338d565b506040805163ffffffff84168152602081018390527f896e364af402e453909cff1f8bb117d283d37a717e7cf4a5c5b88be2197fa09f910160405180910390a1506003805463ffffffff191663ffffffff92909216919091179055565b60008061352684612881565b600654600754604051637677856760e11b81529395509193506001600160a01b039081169263ecef0ace92613565921690869086908990600401615836565b600060405180830381600087803b15801561357f57600080fd5b505af1158015613593573d6000803e3d6000fd5b5050505060008282856040516020016135ae93929190615884565b60408051601f1981840301815282825280516020918201206007546001600160a01b0316845290830181905263ffffffff87168383015290519092507fd4b7a01ea5a8b6ac341311c6e426730790e70b6ca9c8d9adee240379b5e81c289181900360600190a15050505050565b60005b825181101561239257613658858585848151811061363e5761363e615051565b60200260200101518585815181106112dd576112dd615051565b60010161361e565b613668613dca565b6001600160a01b03861661368f5760405163bb4bcc3b60e01b815260040160405180910390fd5b60006001600160a01b038216156136a657816136a8565b335b90506136b381613e13565b6001600160a01b0382166136f0576001600160a01b0385166136e857604051635413b8d760e11b815260040160405180910390fd5b6136f0611abd565b6136fd8787878787613e24565b50505050505050565b8251825181141580613719575080825114155b1561373757604051630533bc9360e21b815260040160405180910390fd5b60005b818110156123925761378b85828151811061375757613757615051565b602002602001015185838151811061377157613771615051565b60200260200101518584815181106121f3576121f3615051565b60010161373a565b8151815181146137b657604051630533bc9360e21b815260040160405180910390fd5b60005b818110156109c3576137f08482815181106137d6576137d6615051565b60200260200101518483815181106122bb576122bb615051565b6001016137b9565b6000613805838584613ea9565b63ffffffff8416600081815260056020908152604091829020549151600160201b9092046001600160a01b031682529293506001600160e01b031988169284917f20ffb62aa5e31e4b559317e8af8f877e19a9126fd6ff1fee93bcf06e59d385cc910160405180910390a45050505050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b60008060000182815481106138ff576138ff615051565b906000526020600020019050919050565b60085460405163f3ae241560e01b81523060048201526001600160a01b039091169063f3ae241590602401602060405180830381865afa158015613958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061397c9190615909565b61399c576040516001622e7c1b60e21b0319815260040160405180910390fd5b6139a7838383613fac565b6040805160018082528183019092526000916020808301908036833701905050905083816000815181106139dd576139dd615051565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905060095481600081518110613a3057613a30615051565b6020908102919091010152600854604051632c78fd0360e21b81526001600160a01b039091169063b1e3f40c90613a6d9085908590600401615926565b600060405180830381600087803b158015613a8757600080fd5b505af1158015611623573d6000803e3d6000fd5b6000613ab0613aab60018461527a565b6138e8565b92915050565b60085460405163f3ae241560e01b81523060048201526001600160a01b039091169063f3ae241590602401602060405180830381865afa158015613afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b229190615909565b613b42576040516001622e7c1b60e21b0319815260040160405180910390fd5b613b4c82826141c3565b604080516001808252818301909252600091602080830190803683370190505090508281600081518110613b8257613b82615051565b6001600160a01b03929092166020928302919091019091015260408051600180825281830190925260009181602001602082028036833701905050905060095481600081518110613bd557613bd5615051565b60200260200101818152505060008363ffffffff16118015613cd75750600860009054906101000a90046001600160a01b03166001600160a01b0316638009ba1f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c69919061516e565b6040516370a0823160e01b81526001600160a01b03868116600483015291909116906370a0823190602401602060405180830381865afa158015613cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cd591906152a1565b155b15613d4557600854604051632c78fd0360e21b81526001600160a01b039091169063b1e3f40c90613d0e9085908590600401615926565b600060405180830381600087803b158015613d2857600080fd5b505af1158015613d3c573d6000803e3d6000fd5b505050506109c3565b63ffffffff8316158015613d5b5750600a5460ff165b156109c35760085460405163262949f360e21b81526001600160a01b03909116906398a527cc90613d929085908590600401615926565b600060405180830381600087803b158015613dac57600080fd5b505af1158015613dc0573d6000803e3d6000fd5b5050505050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff16611acf57604051631afcd79f60e31b815260040160405180910390fd5b613e1b613dca565b612c368161428c565b613e2c613dca565b6003805463ffffffff909516600160c01b0263ffffffff60c01b196001600160a01b03978816600160201b0216640100000000600160e01b03199096169590951794909417909355600480549285166001600160a01b03199384161790556006805491851691831691909117905560078054929093169116179055565b63ffffffff83166000908152600560205260408120548490600160201b90046001600160a01b0316613ef557604051628adb6d60e11b815263ffffffff82166004820152602401612c24565b60035463ffffffff808716600090815260056020526040808220805460019091015491516345560b5d60e11b81526001600160a01b03600160201b96879004811696638aac16ba968b96613f6096918616959290920483169391921690829081908e90600401615970565b60206040518083038185885af1158015613f7e573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190613fa391906152a1565b95945050505050565b6001600160a01b038316613fde57604051633899e57b60e01b81526001600160a01b0384166004820152602401612c24565b6001600160a01b0383166000908152600260205260409020541561402057604051636822fa9960e11b81526001600160a01b0384166004820152602401612c24565b606463ffffffff8316111561405f5760405163424f515b60e11b81526001600160a01b038416600482015263ffffffff83166024820152604401612c24565b428163ffffffff16111561409d5760405163faac476360e01b81526001600160a01b038416600482015263ffffffff82166024820152604401612c24565b604080516080810182526001600160a01b038086168083526000602080850182815263ffffffff8881168789019081528a82166060890190815285546001818101885587805299517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390910180549551935192518516600160e01b026001600160e01b03938616600160c01b02939093166001600160c01b0394909516600160a01b026001600160c01b031990961691909916179390931716171790935583548401938490558181526002909252908390209190915590517f13ca1f9a974ca1b85618843282dc1981c63a62c389aa5cf6e4a31937f8434e73906141b6908490869063ffffffff92831681529116602082015260400190565b60405180910390a2505050565b606463ffffffff821611156142025760405163424f515b60e11b81526001600160a01b038316600482015263ffffffff82166024820152604401612c24565b600061420d836132fc565b805463ffffffff848116600160e01b81026001600160e01b039093169290921780845560408051938452600160c01b820483166020850152600160a01b909104909116908201529091506001600160a01b038416907f59f55668c694024ea61bdb5bb12ea8897197f9d9825fa7bee1195e263b644727906060016141b6565b612bfe613dca565b6001600160a01b0381168114612c3657600080fd5b6000602082840312156142bb57600080fd5b8135612bef81614294565b80516001600160a01b0316825260208082015163ffffffff9081169184019190915260408083015182169084015260609182015116910152565b60808101613ab082846142c6565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561434c5761434c61430e565b604052919050565b60006001600160401b0382111561436d5761436d61430e565b5060051b60200190565b600082601f83011261438857600080fd5b8135602061439d61439883614354565b614324565b82815260059290921b840181019181810190868411156143bc57600080fd5b8286015b848110156143e05780356143d381614294565b83529183019183016143c0565b509695505050505050565b63ffffffff81168114612c3657600080fd5b60008083601f84011261440f57600080fd5b5081356001600160401b0381111561442657600080fd5b6020830191508360208260051b850101111561444157600080fd5b9250929050565b6000806000806000806080878903121561446157600080fd5b86356001600160401b038082111561447857600080fd5b6144848a838b01614377565b975060208901359150614496826143eb565b909550604088013590808211156144ac57600080fd5b6144b88a838b016143fd565b909650945060608901359150808211156144d157600080fd5b506144de89828a016143fd565b979a9699509497509295939492505050565b600082601f83011261450157600080fd5b81356001600160401b0381111561451a5761451a61430e565b61452d601f8201601f1916602001614324565b81815284602083860101111561454257600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561457157600080fd5b81356001600160401b0381111561458757600080fd5b614593848285016144f0565b949350505050565b600082601f8301126145ac57600080fd5b813560206145bc61439883614354565b82815260059290921b840181019181810190868411156145db57600080fd5b8286015b848110156143e05780356145f2816143eb565b83529183019183016145df565b600080600080600080600060a0888a03121561461a57600080fd5b87356001600160401b038082111561463157600080fd5b61463d8b838c01614377565b985060208a013591508082111561465357600080fd5b61465f8b838c0161459b565b975060408a013591508082111561467557600080fd5b6146818b838c0161459b565b965060608a013591508082111561469757600080fd5b6146a38b838c016143fd565b909650945060808a01359150808211156146bc57600080fd5b506146c98a828b016143fd565b989b979a50959850939692959293505050565b600080604083850312156146ef57600080fd5b82356001600160401b038082111561470657600080fd5b61471286838701614377565b9350602085013591508082111561472857600080fd5b506147358582860161459b565b9150509250929050565b6000806000806000806080878903121561475857600080fd5b86356001600160401b038082111561476f57600080fd5b61477b8a838b01614377565b9750602089013591508082111561479157600080fd5b61479d8a838b0161459b565b965060408901359150808211156144ac57600080fd5b600082601f8301126147c457600080fd5b813560206147d461439883614354565b82815260059290921b840181019181810190868411156147f357600080fd5b8286015b848110156143e057803583529183019183016147f7565b600080600080600060a0868803121561482657600080fd5b85356001600160401b038082111561483d57600080fd5b61484989838a0161459b565b9650602088013591508082111561485f57600080fd5b61486b89838a01614377565b9550604088013591508082111561488157600080fd5b61488d89838a0161459b565b945060608801359150808211156148a357600080fd5b6148af89838a01614377565b935060808801359150808211156148c557600080fd5b506148d2888289016147b3565b9150509295509295909350565b6000806000606084860312156148f457600080fd5b83356001600160401b038082111561490b57600080fd5b61491787838801614377565b9450602086013591508082111561492d57600080fd5b6149398783880161459b565b9350604086013591508082111561494f57600080fd5b5061495c8682870161459b565b9150509250925092565b6000806000806040858703121561497c57600080fd5b84356001600160401b038082111561499357600080fd5b61499f888389016143fd565b909650945060208701359150808211156149b857600080fd5b506149c5878288016143fd565b95989497509550505050565b6000602082840312156149e357600080fd5b81356001600160401b038111156149f957600080fd5b61459384828501614377565b600081518084526020808501945080840160005b83811015614a3b57815163ffffffff1687529582019590820190600101614a19565b509495945050505050565b606081526000614a596060830186614a05565b8281036020840152614a6b8186614a05565b90508281036040840152614a7f8185614a05565b9695505050505050565b600080600060608486031215614a9e57600080fd5b83356001600160401b0380821115614ab557600080fd5b614ac18783880161459b565b94506020860135915080821115614ad757600080fd5b614ae387838801614377565b93506040860135915080821115614af957600080fd5b5061495c868287016147b3565b6000808284036080811215614b1a57600080fd5b8335614b25816143eb565b92506060601f1982011215614b3957600080fd5b50604051606081018181106001600160401b0382111715614b5c57614b5c61430e565b6040526020840135614b6d816143eb565b81526040840135614b7d81614294565b60208201526060840135614b9081614294565b6040820152919491935090915050565b600080600080600060608688031215614bb857600080fd5b85356001600160401b0380821115614bcf57600080fd5b614bdb89838a01614377565b96506020880135915080821115614bf157600080fd5b614bfd89838a016143fd565b90965094506040880135915080821115614c1657600080fd5b50614c23888289016143fd565b969995985093965092949392505050565b8015158114612c3657600080fd5b60008060408385031215614c5557600080fd5b823591506020830135614c6781614c34565b809150509250929050565b60008060408385031215614c8557600080fd5b50508035926020909101359150565b6020808252825182820181905260009190848201906040850190845b81811015614cd657614cc38385516142c6565b9284019260809290920191600101614cb0565b50909695505050505050565b60008060408385031215614cf557600080fd5b82356001600160401b03811115614d0b57600080fd5b614d1785828601614377565b9250506020830135614c67816143eb565b60008060008060808587031215614d3e57600080fd5b84356001600160401b0380821115614d5557600080fd5b614d6188838901614377565b95506020870135915080821115614d7757600080fd5b614d838883890161459b565b94506040870135915080821115614d9957600080fd5b614da58883890161459b565b93506060870135915080821115614dbb57600080fd5b50614dc88782880161459b565b91505092959194509250565b60008060008060808587031215614dea57600080fd5b84356001600160401b0380821115614e0157600080fd5b614e0d8883890161459b565b95506020870135915080821115614e2357600080fd5b614e2f88838901614377565b94506040870135915080821115614e4557600080fd5b614e5188838901614377565b93506060870135915080821115614e6757600080fd5b50614dc8878288016147b3565b600081518084526020808501945080840160005b83811015614a3b5781516001600160a01b031687529582019590820190600101614e88565b604081526000614ec06040830185614e74565b8281036020840152613fa38185614a05565b60008060408385031215614ee557600080fd5b8235614ef081614294565b91506020830135614c6781614294565b600060208284031215614f1257600080fd5b8135612bef816143eb565b600080600060608486031215614f3257600080fd5b8335614f3d81614294565b92506020840135614f4d816143eb565b91506040840135614f5d81614294565b809150509250925092565b60008060008060008060c08789031215614f8157600080fd5b86359550602087013594506040870135614f9a81614294565b93506060870135614faa81614294565b92506080870135614fba816143eb565b915060a08701356001600160401b03811115614fd557600080fd5b614fe189828a016144f0565b9150509295509295509295565b60005b83811015615009578181015183820152602001614ff1565b50506000910152565b6000815180845261502a816020860160208601614fee565b601f01601f19169290920160200192915050565b602081526000612bef6020830184615012565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115613ab057613ab0615067565b63ffffffff60e01b841681526060602082015260006150b26060830185614e74565b905063ffffffff83166040830152949350505050565b600080600080600080600080610100898b0312156150e557600080fd5b88516150f081614294565b60208a0151909850615101816143eb565b60408a015190975061511281614294565b60608a015190965061512381614294565b60808a015190955061513481614294565b60a08a015190945061514581614294565b60c08a015160e08b0151919450925061515d81614c34565b809150509295985092959890939650565b60006020828403121561518057600080fd5b8151612bef81614294565b63ffffffff60e01b851681526080602082015260006151ad6080830186614e74565b82810360408401526151bf8186614a05565b905082810360608401526151d38185614a05565b979650505050505050565b63ffffffff60e01b841681526060602082015260006152006060830185614e74565b8281036040840152614a7f8185614a05565b63ffffffff60e01b8616815260a06020820152600061523460a0830187614e74565b82810360408401526152468187614a05565b9050828103606084015261525a8186614a05565b9050828103608084015261526e8185614a05565b98975050505050505050565b81810381811115613ab057613ab0615067565b82815260a08101612bef60208301846142c6565b6000602082840312156152b357600080fd5b5051919050565b6000604082018483526020604081850152818551808452606086019150828701935060005b818110156153045784516001600160a01b0316835293830193918301916001016152df565b5090979650505050505050565b600082601f83011261532257600080fd5b8151602061533261439883614354565b82815260059290921b8401810191818101908684111561535157600080fd5b8286015b848110156143e057805161536881614294565b8352918301918301615355565b600082601f83011261538657600080fd5b8151602061539661439883614354565b82815260059290921b840181019181810190868411156153b557600080fd5b8286015b848110156143e05780516153cc816143eb565b83529183019183016153b9565b600080604083850312156153ec57600080fd5b82516001600160401b038082111561540357600080fd5b61540f86838701615311565b9350602085015191508082111561542557600080fd5b5061473585828601615375565b80516001600160e01b03198116811461544a57600080fd5b919050565b60006020828403121561546157600080fd5b612bef82615432565b6000806000806080858703121561548057600080fd5b61548985615432565b935060208501516001600160401b03808211156154a557600080fd5b6154b188838901615311565b945060408701519150808211156154c757600080fd5b6154d388838901615375565b935060608701519150808211156154e957600080fd5b50614dc887828801615375565b606081526000614a596060830186614e74565b60008060006060848603121561551e57600080fd5b61552784615432565b925060208401516001600160401b038082111561554357600080fd5b61554f87838801615311565b9350604086015191508082111561556557600080fd5b5061495c86828701615375565b600080600080600060a0868803121561558a57600080fd5b61559386615432565b945060208601516001600160401b03808211156155af57600080fd5b6155bb89838a01615311565b955060408801519150808211156155d157600080fd5b6155dd89838a01615375565b945060608801519150808211156155f357600080fd5b6155ff89838a01615375565b9350608088015191508082111561561557600080fd5b506148d288828901615375565b6080815260006156356080830187614e74565b82810360208401526156478187614a05565b905082810360408401526151bf8186614a05565b60008060006060848603121561567057600080fd5b61567984615432565b925060208401516001600160401b0381111561569457600080fd5b6156a086828701615311565b9250506040840151614f5d816143eb565b6040815260006156c46040830185614e74565b905063ffffffff831660208301529392505050565b600080600080608085870312156156ef57600080fd5b6156f885615432565b9350602085015161570881614294565b6040860151909350615719816143eb565b606086015190925061572a81614294565b939692955090935050565b60008060006060848603121561574a57600080fd5b61575384615432565b9250602084015161576381614294565b6040850151909250614f5d81614294565b6000806040838503121561578757600080fd5b61579083615432565b91506020830151614c6781614294565b600082516157b2818460208701614fee565b9190910192915050565b63ffffffff8281168282160390808211156157d9576157d9615067565b5092915050565b8082028115828204841417613ab057613ab0615067565b60008261581457634e487b7160e01b600052601260045260246000fd5b500490565b63ffffffff8181168382160190808211156157d9576157d9615067565b6001600160a01b038516815260806020820181905260009061585a90830186614e74565b828103604084015261586c8186614a05565b91505063ffffffff8316606083015295945050505050565b835160009082906020808801845b838110156158b75781516001600160a01b031685529382019390820190600101615892565b5050865181880193925060005b818110156158e657845163ffffffff16845293820193928201926001016158c4565b50505060e09490941b6001600160e01b0319168452505060049091019392505050565b60006020828403121561591b57600080fd5b8151612bef81614c34565b6040815260006159396040830185614e74565b82810360208481019190915284518083528582019282019060005b8181101561530457845183529383019391830191600101615954565b63ffffffff881681526001600160a01b0387811660208301528681166040830152851660608201526080810184905260a0810183905260e060c082018190526000906159be90830184615012565b999850505050505050505056fea164736f6c6343000815000a",
  "libraries": {
    "PGContribCalculator": "0x4bB8B77C13a17E9704c6212509ED0D572619e3b0"
  },
  "devdoc": {
    "author": "DAOHaus",
    "details": "Setup contract as a MolochV3 manager shaman module to mint/burn shares based on member activity. Features and important things to consider: - Inherits all the features of NetworkRegistry contract. - It can be setup as a manager Shaman module on a MolochV3 DAO (codename Baal) to mint/burn shares when   adding/updating members without the need of sending a separate/additional actions within a multicall proposal. - You can setup the amount of {sharesToMint} to new members being added to the registry. - You can enable/disable burning shares to inactive members (activityMultiplier == 0). - As the DAO usually lives only on the main network, it is recommended to deploy a NetworkRegistryShaman   as the main registry while replicas being of type NetworkRegistry.",
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "InvalidMember__ActivityMultiplier(address,uint32)": [
        {
          "params": {
            "_activityMultiplier": "activity multiplier",
            "_memberAddress": "member address"
          }
        }
      ],
      "InvalidMember__Address(address)": [
        {
          "params": {
            "_memberAddress": "submitted member address"
          }
        }
      ],
      "InvalidMember__StartDateInTheFuture(address,uint32)": [
        {
          "params": {
            "_memberAddress": "member address",
            "_startDate": "start date in seconds"
          }
        }
      ],
      "Member__AlreadyRegistered(address)": [
        {
          "params": {
            "_memberAddress": "member address"
          }
        }
      ],
      "Member__NotRegistered(address)": [
        {
          "params": {
            "_memberAddress": "member address"
          }
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "NetworkRegistryUpdated(uint32,address,uint32,address)": {
        "params": {
          "_chainId": "network chainId where the replica lives",
          "_delegate": "Delegate address in case of a bridge tx failure (currently not in use)",
          "_domainId": "Connext domain ID that correspond to the network where the replica lives",
          "_registryAddress": "replica contract address"
        }
      },
      "NewMember(address,uint32,uint32)": {
        "params": {
          "_activityMultiplier": "member activity multiplier",
          "_memberAddress": "member address",
          "_startDate": "timestamp the member started activities in seconds"
        }
      },
      "NewUpdaterConfig(address,uint32,address)": {
        "params": {
          "_connext": "Connext contract address",
          "_updater": "new Updater address",
          "_updaterDomain": "new Updater domain ID"
        }
      },
      "RegistryActivityUpdate(uint32,uint256)": {
        "params": {
          "_timestamp": "timestamp registry activity update epoch was executed",
          "_totalMemberUpdates": "total updated members during the epoch"
        }
      },
      "ShamanConfigUpdated(uint256,bool)": {
        "params": {
          "_burnShares": "wether or not to burn shares to inactive members",
          "_sharesToMint": "new amount of shares to mint to registered members"
        }
      },
      "SplitUpdated(address,address)": {
        "params": {
          "_split": "new 0xSplitWallet contract address",
          "_splitMain": "new 0xSplitMain contract address"
        }
      },
      "SplitsDistributionUpdated(address,bytes32,uint32)": {
        "params": {
          "_split": "0xSplit contract address",
          "_splitDistributorFee": "split fee set at reward for the address that executes the distribution",
          "_splitHash": "hash of the split distribution parameters"
        }
      },
      "SyncActionPerformed(bytes32,uint32,bytes4,bool,address)": {
        "params": {
          "_action": "Function selector for the action executed on the replica",
          "_originDomain": "Connext domain ID that correspond to the network where the sync message was submitted",
          "_originSender": "main NetworkRegistry address that forwarded the sync message through the Connext bridge",
          "_success": "Whether or not the action execution succeeded",
          "_transferId": "transfer ID returned by Connext that identifies the received xCall message"
        }
      },
      "SyncMessageSubmitted(bytes32,uint32,bytes4,address)": {
        "params": {
          "_action": "Function selector for the action to be executed on the replica",
          "_chainId": "chainId of the destination network",
          "_registryAddress": "replica NetworkRegistry address",
          "_transferId": "Transfer ID returned by Connext to identify the executed xCall"
        }
      },
      "UpdateMember(address,uint32,uint32,uint32)": {
        "params": {
          "_activityMultiplier": "new member activity multiplier",
          "_memberAddress": "member address",
          "_secondsActive": "member seconds active since last update",
          "_startDate": "timestamp the member started activities in seconds"
        }
      },
      "UpdateMemberSeconds(address,uint32)": {
        "params": {
          "_memberAddress": "member address",
          "_secondsActive": "member activity in seconds since last registry update"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "acceptNetworkSplitControl(uint32[],uint256[])": {
        "details": "Callable by main registry owner",
        "params": {
          "_chainIds": "a list of network chainIds where valid replicas live",
          "_relayerFees": "a list of fees to be paid to the Connext relayer per sync message forwarded"
        }
      },
      "acceptSplitControl()": {
        "details": "Callable on both main and replica registries"
      },
      "addOrUpdateMembersBatch(address[],uint32[],uint32[],uint32[])": {
        "details": "Callable on a replica registry through the Connext bridge. The syncNetworkMemberRegistry function ensures that array params will always be the same length so there is no need for args validation",
        "params": {
          "_activityMultipliers": "Activity multipliers for each new member",
          "_members": "A list of member addresses to be added to the registry",
          "_secondsActive": "A list of members reported activity in seconds",
          "_startDates": "A list of dates when each member got active"
        }
      },
      "batchNewMembers(address[],uint32[],uint32[])": {
        "details": "Callable on a replica registry through the Connext bridge",
        "params": {
          "_activityMultipliers": "Activity multipliers for each new member",
          "_members": "A list of member addresses to be added to the registry",
          "_startDates": "A list of dates when each member got active"
        }
      },
      "batchUpdateMembersActivity(address[],uint32[])": {
        "details": "Callable on a replica registry through the Connext bridge",
        "params": {
          "_activityMultipliers": "New activity multipliers for each member",
          "_members": "A list of existing members"
        }
      },
      "calculate(address[])": {
        "details": "It uses the PGContribCalculator library to calculate member allocations",
        "params": {
          "_sortedList": "sorted list (ascending order) of members to be considered in the 0xSplit distribution"
        },
        "returns": {
          "_percentAllocations": "list of split allocations for each eligible recipient",
          "_receivers": "list of eligible recipients (non-zero allocation) for the next split distribution"
        }
      },
      "calculateContributionOf(address)": {
        "details": "It uses the PGContribCalculator library",
        "params": {
          "_memberAddress": "member address"
        },
        "returns": {
          "_0": "calculated contribution as uin256 value"
        }
      },
      "calculateTotalContributions()": {
        "details": "omit members with activityMultiplier == 0",
        "returns": {
          "total": "calculated contributions from active members"
        }
      },
      "cancelNetworkSplitControlTransfer(uint32[],uint256[])": {
        "details": "Callable by main registry owner",
        "params": {
          "_chainIds": "a list of network chainIds where valid replicas live",
          "_relayerFees": "a list of fees to be paid to the Connext relayer per sync message forwarded"
        }
      },
      "cancelSplitControlTransfer()": {
        "details": "Callable on both main and replica registries"
      },
      "getMember(address)": {
        "details": "It throws an exception if member is not in the db",
        "params": {
          "_memberAddress": "member address"
        },
        "returns": {
          "member": "metadata"
        }
      },
      "getMembers()": {
        "details": "In case of a growing number of members in the registry it is recommended to use {getMembersPaginated}",
        "returns": {
          "_0": "an array of Members in the registry"
        }
      },
      "getMembersPaginated(uint256,uint256)": {
        "params": {
          "_fromIndex": "starting index in Member's db",
          "_toIndex": "ending index in Member's db"
        },
        "returns": {
          "memberList": "an array of Members in the registry"
        }
      },
      "getMembersProperties(address[])": {
        "details": "Function should revert if any address in _memberAddrs is not registered",
        "params": {
          "_members": "list of registered member addresses"
        },
        "returns": {
          "_0": "list of member activity multipliers",
          "_1": "list of member start dates",
          "_2": "list of member seconds active"
        }
      },
      "initialize(bytes)": {
        "details": "Initialization parameters are abi-encoded (i.e. through the NetworkRegistrySummoner contract)",
        "params": {
          "_initializationParams": "abi-encoded parameters"
        }
      },
      "isMainRegistry()": {
        "details": "Verifies if updater params are set to zero"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setNetworkUpdaterConfig(uint32[],address[],uint32[],address[],uint256[])": {
        "details": "Callable by main registry owner",
        "params": {
          "_chainIds": "a list of network chainIds where valid replicas live",
          "_connextAddrs": "a list Connext bridge addresses to be used on each replica",
          "_relayerFees": "a list of fees to be paid to the Connext relayer per sync message forwarded",
          "_updaterAddrs": "a list of updater role addresses to be used on each replica",
          "_updaterDomains": "a list of Connext updater domain IDs to be used on each replica"
        }
      },
      "setShamanConfig(uint256,bool)": {
        "details": "Callable by the registry owner",
        "params": {
          "_burnShares": "Whether or not to burn shares if a member activityMultiplier is set to zero",
          "_sharesToMint": "Amount of shares to mint to new members"
        }
      },
      "setSplit(address,address)": {
        "details": "Callable on both main and replica registries",
        "params": {
          "_split": "The address of the 0xSplit contract",
          "_splitMain": "The address of the 0xSplitMain"
        }
      },
      "setUpdaterConfig(address,uint32,address)": {
        "details": "Callable on both main and replica registries",
        "params": {
          "_connext": "Connext contract address",
          "_updater": "Main NetworkRegistry address that will update the replica registry using the Connext bridge",
          "_updaterDomain": "Connext domain ID where the Updater lives"
        }
      },
      "syncBatchNewMembers(address[],uint32[],uint32[],uint32[],uint256[])": {
        "details": "Callable by the main registry owner",
        "params": {
          "_activityMultipliers": "A list of activity multipliers for each new member",
          "_chainIds": "a list of network chainIds where valid replicas live",
          "_members": "A list of member addresses to be added to the registry",
          "_relayerFees": "a list of fees to be paid to the Connext relayer per sync message forwarded",
          "_startDates": "A list of dates when each member got active"
        }
      },
      "syncBatchUpdateMembersActivity(address[],uint32[],uint32[],uint256[])": {
        "details": "Callable by the main registry owner",
        "params": {
          "_activityMultipliers": "A list of new activity multipliers for each member",
          "_chainIds": "a list of network chainIds where valid replicas live",
          "_members": "A list of existing members",
          "_relayerFees": "a list of fees to be paid to the Connext relayer per sync message forwarded"
        }
      },
      "syncNetworkMemberRegistry(address[],uint32[],uint256[])": {
        "details": "Callable by the main registry owner",
        "params": {
          "_chainIds": "a list of network chainIds where valid replicas live",
          "_members": "list of member addresses you look to sync",
          "_relayerFees": "a list of fees to be paid to the Connext relayer per sync message forwarded"
        }
      },
      "syncUpdateAll(address[],uint32,uint32[],uint256[])": {
        "details": "Callable by the main registry owner - Addresses in _sortedList must be in the member registry",
        "params": {
          "_chainIds": "a list of network chainIds where valid replicas live",
          "_relayerFees": "a list of fees to be paid to the Connext relayer per sync message forwarded",
          "_sortedList": "sorted list (ascending order) of members to be considered in the 0xSplit distribution",
          "_splitDistributorFee": "split fee set as reward for the address that executes the distribution"
        }
      },
      "syncUpdateSecondsActive(uint32[],uint256[])": {
        "details": "Callable by the main registry owner",
        "params": {
          "_chainIds": "a list of network chainIds where valid replicas live",
          "_relayerFees": "a list of fees to be paid to the Connext relayer per sync message forwarded"
        }
      },
      "syncUpdateSplits(address[],uint32,uint32[],uint256[])": {
        "details": "Callable by the main registry owner. - Addresses in _sortedList must be in the member registry",
        "params": {
          "_chainIds": "a list of network chainIds where valid replicas live",
          "_relayerFees": "a list of fees to be paid to the Connext relayer per sync message forwarded",
          "_sortedList": "sorted list (ascending order) of members to be considered in the 0xSplit distribution",
          "_splitDistributorFee": "split fee set as reward for the address that executes the distribution"
        }
      },
      "totalMembers()": {
        "returns": {
          "_0": "total members in the registry"
        }
      },
      "transferNetworkSplitControl(uint32[],address[],uint256[])": {
        "details": "Callable by main registry owner",
        "params": {
          "_chainIds": "a list of network chainIds where valid replicas live",
          "_newControllers": "new controller address per replica",
          "_relayerFees": "a list of fees to be paid to the Connext relayer per sync message forwarded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferSplitControl(address)": {
        "details": "Callable on both main and replica registries",
        "params": {
          "_newController": "new controller address"
        }
      },
      "updateAll(address[],uint32)": {
        "details": "Verify if the address list is sorted, has no duplicates and is valid",
        "params": {
          "_sortedList": "sorted list (ascending order) of members to be considered in the 0xSplit distribution",
          "_splitDistributorFee": "split fee set as reward for the address that executes the distribution"
        }
      },
      "updateNetworkRegistry(uint32,(uint32,address,address))": {
        "details": "Callable by main registry owner",
        "params": {
          "_chainId": "Network chainId where the replica registry lives",
          "_newRegistry": "Connext domain ID and replica NetworkRegistry address"
        }
      },
      "updateNetworkSplit(uint32[],address[],address[],uint256[])": {
        "details": "Callable by main registry owner",
        "params": {
          "_chainIds": "a list of network chainIds where valid replicas live",
          "_relayerFees": "a list of fees to be paid to the Connext relayer per sync message forwarded",
          "_splits": "a list of 0xSplit addresses for each replica",
          "_splitsMain": "a list of 0xSplit proxy addresses for each replica"
        }
      },
      "updateSecondsActive()": {
        "details": "It should manage a lastActivityUpdate state variable to update activity based on last update epoch. For new members it should update seconds based each member startDate."
      },
      "updateSplits(address[],uint32)": {
        "details": "Verify if the address list is sorted, has no duplicates and is valid",
        "params": {
          "_sortedList": "sorted list (ascending order) of members to be considered in the 0xSplit distribution",
          "_splitDistributorFee": "split fee set as reward for the address that executes the distribution"
        }
      },
      "xReceive(bytes32,uint256,address,address,uint32,bytes)": {
        "details": "Forwarded messages can only be executed if the function selector is listed as valid action",
        "params": {
          "_incomingCalldata": "message calldata to be used to invoke the required syncing action",
          "_origin": "Connext domain ID that correspond to the network where the the xCall message was submitted",
          "_originSender": "main registry address that forwarded the xCall message through the Connext bridge",
          "_transferId": "transfer ID set by Connext to identify the incoming xCall message"
        },
        "returns": {
          "_0": "any data returned by the action call"
        }
      }
    },
    "stateVariables": {
      "baal": {
        "details": "Baal address"
      }
    },
    "title": "A cross-chain network registry and Baal shaman module to distribute funds escrowed in 0xSplit based on member activity.",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidMember__ActivityMultiplier(address,uint32)": [
        {
          "notice": "Invalid value for member activity multiplier"
        }
      ],
      "InvalidMember__Address(address)": [
        {
          "notice": "Invalid member address"
        }
      ],
      "InvalidMember__StartDateInTheFuture(address,uint32)": [
        {
          "notice": "Invalid member start date"
        }
      ],
      "MemberRegistry__ParamsSizeMismatch()": [
        {
          "notice": "Function array parameter size mismatch"
        }
      ],
      "Member__AlreadyRegistered(address)": [
        {
          "notice": "Member is already registered"
        }
      ],
      "Member__IndexOutOfBounds()": [
        {
          "notice": "Member index out of bounds"
        }
      ],
      "Member__NotRegistered(address)": [
        {
          "notice": "Member is not registered"
        }
      ],
      "NetWorkRegistry__ParamsSizeMismatch()": [
        {
          "notice": "Function array parameter size mismatch"
        }
      ],
      "NetworkRegistry__ConnextOnly()": [
        {
          "notice": "The function is callable through Connext only."
        }
      ],
      "NetworkRegistry__InvalidConnextAddress()": [
        {
          "notice": "Connext address cannot be 0x0"
        }
      ],
      "NetworkRegistry__InvalidOrImmutableSplit()": [
        {
          "notice": "0xSplit doesn't exists or is immutable"
        }
      ],
      "NetworkRegistry__InvalidReplica()": [
        {
          "notice": "Registry has invalid domainId or registry address values"
        }
      ],
      "NetworkRegistry__NeitherOwnableNorReplicaUpdater()": [
        {
          "notice": "Network Registry must have an owner or updater address assigned."
        }
      ],
      "NetworkRegistry__NoReplicaOnNetwork(uint32)": [
        {
          "notice": "No replica registered on network with ID `_chainId`"
        }
      ],
      "NetworkRegistry__OnlyMainRegistry()": [
        {
          "notice": "The function is callable only on a main registry by the owner."
        }
      ],
      "NetworkRegistry__OnlyOwnerOrUpdater()": [
        {
          "notice": "The function is callable only by the owner or by the updater through Connext."
        }
      ],
      "NetworkRegistry__OnlyReplicaRegistry()": [
        {
          "notice": "The function is callable only on a replica by the owner or through a sync event."
        }
      ],
      "NetworkRegistry__ValueSentLessThanRelayerFees()": [
        {
          "notice": "msg value sent does not cover relayer fees"
        }
      ],
      "Split_ControlNotHandedOver()": [
        {
          "notice": "Control of 0xSplit contract hasn't been transferred to the registry"
        }
      ]
    },
    "events": {
      "NetworkRegistryUpdated(uint32,address,uint32,address)": {
        "notice": "emitted when a new replica NetworkRegistry is added/updated"
      },
      "NewMember(address,uint32,uint32)": {
        "notice": "emitted after a new member is added to the registry"
      },
      "NewUpdaterConfig(address,uint32,address)": {
        "notice": "emitted after the Connext and Updater role settings are updated"
      },
      "RegistryActivityUpdate(uint32,uint256)": {
        "notice": "emitted after an registry activity update epoch is executed"
      },
      "ShamanConfigUpdated(uint256,bool)": {
        "notice": "emitted when the shaman config is updated"
      },
      "SplitUpdated(address,address)": {
        "notice": "emitted when the 0xSplit contract is updated"
      },
      "SplitsDistributionUpdated(address,bytes32,uint32)": {
        "notice": "emitted when a new split distribution is registered on the 0xSplit contract"
      },
      "SyncActionPerformed(bytes32,uint32,bytes4,bool,address)": {
        "notice": "emitted when a registry synchronization message is received and executed on a replica"
      },
      "SyncMessageSubmitted(bytes32,uint32,bytes4,address)": {
        "notice": "emitted when a registry synchronization message is forwarded through the Connext bridge"
      },
      "UpdateMember(address,uint32,uint32,uint32)": {
        "notice": "emitted after the an existing member is updated"
      },
      "UpdateMemberSeconds(address,uint32)": {
        "notice": "emitted after each time a member registry activity is updated"
      }
    },
    "kind": "user",
    "methods": {
      "acceptNetworkSplitControl(uint32[],uint256[])": {
        "notice": "Submit sync messages to replicas in order to accept control of the current 0xSplit contract"
      },
      "acceptSplitControl()": {
        "notice": "Accepts control of the current 0xSplit contract"
      },
      "addOrUpdateMembersBatch(address[],uint32[],uint32[],uint32[])": {
        "notice": "Adds and/or updates a set of members on the registry"
      },
      "baal()": {
        "notice": "MolochV3 DAO address"
      },
      "batchNewMembers(address[],uint32[],uint32[])": {
        "notice": "Adds a new set of members to the registry"
      },
      "batchUpdateMembersActivity(address[],uint32[])": {
        "notice": "Updates the activity multiplier for a set of existing members"
      },
      "burnShares()": {
        "notice": "Wether or not to burn shares if a member activityMultiplier is set to zero"
      },
      "calculate(address[])": {
        "notice": "Calculate 0xSplit distribution allocations"
      },
      "calculateContributionOf(address)": {
        "notice": "Calculates a member individual contribution"
      },
      "calculateTotalContributions()": {
        "notice": "Calculates the sum of all member contributions"
      },
      "cancelNetworkSplitControlTransfer(uint32[],uint256[])": {
        "notice": "Submit sync messages to replicas in order to cancel a transfer control request of the current 0xSplit contract"
      },
      "cancelSplitControlTransfer()": {
        "notice": "Cancel controller transfer of the current 0xSplit contract"
      },
      "connext()": {
        "notice": "Connext contract in the current domain"
      },
      "getMember(address)": {
        "notice": "Fetch a member's metadata from the registry."
      },
      "getMembers()": {
        "notice": "Fetch all members from the registry"
      },
      "getMembersPaginated(uint256,uint256)": {
        "notice": "Fetch a subset of members from the registry"
      },
      "getMembersProperties(address[])": {
        "notice": "Fetch members metadata as separate property arrays"
      },
      "initialize(bytes)": {
        "notice": "Initializes the registry shaman contract"
      },
      "isMainRegistry()": {
        "notice": "Returns whether or not a registry has been setup as a main registry"
      },
      "lastActivityUpdate()": {
        "notice": "last timestamp where the registry got updated"
      },
      "replicaRegistry(uint32)": {
        "notice": "replicas tied to the current registry"
      },
      "setNetworkUpdaterConfig(uint32[],address[],uint32[],address[],uint256[])": {
        "notice": "Set Connext & Updater config settings for existing NetworkRegistry replicas via sync message"
      },
      "setShamanConfig(uint256,bool)": {
        "notice": "Updates the shaman config parameters"
      },
      "setSplit(address,address)": {
        "notice": "Updates the the 0xSplitMain proxy and 0xSplit contract addresses"
      },
      "setUpdaterConfig(address,uint32,address)": {
        "notice": "Set Connext and Updater config parameters"
      },
      "sharesToMint()": {
        "notice": "The amount of shares to mint to new members"
      },
      "split()": {
        "notice": "0xSplit contract where funds are hold"
      },
      "splitMain()": {
        "notice": "0xSplit proxy contract"
      },
      "syncBatchNewMembers(address[],uint32[],uint32[],uint32[],uint256[])": {
        "notice": "Adds a new set of members to the registry and sync with replicas"
      },
      "syncBatchUpdateMembersActivity(address[],uint32[],uint32[],uint256[])": {
        "notice": "Updates the activity multiplier for a set of existing members and sync with replicas"
      },
      "syncNetworkMemberRegistry(address[],uint32[],uint256[])": {
        "notice": "Sync the state of a set of registry members across networks. Useful whether you're looking to sync a new replica from scratch or a subset of members. For example this function can be used to sync member's state in batches instead of doing a full registry sync which could become pretty gas intensive with a growing list of members."
      },
      "syncUpdateAll(address[],uint32,uint32[],uint256[])": {
        "notice": "Executes both {updateSecondsActive} to update member's activity and {updateSplits} for split distribution across all networks"
      },
      "syncUpdateSecondsActive(uint32[],uint256[])": {
        "notice": "Updates activity for each member in the registry since the last update epoch and sync with replicas"
      },
      "syncUpdateSplits(address[],uint32,uint32[],uint256[])": {
        "notice": "Updates the 0xSplit distribution on all networks based on reported member activity during the last epoch. Consider calling {syncUpdateSecondsActive} prior or after applying a 0xSplit distribution update"
      },
      "totalMembers()": {
        "notice": "Returns the total No of members in the registry"
      },
      "transferNetworkSplitControl(uint32[],address[],uint256[])": {
        "notice": "Submit sync messages to replicas in order to transfer control of the current 0xSplit contract to `_newController`"
      },
      "transferSplitControl(address)": {
        "notice": "Transfer control of the current 0xSplit contract to `_newController`"
      },
      "updateAll(address[],uint32)": {
        "notice": "Executes both {updateSecondsActive} to update registry member's activity and {updateSplits} for split distribution"
      },
      "updateNetworkRegistry(uint32,(uint32,address,address))": {
        "notice": "Adds a replica NetworkRegistry that should get in sync with a main registry"
      },
      "updateNetworkSplit(uint32[],address[],address[],uint256[])": {
        "notice": "Updates the 0xSplit contracts on existing NetworkRegistry replicas via sync message"
      },
      "updateSecondsActive()": {
        "notice": "Updates seconds active since the last update epoch for every member in the registry"
      },
      "updateSplits(address[],uint32)": {
        "notice": "Updates the 0xSplit distribution based on member activity during the last epoch Consider calling {updateSecondsActive} prior triggering a 0xSplit distribution update"
      },
      "updater()": {
        "notice": "Address of the updater role that can update the registry through the Connext bridge"
      },
      "updaterDomain()": {
        "notice": "Connext domain ID where the updater contract is deployed"
      },
      "xReceive(bytes32,uint256,address,address,uint32,bytes)": {
        "notice": "Accepts incoming sync messages from a main registry via Connext authenticated calls"
      }
    },
    "notice": "Manage a cross-chain member registry that mints/burn Baal DAO shares and distribute funds hold in 0xSplit based on member activity.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11897,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "members",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Members)11504_storage"
      },
      {
        "astId": 11900,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "lastActivityUpdate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 8289,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "connext",
        "offset": 4,
        "slot": "3",
        "type": "t_contract(IConnext)285"
      },
      {
        "astId": 8292,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "updaterDomain",
        "offset": 24,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 8295,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "updater",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 8301,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "replicaRegistry",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint32,t_struct(Registry)11515_storage)"
      },
      {
        "astId": 8305,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "splitMain",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ISplitMain)11399"
      },
      {
        "astId": 8308,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "split",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 10463,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "baal",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IBaal)693"
      },
      {
        "astId": 10466,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "sharesToMint",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 10469,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "burnShares",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Member)11489_storage)dyn_storage": {
        "base": "t_struct(Member)11489_storage",
        "encoding": "dynamic_array",
        "label": "struct DataTypes.Member[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBaal)693": {
        "encoding": "inplace",
        "label": "contract IBaal",
        "numberOfBytes": "20"
      },
      "t_contract(IConnext)285": {
        "encoding": "inplace",
        "label": "contract IConnext",
        "numberOfBytes": "20"
      },
      "t_contract(ISplitMain)11399": {
        "encoding": "inplace",
        "label": "contract ISplitMain",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_struct(Registry)11515_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct DataTypes.Registry)",
        "numberOfBytes": "32",
        "value": "t_struct(Registry)11515_storage"
      },
      "t_struct(Member)11489_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Member",
        "members": [
          {
            "astId": 11479,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11482,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "secondsActive",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11485,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "startDate",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11488,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "activityMultiplier",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Members)11504_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Members",
        "members": [
          {
            "astId": 11495,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "db",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Member)11489_storage)dyn_storage"
          },
          {
            "astId": 11498,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "count",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11503,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "index",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Registry)11515_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.Registry",
        "members": [
          {
            "astId": 11508,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "domainId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11511,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "registryAddress",
            "offset": 4,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11514,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "delegate",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}