{
  "address": "0xC334c3313b833679809566F1035fC931cEffB919",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_activityMultiplier",
          "type": "uint32"
        }
      ],
      "name": "InvalidMember__ActivityMultiplier",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        }
      ],
      "name": "InvalidMember__Address",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_startDate",
          "type": "uint32"
        }
      ],
      "name": "InvalidMember__StartDateInTheFuture",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "InvalidSplit__AccountsOutOfOrder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSplit__MemberListSizeMismatch",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        }
      ],
      "name": "Member__AlreadyRegistered",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        }
      ],
      "name": "Member__NotRegistered",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "UD60x18",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "PRBMath_UD60x18_Sqrt_Overflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Split_ControlNotHandedOver",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_registryAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "_domainId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "NetworkRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_startDate",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_activityMultiplier",
          "type": "uint32"
        }
      ],
      "name": "NewMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_connext",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_updaterDomain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_updater",
          "type": "address"
        }
      ],
      "name": "NewUpdaterConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_date",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalMemberUpdates",
          "type": "uint256"
        }
      ],
      "name": "RegistryActivityUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_splitMain",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_split",
          "type": "address"
        }
      ],
      "name": "SplitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_split",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_splitHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_splitDistributorFee",
          "type": "uint32"
        }
      ],
      "name": "SplitsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "_originDomain",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "_action",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_originSender",
          "type": "address"
        }
      ],
      "name": "SyncActionPerformed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "_action",
          "type": "bytes4"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_registryAddress",
          "type": "address"
        }
      ],
      "name": "SyncMessageSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_activityMultiplier",
          "type": "uint32"
        }
      ],
      "name": "UpdateMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_secondsActive",
          "type": "uint32"
        }
      ],
      "name": "UpdateMemberSeconds",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "acceptNetworkSplitControl",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptSplitControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baal",
      "outputs": [
        {
          "internalType": "contract IBaal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_activityMultipliers",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_startDates",
          "type": "uint32[]"
        }
      ],
      "name": "batchNewMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_activityMultipliers",
          "type": "uint32[]"
        }
      ],
      "name": "batchUpdateMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnShares",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_sortedList",
          "type": "address[]"
        }
      ],
      "name": "calculate",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_percentAllocations",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_memberAddress",
          "type": "address"
        }
      ],
      "name": "calculateContributionOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "secondsActive",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "startDate",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "activityMultiplier",
              "type": "uint32"
            }
          ],
          "internalType": "struct MemberRegistry.Member",
          "name": "_member",
          "type": "tuple"
        }
      ],
      "name": "calculateContributionOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calculateTotalContributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "cancelNetworkSplitControlTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelSplitControlTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connext",
      "outputs": [
        {
          "internalType": "contract IConnext",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        }
      ],
      "name": "getMember",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "secondsActive",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "startDate",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "activityMultiplier",
              "type": "uint32"
            }
          ],
          "internalType": "struct MemberRegistry.Member",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "secondsActive",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "startDate",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "activityMultiplier",
              "type": "uint32"
            }
          ],
          "internalType": "struct MemberRegistry.Member[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembersSplitProperties",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_initializationParams",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMainRegistry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastActivityUpdate",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "memberIdxs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "secondsActive",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "startDate",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "activityMultiplier",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "networkRegistry",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "domainId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_activityMultiplier",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_startDate",
          "type": "uint32"
        }
      ],
      "name": "setNewMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sharesToMint",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_burnShares",
          "type": "bool"
        }
      ],
      "name": "setShamanConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_splitMain",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_split",
          "type": "address"
        }
      ],
      "name": "setSplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_connext",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_updaterDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_updater",
          "type": "address"
        }
      ],
      "name": "setUpdaterConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharesToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "split",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "splitMain",
      "outputs": [
        {
          "internalType": "contract ISplitMain",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_activityMultipliers",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_startDates",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncBatchNewMember",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_activityMultipliers",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncBatchUpdateMember",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncNetworkMemberRegistry",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_activityMultiplier",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_startDate",
          "type": "uint32"
        },
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncSetNewMember",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_sortedList",
          "type": "address[]"
        },
        {
          "internalType": "uint32",
          "name": "_splitDistributorFee",
          "type": "uint32"
        },
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncUpdateAll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_activityMultiplier",
          "type": "uint32"
        },
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncUpdateMember",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncUpdateSecondsActive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_sortedList",
          "type": "address[]"
        },
        {
          "internalType": "uint32",
          "name": "_splitDistributorFee",
          "type": "uint32"
        },
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncUpdateSplits",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMembers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "address[]",
          "name": "_newControllers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "transferNetworkSplitControl",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newController",
          "type": "address"
        }
      ],
      "name": "transferSplitControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_sortedList",
          "type": "address[]"
        },
        {
          "internalType": "uint32",
          "name": "_splitDistributorFee",
          "type": "uint32"
        }
      ],
      "name": "updateAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_activityMultiplier",
          "type": "uint32"
        }
      ],
      "name": "updateMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "domainId",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "registryAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "internalType": "struct INetworkMemberRegistry.Registry",
          "name": "_newRegistry",
          "type": "tuple"
        }
      ],
      "name": "updateNetworkRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "address[]",
          "name": "_splitsMain",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_splits",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "updateNetworkSplit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateSecondsActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_sortedList",
          "type": "address[]"
        },
        {
          "internalType": "uint32",
          "name": "_splitDistributorFee",
          "type": "uint32"
        }
      ],
      "name": "updateSplits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updater",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updaterDomain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_originSender",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_incomingCalldata",
          "type": "bytes"
        }
      ],
      "name": "xReceive",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x85f392ca5816ed0459f08042b1953876c0a826a5d6c90fa631c3bd996fac3912",
  "receipt": {
    "to": null,
    "from": "0x10136Fa41B6522E4DBd068C6F7D80373aBbCFBe6",
    "contractAddress": "0xC334c3313b833679809566F1035fC931cEffB919",
    "transactionIndex": 2,
    "gasUsed": "5275541",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000040000000000000000000000080000000000000400000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7cc7b6bea0b32c45f14dabfc9565e0f3e957bfd3b8ccf8421d5c66b7e8d1f56c",
    "transactionHash": "0x85f392ca5816ed0459f08042b1953876c0a826a5d6c90fa631c3bd996fac3912",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 12439821,
        "transactionHash": "0x85f392ca5816ed0459f08042b1953876c0a826a5d6c90fa631c3bd996fac3912",
        "address": "0xC334c3313b833679809566F1035fC931cEffB919",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 6,
        "blockHash": "0x7cc7b6bea0b32c45f14dabfc9565e0f3e957bfd3b8ccf8421d5c66b7e8d1f56c"
      }
    ],
    "blockNumber": 12439821,
    "cumulativeGasUsed": "5593338",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "d3f3eb150724c8e8c432807fd2425a4d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_activityMultiplier\",\"type\":\"uint32\"}],\"name\":\"InvalidMember__ActivityMultiplier\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"InvalidMember__Address\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_startDate\",\"type\":\"uint32\"}],\"name\":\"InvalidMember__StartDateInTheFuture\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"InvalidSplit__AccountsOutOfOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSplit__MemberListSizeMismatch\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"Member__AlreadyRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"Member__NotRegistered\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"UD60x18\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMath_UD60x18_Sqrt_Overflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Split_ControlNotHandedOver\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_domainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"NetworkRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_startDate\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_activityMultiplier\",\"type\":\"uint32\"}],\"name\":\"NewMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_connext\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_updaterDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_updater\",\"type\":\"address\"}],\"name\":\"NewUpdaterConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_date\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalMemberUpdates\",\"type\":\"uint256\"}],\"name\":\"RegistryActivityUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_splitMain\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_split\",\"type\":\"address\"}],\"name\":\"SplitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_split\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_splitHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_splitDistributorFee\",\"type\":\"uint32\"}],\"name\":\"SplitsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_originDomain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"_action\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_originSender\",\"type\":\"address\"}],\"name\":\"SyncActionPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"_action\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"}],\"name\":\"SyncMessageSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_activityMultiplier\",\"type\":\"uint32\"}],\"name\":\"UpdateMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_secondsActive\",\"type\":\"uint32\"}],\"name\":\"UpdateMemberSeconds\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENTAGE_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"acceptNetworkSplitControl\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptSplitControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baal\",\"outputs\":[{\"internalType\":\"contract IBaal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_activityMultipliers\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_startDates\",\"type\":\"uint32[]\"}],\"name\":\"batchNewMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_activityMultipliers\",\"type\":\"uint32[]\"}],\"name\":\"batchUpdateMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnShares\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_sortedList\",\"type\":\"address[]\"}],\"name\":\"calculate\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_percentAllocations\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_memberAddress\",\"type\":\"address\"}],\"name\":\"calculateContributionOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"secondsActive\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"activityMultiplier\",\"type\":\"uint32\"}],\"internalType\":\"struct MemberRegistry.Member\",\"name\":\"_member\",\"type\":\"tuple\"}],\"name\":\"calculateContributionOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calculateTotalContributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"cancelNetworkSplitControlTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelSplitControlTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connext\",\"outputs\":[{\"internalType\":\"contract IConnext\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"getMember\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"secondsActive\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"activityMultiplier\",\"type\":\"uint32\"}],\"internalType\":\"struct MemberRegistry.Member\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"secondsActive\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"activityMultiplier\",\"type\":\"uint32\"}],\"internalType\":\"struct MemberRegistry.Member[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembersSplitProperties\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_initializationParams\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMainRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastActivityUpdate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"memberIdxs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"secondsActive\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"activityMultiplier\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"networkRegistry\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"domainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_activityMultiplier\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_startDate\",\"type\":\"uint32\"}],\"name\":\"setNewMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sharesToMint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_burnShares\",\"type\":\"bool\"}],\"name\":\"setShamanConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_splitMain\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_split\",\"type\":\"address\"}],\"name\":\"setSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_connext\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_updaterDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_updater\",\"type\":\"address\"}],\"name\":\"setUpdaterConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"split\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitMain\",\"outputs\":[{\"internalType\":\"contract ISplitMain\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_activityMultipliers\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_startDates\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncBatchNewMember\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_activityMultipliers\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncBatchUpdateMember\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncNetworkMemberRegistry\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_activityMultiplier\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncSetNewMember\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_sortedList\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"_splitDistributorFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncUpdateAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_activityMultiplier\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncUpdateMember\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncUpdateSecondsActive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_sortedList\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"_splitDistributorFee\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncUpdateSplits\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMembers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"address[]\",\"name\":\"_newControllers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"transferNetworkSplitControl\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"transferSplitControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_sortedList\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"_splitDistributorFee\",\"type\":\"uint32\"}],\"name\":\"updateAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_activityMultiplier\",\"type\":\"uint32\"}],\"name\":\"updateMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"domainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"internalType\":\"struct INetworkMemberRegistry.Registry\",\"name\":\"_newRegistry\",\"type\":\"tuple\"}],\"name\":\"updateNetworkRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"address[]\",\"name\":\"_splitsMain\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_splits\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"updateNetworkSplit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSecondsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_sortedList\",\"type\":\"address[]\"},{\"internalType\":\"uint32\",\"name\":\"_splitDistributorFee\",\"type\":\"uint32\"}],\"name\":\"updateSplits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updaterDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_originSender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_incomingCalldata\",\"type\":\"bytes\"}],\"name\":\"xReceive\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"acceptSplitControl()\":{\"details\":\"should accept control of the current 0xsplit in the state\"},\"batchNewMember(address[],uint32[],uint32[])\":{\"details\":\"Make sure array parameters are of the same length Activity multiplier could be set within 0-100 (%) range (i.e. 50 -> part-time 100 -> full-time) but it's up to the implementer to establish the multiplier boundaries\",\"params\":{\"_activityMultipliers\":\"Activity multipliers for each new member\",\"_members\":\"A list of member addresses to be added to the registry\",\"_startDates\":\"A list of dates when each member got active\"}},\"batchUpdateMember(address[],uint32[])\":{\"details\":\"Make sure members are in the registry Activity multiplier could be set within 0-100 (%) range (i.e. 50 -> part-time 100 -> full-time) but it's up to the implementer to establish the multiplier boundaries\",\"params\":{\"_activityMultipliers\":\"New activity multipliers for each member\",\"_members\":\"A list of existing members\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setNewMember(address,uint32,uint32)\":{\"details\":\"Activity multiplier could be set within 0-100 (%) range (i.e. 50 -> part-time 100 -> full-time) but it's up to the implementer to establish the multiplier boundaries\",\"params\":{\"_activityMultiplier\":\"The member activity multiplier\",\"_member\":\"The addres of the new member to be added to the registry\",\"_startDate\":\"The date member when the member got active\"}},\"setSplit(address,address)\":{\"details\":\"Should make sure the 0xSplit contract exists and isn't immutable (no owner) Also make sure controller has been already handed over to the manager or waiting to be accepted. If manager is already a potential controller, call acceptSplitControl()\",\"params\":{\"_split\":\"The address of the 0xSplit contract\",\"_splitMain\":\"The address of the 0xSplitMain\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateMember(address,uint32)\":{\"details\":\"Make sure member is in the registry Activity multiplier could be set within 0-100 (%) range (i.e. 50 -> part-time 100 -> full-time) but it's up to the implementer to establish the multiplier boundaries\",\"params\":{\"_activityMultiplier\":\"The member new activity multiplier\",\"_member\":\"The addres of the existing member\"}},\"updateSecondsActive()\":{\"details\":\"It should manage a lastActivityUpdate state variable to update activity based on last update epoch however for new members it should update seconds based each member startDate\"}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath_UD60x18_Sqrt_Overflow(uint256)\":[{\"notice\":\"Thrown when calculating the square root overflows UD60x18.\"}]},\"kind\":\"user\",\"methods\":{\"PERCENTAGE_SCALE()\":{\"notice\":\"constant to scale uints into percentages (1e6 == 100%)\"},\"acceptSplitControl()\":{\"notice\":\"Accepts control of the current 0xSplit contract\"},\"batchNewMember(address[],uint32[],uint32[])\":{\"notice\":\"Adds a new set of members to the registry\"},\"batchUpdateMember(address[],uint32[])\":{\"notice\":\"Updates the activity multiplier of a set of existing members\"},\"setNewMember(address,uint32,uint32)\":{\"notice\":\"Adds a new member to the registry\"},\"setSplit(address,address)\":{\"notice\":\"Updates the addresses for the 0xSplitMain proxy and 0xSplit contract\"},\"updateMember(address,uint32)\":{\"notice\":\"Updates the activity multiplier of an existing member\"},\"updateSecondsActive()\":{\"notice\":\"Updates seconds active for each member since the last update epoch\"},\"xReceive(bytes32,uint256,address,address,uint32,bytes)\":{\"notice\":\"The receiver function as required by the IXReceiver interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NetworkRegistryShaman.sol\":\"NetworkRegistryShaman\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@connext/interfaces/core/IConnext.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {ExecuteArgs, TransferInfo, DestinationTransferStatus} from \\\"../libraries/LibConnextStorage.sol\\\";\\nimport {TokenId} from \\\"../libraries/TokenId.sol\\\";\\n\\ninterface IConnext {\\n\\n  // ============ BRIDGE ==============\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData,\\n    uint256 _relayerFee\\n  ) external returns (bytes32);\\n\\n  function xcallIntoLocal(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function execute(ExecuteArgs calldata _args) external returns (bytes32 transferId);\\n\\n  function forceUpdateSlippage(TransferInfo calldata _params, uint256 _slippage) external;\\n\\n  function forceReceiveLocal(TransferInfo calldata _params) external;\\n\\n  function bumpTransfer(bytes32 _transferId) external payable;\\n\\n  function routedTransfers(bytes32 _transferId) external view returns (address[] memory);\\n\\n  function transferStatus(bytes32 _transferId) external view returns (DestinationTransferStatus);\\n\\n  function remote(uint32 _domain) external view returns (address);\\n\\n  function domain() external view returns (uint256);\\n\\n  function nonce() external view returns (uint256);\\n\\n  function approvedSequencers(address _sequencer) external view returns (bool);\\n\\n  function xAppConnectionManager() external view returns (address);\\n\\n  // ============ ROUTERS ==============\\n\\n  function LIQUIDITY_FEE_NUMERATOR() external view returns (uint256);\\n\\n  function LIQUIDITY_FEE_DENOMINATOR() external view returns (uint256);\\n\\n  function getRouterApproval(address _router) external view returns (bool);\\n\\n  function getRouterRecipient(address _router) external view returns (address);\\n\\n  function getRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwnerTimestamp(address _router) external view returns (uint256);\\n\\n  function maxRoutersPerTransfer() external view returns (uint256);\\n\\n  function routerBalances(address _router, address _asset) external view returns (uint256);\\n\\n  function getRouterApprovalForPortal(address _router) external view returns (bool);\\n\\n  function initializeRouter(address _owner, address _recipient) external;\\n\\n  function setRouterRecipient(address _router, address _recipient) external;\\n\\n  function proposeRouterOwner(address _router, address _proposed) external;\\n\\n  function acceptProposedRouterOwner(address _router) external;\\n\\n  function addRouterLiquidityFor(\\n    uint256 _amount,\\n    address _local,\\n    address _router\\n  ) external payable;\\n\\n  function addRouterLiquidity(uint256 _amount, address _local) external payable;\\n\\n  function removeRouterLiquidityFor(\\n    TokenId memory _canonical,\\n    uint256 _amount,\\n    address payable _to,\\n    address _router\\n  ) external;\\n\\n  function removeRouterLiquidity(TokenId memory _canonical, uint256 _amount, address payable _to) external;\\n\\n  // ============ TOKEN_FACET ==============\\n  function adoptedToCanonical(address _adopted) external view returns (TokenId memory);\\n\\n  function approvedAssets(TokenId calldata _canonical) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c2f287fe81216f7060acce25747374631b94ff9a87573e1c5d36df1a3a2fdf8\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/core/IXReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IXReceiver {\\n  function xReceive(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset,\\n    address _originSender,\\n    uint32 _origin,\\n    bytes memory _callData\\n  ) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x37a35045d40f3bde688c70bb631581cbc609796514319db1361e061da8d9349b\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/libraries/LibConnextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Enum representing status of destination transfer\\n * @dev Status is only assigned on the destination domain, will always be \\\"none\\\" for the\\n * origin domains\\n * @return uint - Index of value in enum\\n */\\nenum DestinationTransferStatus {\\n  None, // 0\\n  Reconciled, // 1\\n  Executed, // 2\\n  Completed // 3 - executed + reconciled\\n}\\n\\n/**\\n * @notice These are the parameters that will remain constant between the\\n * two chains. They are supplied on `xcall` and should be asserted on `execute`\\n * @property to - The account that receives funds, in the event of a crosschain call,\\n * will receive funds if the call fails.\\n *\\n * @param originDomain - The originating domain (i.e. where `xcall` is called)\\n * @param destinationDomain - The final domain (i.e. where `execute` / `reconcile` are called)\\\\\\n * @param canonicalDomain - The canonical domain of the asset you are bridging\\n * @param to - The address you are sending funds (and potentially data) to\\n * @param delegate - An address who can execute txs on behalf of `to`, in addition to allowing relayers\\n * @param receiveLocal - If true, will use the local asset on the destination instead of adopted.\\n * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\\n * @param slippage - Slippage user is willing to accept from original amount in expressed in BPS (i.e. if\\n * a user takes 1% slippage, this is expressed as 1_000)\\n * @param originSender - The msg.sender of the xcall\\n * @param bridgedAmt - The amount sent over the bridge (after potential AMM on xcall)\\n * @param normalizedIn - The amount sent to `xcall`, normalized to 18 decimals\\n * @param nonce - The nonce on the origin domain used to ensure the transferIds are unique\\n * @param canonicalId - The unique identifier of the canonical token corresponding to bridge assets\\n */\\nstruct TransferInfo {\\n  uint32 originDomain;\\n  uint32 destinationDomain;\\n  uint32 canonicalDomain;\\n  address to;\\n  address delegate;\\n  bool receiveLocal;\\n  bytes callData;\\n  uint256 slippage;\\n  address originSender;\\n  uint256 bridgedAmt;\\n  uint256 normalizedIn;\\n  uint256 nonce;\\n  bytes32 canonicalId;\\n}\\n\\n/**\\n * @notice\\n * @param params - The TransferInfo. These are consistent across sending and receiving chains.\\n * @param routers - The routers who you are sending the funds on behalf of.\\n * @param routerSignatures - Signatures belonging to the routers indicating permission to use funds\\n * for the signed transfer ID.\\n * @param sequencer - The sequencer who assigned the router path to this transfer.\\n * @param sequencerSignature - Signature produced by the sequencer for path assignment accountability\\n * for the path that was signed.\\n */\\nstruct ExecuteArgs {\\n  TransferInfo params;\\n  address[] routers;\\n  bytes[] routerSignatures;\\n  address sequencer;\\n  bytes sequencerSignature;\\n}\",\"keccak256\":\"0xb8581253c5ebe58445c37d344fafe6126d3f7a15784337b3571637cd0068de57\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/libraries/TokenId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ============= Structs =============\\n\\n// Tokens are identified by a TokenId:\\n// domain - 4 byte chain ID of the chain from which the token originates\\n// id - 32 byte identifier of the token address on the origin chain, in that chain's address format\\nstruct TokenId {\\n  uint32 domain;\\n  bytes32 id;\\n}\\n\",\"keccak256\":\"0xfa4e01760604863ea105e18380c243cd2250a7553d2b852f67ecb747f9916b6d\",\"license\":\"MIT OR Apache-2.0\"},\"@daohaus/baal-contracts/contracts/interfaces/IBaal.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IBaal {\\n    function lootToken() external view returns (address);\\n    function sharesToken() external view returns (address);\\n    function votingPeriod() external view returns (uint32);\\n    function gracePeriod() external view returns (uint32);\\n    function proposalCount() external view returns (uint32);\\n    function proposalOffering() external view returns (uint256);\\n    function quorumPercent() external view returns (uint256);\\n    function sponsorThreshold() external view returns (uint256);\\n    function minRetentionPercent() external view returns (uint256);\\n    function latestSponsoredProposalId() external view returns (uint32);\\n\\n    function setUp(bytes memory initializationParams) external;\\n    function multisendLibrary() external view returns (address);\\n    // Module\\n    function avatar() external view returns (address);\\n    function target() external view returns (address);\\n    function setAvatar(address avatar) external;\\n    function setTarget(address avatar) external;\\n    // BaseRelayRecipient\\n    function trustedForwarder() external view returns (address);\\n    function setTrustedForwarder(address trustedForwarderAddress) external;\\n\\n    function mintLoot(address[] calldata to, uint256[] calldata amount) external;\\n    function burnLoot(address[] calldata from, uint256[] calldata amount) external;\\n    function mintShares(address[] calldata to, uint256[] calldata amount) external;\\n    function burnShares(address[] calldata from, uint256[] calldata amount) external;\\n    function totalLoot() external view returns (uint256);\\n    function totalShares() external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function lootPaused() external view returns (bool);\\n    function sharesPaused() external view returns (bool);\\n    \\n    function shamans(address shaman) external view returns (uint256);\\n    function setShamans(address[] calldata shamans, uint256[] calldata permissions) external;\\n    function isAdmin(address shaman) external view returns (bool);\\n    function isManager(address shaman) external view returns (bool);\\n    function isGovernor(address shaman) external view returns (bool);\\n    function lockAdmin() external;\\n    function lockManager() external;\\n    function lockGovernor() external;\\n    function adminLock() external view returns (bool);\\n    function managerLock() external view returns (bool);\\n    function governorLock() external view returns (bool);\\n    function setAdminConfig(bool pauseShares, bool pauseLoot) external;\\n    function setGovernanceConfig(bytes memory governanceConfig) external;\\n\\n    function submitProposal(\\n        bytes calldata proposalData,\\n        uint32 expiration,\\n        uint256 baalGas,\\n        string calldata details\\n    ) external payable returns (uint256);\\n    function sponsorProposal(uint32 id) external;\\n    function processProposal(uint32 id, bytes calldata proposalData) external;\\n    function cancelProposal(uint32 id) external;\\n    function getProposalStatus(uint32 id) external returns (bool[4] memory);\\n    function submitVote(uint32 id, bool approved) external;\\n    function submitVoteWithSig(\\n        address voter,\\n        uint256 expiry,\\n        uint256 nonce,\\n        uint32 id,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function executeAsBaal(address to, uint256 value, bytes calldata data) external;\\n    function ragequit(address to, uint256 sharesToBurn, uint256 lootToBurn, address[] calldata tokens) external;\\n\\n    function hashOperation(bytes memory transactions) external pure returns (bytes32);\\n    function encodeMultisend(bytes[] memory calls, address target) external pure returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xa8e49237a041f30caf45f9999fe28fdaac6a847530f411761a9b493022622948\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@prb/math/src/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\n// Common.sol\\n//\\n// Common mathematical functions needed by both SD59x18 and UD60x18. Note that these global functions do not\\n// always operate with SD59x18 and UD60x18 numbers.\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                CUSTOM ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when the resultant value in {mulDiv} overflows uint256.\\nerror PRBMath_MulDiv_Overflow(uint256 x, uint256 y, uint256 denominator);\\n\\n/// @notice Thrown when the resultant value in {mulDiv18} overflows uint256.\\nerror PRBMath_MulDiv18_Overflow(uint256 x, uint256 y);\\n\\n/// @notice Thrown when one of the inputs passed to {mulDivSigned} is `type(int256).min`.\\nerror PRBMath_MulDivSigned_InputTooSmall();\\n\\n/// @notice Thrown when the resultant value in {mulDivSigned} overflows int256.\\nerror PRBMath_MulDivSigned_Overflow(int256 x, int256 y);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CONSTANTS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev The maximum value a uint128 number can have.\\nuint128 constant MAX_UINT128 = type(uint128).max;\\n\\n/// @dev The maximum value a uint40 number can have.\\nuint40 constant MAX_UINT40 = type(uint40).max;\\n\\n/// @dev The unit number, which the decimal precision of the fixed-point types.\\nuint256 constant UNIT = 1e18;\\n\\n/// @dev The unit number inverted mod 2^256.\\nuint256 constant UNIT_INVERSE = 78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n/// @dev The the largest power of two that divides the decimal value of `UNIT`. The logarithm of this value is the least significant\\n/// bit in the binary representation of `UNIT`.\\nuint256 constant UNIT_LPOTD = 262144;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Calculates the binary exponent of x using the binary fraction method.\\n/// @dev Has to use 192.64-bit fixed-point numbers. See https://ethereum.stackexchange.com/a/96594/24693.\\n/// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n/// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp2(uint256 x) pure returns (uint256 result) {\\n    unchecked {\\n        // Start from 0.5 in the 192.64-bit fixed-point format.\\n        result = 0x800000000000000000000000000000000000000000000000;\\n\\n        // The following logic multiplies the result by $\\\\sqrt{2^{-i}}$ when the bit at position i is 1. Key points:\\n        //\\n        // 1. Intermediate results will not overflow, as the starting point is 2^191 and all magic factors are under 2^65.\\n        // 2. The rationale for organizing the if statements into groups of 8 is gas savings. If the result of performing\\n        // a bitwise AND operation between x and any value in the array [0x80; 0x40; 0x20; 0x10; 0x08; 0x04; 0x02; 0x01] is 1,\\n        // we know that `x & 0xFF` is also 1.\\n        if (x & 0xFF00000000000000 > 0) {\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF000000000000 > 0) {\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF0000000000 > 0) {\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF00000000 > 0) {\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF000000 > 0) {\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF0000 > 0) {\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF00 > 0) {\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF > 0) {\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n        }\\n\\n        // In the code snippet below, two operations are executed simultaneously:\\n        //\\n        // 1. The result is multiplied by $(2^n + 1)$, where $2^n$ represents the integer part, and the additional 1\\n        // accounts for the initial guess of 0.5. This is achieved by subtracting from 191 instead of 192.\\n        // 2. The result is then converted to an unsigned 60.18-decimal fixed-point format.\\n        //\\n        // The underlying logic is based on the relationship $2^{191-ip} = 2^{ip} / 2^{191}$, where $ip$ denotes the,\\n        // integer part, $2^n$.\\n        result *= UNIT;\\n        result >>= (191 - (x >> 64));\\n    }\\n}\\n\\n/// @notice Finds the zero-based index of the first 1 in the binary representation of x.\\n///\\n/// @dev See the note on \\\"msb\\\" in this Wikipedia article: https://en.wikipedia.org/wiki/Find_first_set\\n///\\n/// Each step in this implementation is equivalent to this high-level code:\\n///\\n/// ```solidity\\n/// if (x >= 2 ** 128) {\\n///     x >>= 128;\\n///     result += 128;\\n/// }\\n/// ```\\n///\\n/// Where 128 is replaced with each respective power of two factor. See the full high-level implementation here:\\n/// https://gist.github.com/PaulRBerg/f932f8693f2733e30c4d479e8e980948\\n///\\n/// The Yul instructions used below are:\\n///\\n/// - \\\"gt\\\" is \\\"greater than\\\"\\n/// - \\\"or\\\" is the OR bitwise operator\\n/// - \\\"shl\\\" is \\\"shift left\\\"\\n/// - \\\"shr\\\" is \\\"shift right\\\"\\n///\\n/// @param x The uint256 number for which to find the index of the most significant bit.\\n/// @return result The index of the most significant bit as a uint256.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction msb(uint256 x) pure returns (uint256 result) {\\n    // 2^128\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^64\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^32\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(5, gt(x, 0xFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^16\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(4, gt(x, 0xFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^8\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(3, gt(x, 0xFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^4\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(2, gt(x, 0xF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^2\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(1, gt(x, 0x3))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^1\\n    // No need to shift x any more.\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := gt(x, 0x1)\\n        result := or(result, factor)\\n    }\\n}\\n\\n/// @notice Calculates x*y\\u00f7denominator with 512-bit precision.\\n///\\n/// @dev Credits to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n///\\n/// Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - The denominator must not be zero.\\n/// - The result must fit in uint256.\\n///\\n/// @param x The multiplicand as a uint256.\\n/// @param y The multiplier as a uint256.\\n/// @param denominator The divisor as a uint256.\\n/// @return result The result as a uint256.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mulDiv(uint256 x, uint256 y, uint256 denominator) pure returns (uint256 result) {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512-bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly (\\\"memory-safe\\\") {\\n        let mm := mulmod(x, y, not(0))\\n        prod0 := mul(x, y)\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division.\\n    if (prod1 == 0) {\\n        unchecked {\\n            return prod0 / denominator;\\n        }\\n    }\\n\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n    if (prod1 >= denominator) {\\n        revert PRBMath_MulDiv_Overflow(x, y, denominator);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    // 512 by 256 division\\n    ////////////////////////////////////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n    uint256 remainder;\\n    assembly (\\\"memory-safe\\\") {\\n        // Compute remainder using the mulmod Yul instruction.\\n        remainder := mulmod(x, y, denominator)\\n\\n        // Subtract 256 bit number from 512-bit number.\\n        prod1 := sub(prod1, gt(remainder, prod0))\\n        prod0 := sub(prod0, remainder)\\n    }\\n\\n    unchecked {\\n        // Calculate the largest power of two divisor of the denominator using the unary operator ~. This operation cannot overflow\\n        // because the denominator cannot be zero at this point in the function execution. The result is always >= 1.\\n        // For more detail, see https://cs.stackexchange.com/q/138556/92363.\\n        uint256 lpotdod = denominator & (~denominator + 1);\\n        uint256 flippedLpotdod;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            // Factor powers of two out of denominator.\\n            denominator := div(denominator, lpotdod)\\n\\n            // Divide [prod1 prod0] by lpotdod.\\n            prod0 := div(prod0, lpotdod)\\n\\n            // Get the flipped value `2^256 / lpotdod`. If the `lpotdod` is zero, the flipped value is one.\\n            // `sub(0, lpotdod)` produces the two's complement version of `lpotdod`, which is equivalent to flipping all the bits.\\n            // However, `div` interprets this value as an unsigned value: https://ethereum.stackexchange.com/q/147168/24693\\n            flippedLpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n        }\\n\\n        // Shift in bits from prod1 into prod0.\\n        prod0 |= prod1 * flippedLpotdod;\\n\\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n        // four bits. That is, denominator * inv = 1 mod 2^4.\\n        uint256 inverse = (3 * denominator) ^ 2;\\n\\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n        // in modular arithmetic, doubling the correct bits in each step.\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inverse;\\n    }\\n}\\n\\n/// @notice Calculates x*y\\u00f71e18 with 512-bit precision.\\n///\\n/// @dev A variant of {mulDiv} with constant folding, i.e. in which the denominator is hard coded to 1e18.\\n///\\n/// Notes:\\n/// - The body is purposely left uncommented; to understand how this works, see the documentation in {mulDiv}.\\n/// - The result is rounded toward zero.\\n/// - We take as an axiom that the result cannot be `MAX_UINT256` when x and y solve the following system of equations:\\n///\\n/// $$\\n/// \\\\begin{cases}\\n///     x * y = MAX\\\\_UINT256 * UNIT \\\\\\\\\\n///     (x * y) \\\\% UNIT \\\\geq \\\\frac{UNIT}{2}\\n/// \\\\end{cases}\\n/// $$\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {mulDiv}.\\n/// - The result must fit in uint256.\\n///\\n/// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n/// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n/// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mulDiv18(uint256 x, uint256 y) pure returns (uint256 result) {\\n    uint256 prod0;\\n    uint256 prod1;\\n    assembly (\\\"memory-safe\\\") {\\n        let mm := mulmod(x, y, not(0))\\n        prod0 := mul(x, y)\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    if (prod1 == 0) {\\n        unchecked {\\n            return prod0 / UNIT;\\n        }\\n    }\\n\\n    if (prod1 >= UNIT) {\\n        revert PRBMath_MulDiv18_Overflow(x, y);\\n    }\\n\\n    uint256 remainder;\\n    assembly (\\\"memory-safe\\\") {\\n        remainder := mulmod(x, y, UNIT)\\n        result :=\\n            mul(\\n                or(\\n                    div(sub(prod0, remainder), UNIT_LPOTD),\\n                    mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, UNIT_LPOTD), UNIT_LPOTD), 1))\\n                ),\\n                UNIT_INVERSE\\n            )\\n    }\\n}\\n\\n/// @notice Calculates x*y\\u00f7denominator with 512-bit precision.\\n///\\n/// @dev This is an extension of {mulDiv} for signed numbers, which works by computing the signs and the absolute values separately.\\n///\\n/// Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {mulDiv}.\\n/// - None of the inputs can be `type(int256).min`.\\n/// - The result must fit in int256.\\n///\\n/// @param x The multiplicand as an int256.\\n/// @param y The multiplier as an int256.\\n/// @param denominator The divisor as an int256.\\n/// @return result The result as an int256.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mulDivSigned(int256 x, int256 y, int256 denominator) pure returns (int256 result) {\\n    if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n        revert PRBMath_MulDivSigned_InputTooSmall();\\n    }\\n\\n    // Get hold of the absolute values of x, y and the denominator.\\n    uint256 xAbs;\\n    uint256 yAbs;\\n    uint256 dAbs;\\n    unchecked {\\n        xAbs = x < 0 ? uint256(-x) : uint256(x);\\n        yAbs = y < 0 ? uint256(-y) : uint256(y);\\n        dAbs = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n    }\\n\\n    // Compute the absolute value of x*y\\u00f7denominator. The result must fit in int256.\\n    uint256 resultAbs = mulDiv(xAbs, yAbs, dAbs);\\n    if (resultAbs > uint256(type(int256).max)) {\\n        revert PRBMath_MulDivSigned_Overflow(x, y);\\n    }\\n\\n    // Get the signs of x, y and the denominator.\\n    uint256 sx;\\n    uint256 sy;\\n    uint256 sd;\\n    assembly (\\\"memory-safe\\\") {\\n        // \\\"sgt\\\" is the \\\"signed greater than\\\" assembly instruction and \\\"sub(0,1)\\\" is -1 in two's complement.\\n        sx := sgt(x, sub(0, 1))\\n        sy := sgt(y, sub(0, 1))\\n        sd := sgt(denominator, sub(0, 1))\\n    }\\n\\n    // XOR over sx, sy and sd. What this does is to check whether there are 1 or 3 negative signs in the inputs.\\n    // If there are, the result should be negative. Otherwise, it should be positive.\\n    unchecked {\\n        result = sx ^ sy ^ sd == 0 ? -int256(resultAbs) : int256(resultAbs);\\n    }\\n}\\n\\n/// @notice Calculates the square root of x using the Babylonian method.\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n///\\n/// Notes:\\n/// - If x is not a perfect square, the result is rounded down.\\n/// - Credits to OpenZeppelin for the explanations in comments below.\\n///\\n/// @param x The uint256 number for which to calculate the square root.\\n/// @return result The result as a uint256.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction sqrt(uint256 x) pure returns (uint256 result) {\\n    if (x == 0) {\\n        return 0;\\n    }\\n\\n    // For our first guess, we calculate the biggest power of 2 which is smaller than the square root of x.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of x is a power of 2 such that we have:\\n    //\\n    // $$\\n    // msb(x) <= x <= 2*msb(x)$\\n    // $$\\n    //\\n    // We write $msb(x)$ as $2^k$, and we get:\\n    //\\n    // $$\\n    // k = log_2(x)\\n    // $$\\n    //\\n    // Thus, we can write the initial inequality as:\\n    //\\n    // $$\\n    // 2^{log_2(x)} <= x <= 2*2^{log_2(x)+1} \\\\\\\\\\n    // sqrt(2^k) <= sqrt(x) < sqrt(2^{k+1}) \\\\\\\\\\n    // 2^{k/2} <= sqrt(x) < 2^{(k+1)/2} <= 2^{(k/2)+1}\\n    // $$\\n    //\\n    // Consequently, $2^{log_2(x) /2} is a good first approximation of sqrt(x) with at least one correct bit.\\n    uint256 xAux = uint256(x);\\n    result = 1;\\n    if (xAux >= 2 ** 128) {\\n        xAux >>= 128;\\n        result <<= 64;\\n    }\\n    if (xAux >= 2 ** 64) {\\n        xAux >>= 64;\\n        result <<= 32;\\n    }\\n    if (xAux >= 2 ** 32) {\\n        xAux >>= 32;\\n        result <<= 16;\\n    }\\n    if (xAux >= 2 ** 16) {\\n        xAux >>= 16;\\n        result <<= 8;\\n    }\\n    if (xAux >= 2 ** 8) {\\n        xAux >>= 8;\\n        result <<= 4;\\n    }\\n    if (xAux >= 2 ** 4) {\\n        xAux >>= 4;\\n        result <<= 2;\\n    }\\n    if (xAux >= 2 ** 2) {\\n        result <<= 1;\\n    }\\n\\n    // At this point, `result` is an estimation with at least one bit of precision. We know the true value has at\\n    // most 128 bits, since it is the square root of a uint256. Newton's method converges quadratically (precision\\n    // doubles at every iteration). We thus need at most 7 iteration to turn our partial result with one bit of\\n    // precision into the expected uint128 result.\\n    unchecked {\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n\\n        // If x is not a perfect square, round the result toward zero.\\n        uint256 roundedResult = x / result;\\n        if (result >= roundedResult) {\\n            result = roundedResult;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x70b3a76443312b2c6c500996306a18e3d91e5d56fed0d898d98ca0bfb6225053\",\"license\":\"MIT\"},\"@prb/math/src/UD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\n/*\\n\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d \\u2588\\u2588\\u2554\\u2550\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551 \\u255a\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551 \\u2588\\u2588\\u2554\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n*/\\n\\nimport \\\"./ud60x18/Casting.sol\\\";\\nimport \\\"./ud60x18/Constants.sol\\\";\\nimport \\\"./ud60x18/Conversions.sol\\\";\\nimport \\\"./ud60x18/Errors.sol\\\";\\nimport \\\"./ud60x18/Helpers.sol\\\";\\nimport \\\"./ud60x18/Math.sol\\\";\\nimport \\\"./ud60x18/ValueType.sol\\\";\\n\",\"keccak256\":\"0xb98c6f74275914d279e8af6c502c2b1f50d5f6e1ed418d3b0153f5a193206c48\",\"license\":\"MIT\"},\"@prb/math/src/sd1x18/Casting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"../Common.sol\\\" as Common;\\nimport \\\"./Errors.sol\\\" as CastingErrors;\\nimport { SD59x18 } from \\\"../sd59x18/ValueType.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"../ud60x18/ValueType.sol\\\";\\nimport { SD1x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts an SD1x18 number into SD59x18.\\n/// @dev There is no overflow check because the domain of SD1x18 is a subset of SD59x18.\\nfunction intoSD59x18(SD1x18 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(int256(SD1x18.unwrap(x)));\\n}\\n\\n/// @notice Casts an SD1x18 number into UD2x18.\\n/// - x must be positive.\\nfunction intoUD2x18(SD1x18 x) pure returns (UD2x18 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUD2x18_Underflow(x);\\n    }\\n    result = UD2x18.wrap(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into UD60x18.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUD60x18(SD1x18 x) pure returns (UD60x18 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUD60x18_Underflow(x);\\n    }\\n    result = UD60x18.wrap(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into uint256.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUint256(SD1x18 x) pure returns (uint256 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUint256_Underflow(x);\\n    }\\n    result = uint256(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into uint128.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUint128(SD1x18 x) pure returns (uint128 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUint128_Underflow(x);\\n    }\\n    result = uint128(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(SD1x18 x) pure returns (uint40 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUint40_Underflow(x);\\n    }\\n    if (xInt > int64(uint64(Common.MAX_UINT40))) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUint40_Overflow(x);\\n    }\\n    result = uint40(uint64(xInt));\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction sd1x18(int64 x) pure returns (SD1x18 result) {\\n    result = SD1x18.wrap(x);\\n}\\n\\n/// @notice Unwraps an SD1x18 number into int64.\\nfunction unwrap(SD1x18 x) pure returns (int64 result) {\\n    result = SD1x18.unwrap(x);\\n}\\n\\n/// @notice Wraps an int64 number into SD1x18.\\nfunction wrap(int64 x) pure returns (SD1x18 result) {\\n    result = SD1x18.wrap(x);\\n}\\n\",\"keccak256\":\"0x9e49e2b37c1bb845861740805edaaef3fe951a7b96eef16ce84fbf76e8278670\",\"license\":\"MIT\"},\"@prb/math/src/sd1x18/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { SD1x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @dev Euler's number as an SD1x18 number.\\nSD1x18 constant E = SD1x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum value an SD1x18 number can have.\\nint64 constant uMAX_SD1x18 = 9_223372036854775807;\\nSD1x18 constant MAX_SD1x18 = SD1x18.wrap(uMAX_SD1x18);\\n\\n/// @dev The maximum value an SD1x18 number can have.\\nint64 constant uMIN_SD1x18 = -9_223372036854775808;\\nSD1x18 constant MIN_SD1x18 = SD1x18.wrap(uMIN_SD1x18);\\n\\n/// @dev PI as an SD1x18 number.\\nSD1x18 constant PI = SD1x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit number, which gives the decimal precision of SD1x18.\\nSD1x18 constant UNIT = SD1x18.wrap(1e18);\\nint256 constant uUNIT = 1e18;\\n\",\"keccak256\":\"0xb51aab4a2ea76f530dccbf3b7d4af24c8f3ceef67f3c574b58650466ea924a3f\",\"license\":\"MIT\"},\"@prb/math/src/sd1x18/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { SD1x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in UD2x18.\\nerror PRBMath_SD1x18_ToUD2x18_Underflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in UD60x18.\\nerror PRBMath_SD1x18_ToUD60x18_Underflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in uint128.\\nerror PRBMath_SD1x18_ToUint128_Underflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in uint256.\\nerror PRBMath_SD1x18_ToUint256_Underflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in uint40.\\nerror PRBMath_SD1x18_ToUint40_Overflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in uint40.\\nerror PRBMath_SD1x18_ToUint40_Underflow(SD1x18 x);\\n\",\"keccak256\":\"0x836cb42ba619ca369fd4765bc47fefc3c3621369c5861882af14660aca5057ee\",\"license\":\"MIT\"},\"@prb/math/src/sd1x18/ValueType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Casting.sol\\\" as Casting;\\n\\n/// @notice The signed 1.18-decimal fixed-point number representation, which can have up to 1 digit and up to 18\\n/// decimals. The values of this are bound by the minimum and the maximum values permitted by the underlying Solidity\\n/// type int64. This is useful when end users want to use int64 to save gas, e.g. with tight variable packing in contract\\n/// storage.\\ntype SD1x18 is int64;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Casting.intoSD59x18,\\n    Casting.intoUD2x18,\\n    Casting.intoUD60x18,\\n    Casting.intoUint256,\\n    Casting.intoUint128,\\n    Casting.intoUint40,\\n    Casting.unwrap\\n} for SD1x18 global;\\n\",\"keccak256\":\"0x2f86f1aa9fca42f40808b51a879b406ac51817647bdb9642f8a79dd8fdb754a7\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Casting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Errors.sol\\\" as CastingErrors;\\nimport { MAX_UINT128, MAX_UINT40 } from \\\"../Common.sol\\\";\\nimport { uMAX_SD1x18, uMIN_SD1x18 } from \\\"../sd1x18/Constants.sol\\\";\\nimport { SD1x18 } from \\\"../sd1x18/ValueType.sol\\\";\\nimport { uMAX_UD2x18 } from \\\"../ud2x18/Constants.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"../ud60x18/ValueType.sol\\\";\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts an SD59x18 number into int256.\\n/// @dev This is basically a functional alias for {unwrap}.\\nfunction intoInt256(SD59x18 x) pure returns (int256 result) {\\n    result = SD59x18.unwrap(x);\\n}\\n\\n/// @notice Casts an SD59x18 number into SD1x18.\\n/// @dev Requirements:\\n/// - x must be greater than or equal to `uMIN_SD1x18`.\\n/// - x must be less than or equal to `uMAX_SD1x18`.\\nfunction intoSD1x18(SD59x18 x) pure returns (SD1x18 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < uMIN_SD1x18) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoSD1x18_Underflow(x);\\n    }\\n    if (xInt > uMAX_SD1x18) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoSD1x18_Overflow(x);\\n    }\\n    result = SD1x18.wrap(int64(xInt));\\n}\\n\\n/// @notice Casts an SD59x18 number into UD2x18.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `uMAX_UD2x18`.\\nfunction intoUD2x18(SD59x18 x) pure returns (UD2x18 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUD2x18_Underflow(x);\\n    }\\n    if (xInt > int256(uint256(uMAX_UD2x18))) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUD2x18_Overflow(x);\\n    }\\n    result = UD2x18.wrap(uint64(uint256(xInt)));\\n}\\n\\n/// @notice Casts an SD59x18 number into UD60x18.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUD60x18(SD59x18 x) pure returns (UD60x18 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUD60x18_Underflow(x);\\n    }\\n    result = UD60x18.wrap(uint256(xInt));\\n}\\n\\n/// @notice Casts an SD59x18 number into uint256.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUint256(SD59x18 x) pure returns (uint256 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint256_Underflow(x);\\n    }\\n    result = uint256(xInt);\\n}\\n\\n/// @notice Casts an SD59x18 number into uint128.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `uMAX_UINT128`.\\nfunction intoUint128(SD59x18 x) pure returns (uint128 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint128_Underflow(x);\\n    }\\n    if (xInt > int256(uint256(MAX_UINT128))) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint128_Overflow(x);\\n    }\\n    result = uint128(uint256(xInt));\\n}\\n\\n/// @notice Casts an SD59x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(SD59x18 x) pure returns (uint40 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint40_Underflow(x);\\n    }\\n    if (xInt > int256(uint256(MAX_UINT40))) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint40_Overflow(x);\\n    }\\n    result = uint40(uint256(xInt));\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction sd(int256 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(x);\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction sd59x18(int256 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(x);\\n}\\n\\n/// @notice Unwraps an SD59x18 number into int256.\\nfunction unwrap(SD59x18 x) pure returns (int256 result) {\\n    result = SD59x18.unwrap(x);\\n}\\n\\n/// @notice Wraps an int256 number into SD59x18.\\nfunction wrap(int256 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(x);\\n}\\n\",\"keccak256\":\"0x3b21b60ec2998c3ae32f647412da51d3683b3f183a807198cc8d157499484f99\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n// NOTICE: the \\\"u\\\" prefix stands for \\\"unwrapped\\\".\\n\\n/// @dev Euler's number as an SD59x18 number.\\nSD59x18 constant E = SD59x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum input permitted in {exp}.\\nint256 constant uEXP_MAX_INPUT = 133_084258667509499440;\\nSD59x18 constant EXP_MAX_INPUT = SD59x18.wrap(uEXP_MAX_INPUT);\\n\\n/// @dev The maximum input permitted in {exp2}.\\nint256 constant uEXP2_MAX_INPUT = 192e18 - 1;\\nSD59x18 constant EXP2_MAX_INPUT = SD59x18.wrap(uEXP2_MAX_INPUT);\\n\\n/// @dev Half the UNIT number.\\nint256 constant uHALF_UNIT = 0.5e18;\\nSD59x18 constant HALF_UNIT = SD59x18.wrap(uHALF_UNIT);\\n\\n/// @dev $log_2(10)$ as an SD59x18 number.\\nint256 constant uLOG2_10 = 3_321928094887362347;\\nSD59x18 constant LOG2_10 = SD59x18.wrap(uLOG2_10);\\n\\n/// @dev $log_2(e)$ as an SD59x18 number.\\nint256 constant uLOG2_E = 1_442695040888963407;\\nSD59x18 constant LOG2_E = SD59x18.wrap(uLOG2_E);\\n\\n/// @dev The maximum value an SD59x18 number can have.\\nint256 constant uMAX_SD59x18 = 57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\nSD59x18 constant MAX_SD59x18 = SD59x18.wrap(uMAX_SD59x18);\\n\\n/// @dev The maximum whole value an SD59x18 number can have.\\nint256 constant uMAX_WHOLE_SD59x18 = 57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\nSD59x18 constant MAX_WHOLE_SD59x18 = SD59x18.wrap(uMAX_WHOLE_SD59x18);\\n\\n/// @dev The minimum value an SD59x18 number can have.\\nint256 constant uMIN_SD59x18 = -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\nSD59x18 constant MIN_SD59x18 = SD59x18.wrap(uMIN_SD59x18);\\n\\n/// @dev The minimum whole value an SD59x18 number can have.\\nint256 constant uMIN_WHOLE_SD59x18 = -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\nSD59x18 constant MIN_WHOLE_SD59x18 = SD59x18.wrap(uMIN_WHOLE_SD59x18);\\n\\n/// @dev PI as an SD59x18 number.\\nSD59x18 constant PI = SD59x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit number, which gives the decimal precision of SD59x18.\\nint256 constant uUNIT = 1e18;\\nSD59x18 constant UNIT = SD59x18.wrap(1e18);\\n\\n/// @dev The unit number squared.\\nint256 constant uUNIT_SQUARED = 1e36;\\nSD59x18 constant UNIT_SQUARED = SD59x18.wrap(uUNIT_SQUARED);\\n\\n/// @dev Zero as an SD59x18 number.\\nSD59x18 constant ZERO = SD59x18.wrap(0);\\n\",\"keccak256\":\"0xe0a1ca1a7b5b2d637cff83a8caa3d2e67a6a34f7ee9df58a9ca5d5fa268c474a\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Thrown when taking the absolute value of `MIN_SD59x18`.\\nerror PRBMath_SD59x18_Abs_MinSD59x18();\\n\\n/// @notice Thrown when ceiling a number overflows SD59x18.\\nerror PRBMath_SD59x18_Ceil_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMath_SD59x18_Convert_Overflow(int256 x);\\n\\n/// @notice Thrown when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMath_SD59x18_Convert_Underflow(int256 x);\\n\\n/// @notice Thrown when dividing two numbers and one of them is `MIN_SD59x18`.\\nerror PRBMath_SD59x18_Div_InputTooSmall();\\n\\n/// @notice Thrown when dividing two numbers and one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMath_SD59x18_Div_Overflow(SD59x18 x, SD59x18 y);\\n\\n/// @notice Thrown when taking the natural exponent of a base greater than 133_084258667509499441.\\nerror PRBMath_SD59x18_Exp_InputTooBig(SD59x18 x);\\n\\n/// @notice Thrown when taking the binary exponent of a base greater than 192e18.\\nerror PRBMath_SD59x18_Exp2_InputTooBig(SD59x18 x);\\n\\n/// @notice Thrown when flooring a number underflows SD59x18.\\nerror PRBMath_SD59x18_Floor_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when taking the geometric mean of two numbers and their product is negative.\\nerror PRBMath_SD59x18_Gm_NegativeProduct(SD59x18 x, SD59x18 y);\\n\\n/// @notice Thrown when taking the geometric mean of two numbers and multiplying them overflows SD59x18.\\nerror PRBMath_SD59x18_Gm_Overflow(SD59x18 x, SD59x18 y);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in SD1x18.\\nerror PRBMath_SD59x18_IntoSD1x18_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in SD1x18.\\nerror PRBMath_SD59x18_IntoSD1x18_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in UD2x18.\\nerror PRBMath_SD59x18_IntoUD2x18_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in UD2x18.\\nerror PRBMath_SD59x18_IntoUD2x18_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in UD60x18.\\nerror PRBMath_SD59x18_IntoUD60x18_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint128.\\nerror PRBMath_SD59x18_IntoUint128_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint128.\\nerror PRBMath_SD59x18_IntoUint128_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint256.\\nerror PRBMath_SD59x18_IntoUint256_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint40.\\nerror PRBMath_SD59x18_IntoUint40_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint40.\\nerror PRBMath_SD59x18_IntoUint40_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when taking the logarithm of a number less than or equal to zero.\\nerror PRBMath_SD59x18_Log_InputTooSmall(SD59x18 x);\\n\\n/// @notice Thrown when multiplying two numbers and one of the inputs is `MIN_SD59x18`.\\nerror PRBMath_SD59x18_Mul_InputTooSmall();\\n\\n/// @notice Thrown when multiplying two numbers and the intermediary absolute result overflows SD59x18.\\nerror PRBMath_SD59x18_Mul_Overflow(SD59x18 x, SD59x18 y);\\n\\n/// @notice Thrown when raising a number to a power and hte intermediary absolute result overflows SD59x18.\\nerror PRBMath_SD59x18_Powu_Overflow(SD59x18 x, uint256 y);\\n\\n/// @notice Thrown when taking the square root of a negative number.\\nerror PRBMath_SD59x18_Sqrt_NegativeInput(SD59x18 x);\\n\\n/// @notice Thrown when the calculating the square root overflows SD59x18.\\nerror PRBMath_SD59x18_Sqrt_Overflow(SD59x18 x);\\n\",\"keccak256\":\"0x83ee24e41d235bc05cb641d2c5c16c67b17fa00e4593661a8d14350435d4df04\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { wrap } from \\\"./Casting.sol\\\";\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Implements the checked addition operation (+) in the SD59x18 type.\\nfunction add(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    return wrap(x.unwrap() + y.unwrap());\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the SD59x18 type.\\nfunction and(SD59x18 x, int256 bits) pure returns (SD59x18 result) {\\n    return wrap(x.unwrap() & bits);\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the SD59x18 type.\\nfunction and2(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    return wrap(x.unwrap() & y.unwrap());\\n}\\n\\n/// @notice Implements the equal (=) operation in the SD59x18 type.\\nfunction eq(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() == y.unwrap();\\n}\\n\\n/// @notice Implements the greater than operation (>) in the SD59x18 type.\\nfunction gt(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() > y.unwrap();\\n}\\n\\n/// @notice Implements the greater than or equal to operation (>=) in the SD59x18 type.\\nfunction gte(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() >= y.unwrap();\\n}\\n\\n/// @notice Implements a zero comparison check function in the SD59x18 type.\\nfunction isZero(SD59x18 x) pure returns (bool result) {\\n    result = x.unwrap() == 0;\\n}\\n\\n/// @notice Implements the left shift operation (<<) in the SD59x18 type.\\nfunction lshift(SD59x18 x, uint256 bits) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() << bits);\\n}\\n\\n/// @notice Implements the lower than operation (<) in the SD59x18 type.\\nfunction lt(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() < y.unwrap();\\n}\\n\\n/// @notice Implements the lower than or equal to operation (<=) in the SD59x18 type.\\nfunction lte(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() <= y.unwrap();\\n}\\n\\n/// @notice Implements the unchecked modulo operation (%) in the SD59x18 type.\\nfunction mod(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() % y.unwrap());\\n}\\n\\n/// @notice Implements the not equal operation (!=) in the SD59x18 type.\\nfunction neq(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() != y.unwrap();\\n}\\n\\n/// @notice Implements the NOT (~) bitwise operation in the SD59x18 type.\\nfunction not(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(~x.unwrap());\\n}\\n\\n/// @notice Implements the OR (|) bitwise operation in the SD59x18 type.\\nfunction or(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() | y.unwrap());\\n}\\n\\n/// @notice Implements the right shift operation (>>) in the SD59x18 type.\\nfunction rshift(SD59x18 x, uint256 bits) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() >> bits);\\n}\\n\\n/// @notice Implements the checked subtraction operation (-) in the SD59x18 type.\\nfunction sub(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() - y.unwrap());\\n}\\n\\n/// @notice Implements the checked unary minus operation (-) in the SD59x18 type.\\nfunction unary(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(-x.unwrap());\\n}\\n\\n/// @notice Implements the unchecked addition operation (+) in the SD59x18 type.\\nfunction uncheckedAdd(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    unchecked {\\n        result = wrap(x.unwrap() + y.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the unchecked subtraction operation (-) in the SD59x18 type.\\nfunction uncheckedSub(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    unchecked {\\n        result = wrap(x.unwrap() - y.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the unchecked unary minus operation (-) in the SD59x18 type.\\nfunction uncheckedUnary(SD59x18 x) pure returns (SD59x18 result) {\\n    unchecked {\\n        result = wrap(-x.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the XOR (^) bitwise operation in the SD59x18 type.\\nfunction xor(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() ^ y.unwrap());\\n}\\n\",\"keccak256\":\"0x208570f1657cf730cb6c3d81aa14030e0d45cf906cdedea5059369d7df4bb716\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"../Common.sol\\\" as Common;\\nimport \\\"./Errors.sol\\\" as Errors;\\nimport {\\n    uEXP_MAX_INPUT,\\n    uEXP2_MAX_INPUT,\\n    uHALF_UNIT,\\n    uLOG2_10,\\n    uLOG2_E,\\n    uMAX_SD59x18,\\n    uMAX_WHOLE_SD59x18,\\n    uMIN_SD59x18,\\n    uMIN_WHOLE_SD59x18,\\n    UNIT,\\n    uUNIT,\\n    uUNIT_SQUARED,\\n    ZERO\\n} from \\\"./Constants.sol\\\";\\nimport { wrap } from \\\"./Helpers.sol\\\";\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Calculates the absolute value of x.\\n///\\n/// @dev Requirements:\\n/// - x must be greater than `MIN_SD59x18`.\\n///\\n/// @param x The SD59x18 number for which to calculate the absolute value.\\n/// @param result The absolute value of x as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction abs(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt == uMIN_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Abs_MinSD59x18();\\n    }\\n    result = xInt < 0 ? wrap(-xInt) : x;\\n}\\n\\n/// @notice Calculates the arithmetic average of x and y.\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// @param x The first operand as an SD59x18 number.\\n/// @param y The second operand as an SD59x18 number.\\n/// @return result The arithmetic average as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction avg(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n\\n    unchecked {\\n        // This operation is equivalent to `x / 2 +  y / 2`, and it can never overflow.\\n        int256 sum = (xInt >> 1) + (yInt >> 1);\\n\\n        if (sum < 0) {\\n            // If at least one of x and y is odd, add 1 to the result, because shifting negative numbers to the right\\n            // rounds toward negative infinity. The right part is equivalent to `sum + (x % 2 == 1 || y % 2 == 1)`.\\n            assembly (\\\"memory-safe\\\") {\\n                result := add(sum, and(or(xInt, yInt), 1))\\n            }\\n        } else {\\n            // Add 1 if both x and y are odd to account for the double 0.5 remainder truncated after shifting.\\n            result = wrap(sum + (xInt & yInt & 1));\\n        }\\n    }\\n}\\n\\n/// @notice Yields the smallest whole number greater than or equal to x.\\n///\\n/// @dev Optimized for fractional value inputs, because every whole value has (1e18 - 1) fractional counterparts.\\n/// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n///\\n/// Requirements:\\n/// - x must be less than or equal to `MAX_WHOLE_SD59x18`.\\n///\\n/// @param x The SD59x18 number to ceil.\\n/// @param result The smallest whole number greater than or equal to x, as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction ceil(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt > uMAX_WHOLE_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Ceil_Overflow(x);\\n    }\\n\\n    int256 remainder = xInt % uUNIT;\\n    if (remainder == 0) {\\n        result = x;\\n    } else {\\n        unchecked {\\n            // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n            int256 resultInt = xInt - remainder;\\n            if (xInt > 0) {\\n                resultInt += uUNIT;\\n            }\\n            result = wrap(resultInt);\\n        }\\n    }\\n}\\n\\n/// @notice Divides two SD59x18 numbers, returning a new SD59x18 number.\\n///\\n/// @dev This is an extension of {Common.mulDiv} for signed numbers, which works by computing the signs and the absolute\\n/// values separately.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv}.\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {Common.mulDiv}.\\n/// - None of the inputs can be `MIN_SD59x18`.\\n/// - The denominator must not be zero.\\n/// - The result must fit in SD59x18.\\n///\\n/// @param x The numerator as an SD59x18 number.\\n/// @param y The denominator as an SD59x18 number.\\n/// @param result The quotient as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction div(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n    if (xInt == uMIN_SD59x18 || yInt == uMIN_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Div_InputTooSmall();\\n    }\\n\\n    // Get hold of the absolute values of x and y.\\n    uint256 xAbs;\\n    uint256 yAbs;\\n    unchecked {\\n        xAbs = xInt < 0 ? uint256(-xInt) : uint256(xInt);\\n        yAbs = yInt < 0 ? uint256(-yInt) : uint256(yInt);\\n    }\\n\\n    // Compute the absolute value (x*UNIT\\u00f7y). The resulting value must fit in SD59x18.\\n    uint256 resultAbs = Common.mulDiv(xAbs, uint256(uUNIT), yAbs);\\n    if (resultAbs > uint256(uMAX_SD59x18)) {\\n        revert Errors.PRBMath_SD59x18_Div_Overflow(x, y);\\n    }\\n\\n    // Check if x and y have the same sign using two's complement representation. The left-most bit represents the sign (1 for\\n    // negative, 0 for positive or zero).\\n    bool sameSign = (xInt ^ yInt) > -1;\\n\\n    // If the inputs have the same sign, the result should be positive. Otherwise, it should be negative.\\n    unchecked {\\n        result = wrap(sameSign ? int256(resultAbs) : -int256(resultAbs));\\n    }\\n}\\n\\n/// @notice Calculates the natural exponent of x using the following formula:\\n///\\n/// $$\\n/// e^x = 2^{x * log_2{e}}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {exp2}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {exp2}.\\n/// - x must be less than 133_084258667509499441.\\n///\\n/// @param x The exponent as an SD59x18 number.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n\\n    // This check prevents values greater than 192e18 from being passed to {exp2}.\\n    if (xInt > uEXP_MAX_INPUT) {\\n        revert Errors.PRBMath_SD59x18_Exp_InputTooBig(x);\\n    }\\n\\n    unchecked {\\n        // Inline the fixed-point multiplication to save gas.\\n        int256 doubleUnitProduct = xInt * uLOG2_E;\\n        result = exp2(wrap(doubleUnitProduct / uUNIT));\\n    }\\n}\\n\\n/// @notice Calculates the binary exponent of x using the binary fraction method using the following formula:\\n///\\n/// $$\\n/// 2^{-x} = \\\\frac{1}{2^x}\\n/// $$\\n///\\n/// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n///\\n/// Notes:\\n/// - If x is less than -59_794705707972522261, the result is zero.\\n///\\n/// Requirements:\\n/// - x must be less than 192e18.\\n/// - The result must fit in SD59x18.\\n///\\n/// @param x The exponent as an SD59x18 number.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp2(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt < 0) {\\n        // The inverse of any number less than this is truncated to zero.\\n        if (xInt < -59_794705707972522261) {\\n            return ZERO;\\n        }\\n\\n        unchecked {\\n            // Inline the fixed-point inversion to save gas.\\n            result = wrap(uUNIT_SQUARED / exp2(wrap(-xInt)).unwrap());\\n        }\\n    } else {\\n        // Numbers greater than or equal to 192e18 don't fit in the 192.64-bit format.\\n        if (xInt > uEXP2_MAX_INPUT) {\\n            revert Errors.PRBMath_SD59x18_Exp2_InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x_192x64 = uint256((xInt << 64) / uUNIT);\\n\\n            // It is safe to cast the result to int256 due to the checks above.\\n            result = wrap(int256(Common.exp2(x_192x64)));\\n        }\\n    }\\n}\\n\\n/// @notice Yields the greatest whole number less than or equal to x.\\n///\\n/// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional\\n/// counterparts. See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n///\\n/// Requirements:\\n/// - x must be greater than or equal to `MIN_WHOLE_SD59x18`.\\n///\\n/// @param x The SD59x18 number to floor.\\n/// @param result The greatest whole number less than or equal to x, as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction floor(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt < uMIN_WHOLE_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Floor_Underflow(x);\\n    }\\n\\n    int256 remainder = xInt % uUNIT;\\n    if (remainder == 0) {\\n        result = x;\\n    } else {\\n        unchecked {\\n            // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n            int256 resultInt = xInt - remainder;\\n            if (xInt < 0) {\\n                resultInt -= uUNIT;\\n            }\\n            result = wrap(resultInt);\\n        }\\n    }\\n}\\n\\n/// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right.\\n/// of the radix point for negative numbers.\\n/// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n/// @param x The SD59x18 number to get the fractional part of.\\n/// @param result The fractional part of x as an SD59x18 number.\\nfunction frac(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() % uUNIT);\\n}\\n\\n/// @notice Calculates the geometric mean of x and y, i.e. $\\\\sqrt{x * y}$.\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x * y must fit in SD59x18.\\n/// - x * y must not be negative, since complex numbers are not supported.\\n///\\n/// @param x The first operand as an SD59x18 number.\\n/// @param y The second operand as an SD59x18 number.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction gm(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n    if (xInt == 0 || yInt == 0) {\\n        return ZERO;\\n    }\\n\\n    unchecked {\\n        // Equivalent to `xy / x != y`. Checking for overflow this way is faster than letting Solidity do it.\\n        int256 xyInt = xInt * yInt;\\n        if (xyInt / xInt != yInt) {\\n            revert Errors.PRBMath_SD59x18_Gm_Overflow(x, y);\\n        }\\n\\n        // The product must not be negative, since complex numbers are not supported.\\n        if (xyInt < 0) {\\n            revert Errors.PRBMath_SD59x18_Gm_NegativeProduct(x, y);\\n        }\\n\\n        // We don't need to multiply the result by `UNIT` here because the x*y product picked up a factor of `UNIT`\\n        // during multiplication. See the comments in {Common.sqrt}.\\n        uint256 resultUint = Common.sqrt(uint256(xyInt));\\n        result = wrap(int256(resultUint));\\n    }\\n}\\n\\n/// @notice Calculates the inverse of x.\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x must not be zero.\\n///\\n/// @param x The SD59x18 number for which to calculate the inverse.\\n/// @return result The inverse as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction inv(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(uUNIT_SQUARED / x.unwrap());\\n}\\n\\n/// @notice Calculates the natural logarithm of x using the following formula:\\n///\\n/// $$\\n/// ln{x} = log_2{x} / log_2{e}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2}.\\n/// - The precision isn't sufficiently fine-grained to return exactly `UNIT` when the input is `E`.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {log2}.\\n///\\n/// @param x The SD59x18 number for which to calculate the natural logarithm.\\n/// @return result The natural logarithm as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction ln(SD59x18 x) pure returns (SD59x18 result) {\\n    // Inline the fixed-point multiplication to save gas. This is overflow-safe because the maximum value that\\n    // {log2} can return is ~195_205294292027477728.\\n    result = wrap(log2(x).unwrap() * uUNIT / uLOG2_E);\\n}\\n\\n/// @notice Calculates the common logarithm of x using the following formula:\\n///\\n/// $$\\n/// log_{10}{x} = log_2{x} / log_2{10}\\n/// $$\\n///\\n/// However, if x is an exact power of ten, a hard coded value is returned.\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {log2}.\\n///\\n/// @param x The SD59x18 number for which to calculate the common logarithm.\\n/// @return result The common logarithm as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction log10(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt < 0) {\\n        revert Errors.PRBMath_SD59x18_Log_InputTooSmall(x);\\n    }\\n\\n    // Note that the `mul` in this block is the standard multiplication operation, not {SD59x18.mul}.\\n    // prettier-ignore\\n    assembly (\\\"memory-safe\\\") {\\n        switch x\\n        case 1 { result := mul(uUNIT, sub(0, 18)) }\\n        case 10 { result := mul(uUNIT, sub(1, 18)) }\\n        case 100 { result := mul(uUNIT, sub(2, 18)) }\\n        case 1000 { result := mul(uUNIT, sub(3, 18)) }\\n        case 10000 { result := mul(uUNIT, sub(4, 18)) }\\n        case 100000 { result := mul(uUNIT, sub(5, 18)) }\\n        case 1000000 { result := mul(uUNIT, sub(6, 18)) }\\n        case 10000000 { result := mul(uUNIT, sub(7, 18)) }\\n        case 100000000 { result := mul(uUNIT, sub(8, 18)) }\\n        case 1000000000 { result := mul(uUNIT, sub(9, 18)) }\\n        case 10000000000 { result := mul(uUNIT, sub(10, 18)) }\\n        case 100000000000 { result := mul(uUNIT, sub(11, 18)) }\\n        case 1000000000000 { result := mul(uUNIT, sub(12, 18)) }\\n        case 10000000000000 { result := mul(uUNIT, sub(13, 18)) }\\n        case 100000000000000 { result := mul(uUNIT, sub(14, 18)) }\\n        case 1000000000000000 { result := mul(uUNIT, sub(15, 18)) }\\n        case 10000000000000000 { result := mul(uUNIT, sub(16, 18)) }\\n        case 100000000000000000 { result := mul(uUNIT, sub(17, 18)) }\\n        case 1000000000000000000 { result := 0 }\\n        case 10000000000000000000 { result := uUNIT }\\n        case 100000000000000000000 { result := mul(uUNIT, 2) }\\n        case 1000000000000000000000 { result := mul(uUNIT, 3) }\\n        case 10000000000000000000000 { result := mul(uUNIT, 4) }\\n        case 100000000000000000000000 { result := mul(uUNIT, 5) }\\n        case 1000000000000000000000000 { result := mul(uUNIT, 6) }\\n        case 10000000000000000000000000 { result := mul(uUNIT, 7) }\\n        case 100000000000000000000000000 { result := mul(uUNIT, 8) }\\n        case 1000000000000000000000000000 { result := mul(uUNIT, 9) }\\n        case 10000000000000000000000000000 { result := mul(uUNIT, 10) }\\n        case 100000000000000000000000000000 { result := mul(uUNIT, 11) }\\n        case 1000000000000000000000000000000 { result := mul(uUNIT, 12) }\\n        case 10000000000000000000000000000000 { result := mul(uUNIT, 13) }\\n        case 100000000000000000000000000000000 { result := mul(uUNIT, 14) }\\n        case 1000000000000000000000000000000000 { result := mul(uUNIT, 15) }\\n        case 10000000000000000000000000000000000 { result := mul(uUNIT, 16) }\\n        case 100000000000000000000000000000000000 { result := mul(uUNIT, 17) }\\n        case 1000000000000000000000000000000000000 { result := mul(uUNIT, 18) }\\n        case 10000000000000000000000000000000000000 { result := mul(uUNIT, 19) }\\n        case 100000000000000000000000000000000000000 { result := mul(uUNIT, 20) }\\n        case 1000000000000000000000000000000000000000 { result := mul(uUNIT, 21) }\\n        case 10000000000000000000000000000000000000000 { result := mul(uUNIT, 22) }\\n        case 100000000000000000000000000000000000000000 { result := mul(uUNIT, 23) }\\n        case 1000000000000000000000000000000000000000000 { result := mul(uUNIT, 24) }\\n        case 10000000000000000000000000000000000000000000 { result := mul(uUNIT, 25) }\\n        case 100000000000000000000000000000000000000000000 { result := mul(uUNIT, 26) }\\n        case 1000000000000000000000000000000000000000000000 { result := mul(uUNIT, 27) }\\n        case 10000000000000000000000000000000000000000000000 { result := mul(uUNIT, 28) }\\n        case 100000000000000000000000000000000000000000000000 { result := mul(uUNIT, 29) }\\n        case 1000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 30) }\\n        case 10000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 31) }\\n        case 100000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 32) }\\n        case 1000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 33) }\\n        case 10000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 34) }\\n        case 100000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 35) }\\n        case 1000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 36) }\\n        case 10000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 37) }\\n        case 100000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 38) }\\n        case 1000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 39) }\\n        case 10000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 40) }\\n        case 100000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 41) }\\n        case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 42) }\\n        case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 43) }\\n        case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 44) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 45) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 46) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 47) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 48) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 49) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 50) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 51) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 52) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 53) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 54) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 55) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 56) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 57) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 58) }\\n        default { result := uMAX_SD59x18 }\\n    }\\n\\n    if (result.unwrap() == uMAX_SD59x18) {\\n        unchecked {\\n            // Inline the fixed-point division to save gas.\\n            result = wrap(log2(x).unwrap() * uUNIT / uLOG2_10);\\n        }\\n    }\\n}\\n\\n/// @notice Calculates the binary logarithm of x using the iterative approximation algorithm:\\n///\\n/// $$\\n/// log_2{x} = n + log_2{y}, \\\\text{ where } y = x*2^{-n}, \\\\ y \\\\in [1, 2)\\n/// $$\\n///\\n/// For $0 \\\\leq x \\\\lt 1$, the input is inverted:\\n///\\n/// $$\\n/// log_2{x} = -log_2{\\\\frac{1}{x}}\\n/// $$\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation.\\n///\\n/// Notes:\\n/// - Due to the lossy precision of the iterative approximation, the results are not perfectly accurate to the last decimal.\\n///\\n/// Requirements:\\n/// - x must be greater than zero.\\n///\\n/// @param x The SD59x18 number for which to calculate the binary logarithm.\\n/// @return result The binary logarithm as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction log2(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt <= 0) {\\n        revert Errors.PRBMath_SD59x18_Log_InputTooSmall(x);\\n    }\\n\\n    unchecked {\\n        int256 sign;\\n        if (xInt >= uUNIT) {\\n            sign = 1;\\n        } else {\\n            sign = -1;\\n            // Inline the fixed-point inversion to save gas.\\n            xInt = uUNIT_SQUARED / xInt;\\n        }\\n\\n        // Calculate the integer part of the logarithm.\\n        uint256 n = Common.msb(uint256(xInt / uUNIT));\\n\\n        // This is the integer part of the logarithm as an SD59x18 number. The operation can't overflow\\n        // because n is at most 255, `UNIT` is 1e18, and the sign is either 1 or -1.\\n        int256 resultInt = int256(n) * uUNIT;\\n\\n        // Calculate $y = x * 2^{-n}$.\\n        int256 y = xInt >> n;\\n\\n        // If y is the unit number, the fractional part is zero.\\n        if (y == uUNIT) {\\n            return wrap(resultInt * sign);\\n        }\\n\\n        // Calculate the fractional part via the iterative approximation.\\n        // The `delta >>= 1` part is equivalent to `delta /= 2`, but shifting bits is more gas efficient.\\n        int256 DOUBLE_UNIT = 2e18;\\n        for (int256 delta = uHALF_UNIT; delta > 0; delta >>= 1) {\\n            y = (y * y) / uUNIT;\\n\\n            // Is y^2 >= 2e18 and so in the range [2e18, 4e18)?\\n            if (y >= DOUBLE_UNIT) {\\n                // Add the 2^{-m} factor to the logarithm.\\n                resultInt = resultInt + delta;\\n\\n                // Halve y, which corresponds to z/2 in the Wikipedia article.\\n                y >>= 1;\\n            }\\n        }\\n        resultInt *= sign;\\n        result = wrap(resultInt);\\n    }\\n}\\n\\n/// @notice Multiplies two SD59x18 numbers together, returning a new SD59x18 number.\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {Common.mulDiv18}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {Common.mulDiv18}.\\n/// - None of the inputs can be `MIN_SD59x18`.\\n/// - The result must fit in SD59x18.\\n///\\n/// @param x The multiplicand as an SD59x18 number.\\n/// @param y The multiplier as an SD59x18 number.\\n/// @return result The product as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mul(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n    if (xInt == uMIN_SD59x18 || yInt == uMIN_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Mul_InputTooSmall();\\n    }\\n\\n    // Get hold of the absolute values of x and y.\\n    uint256 xAbs;\\n    uint256 yAbs;\\n    unchecked {\\n        xAbs = xInt < 0 ? uint256(-xInt) : uint256(xInt);\\n        yAbs = yInt < 0 ? uint256(-yInt) : uint256(yInt);\\n    }\\n\\n    // Compute the absolute value (x*y\\u00f7UNIT). The resulting value must fit in SD59x18.\\n    uint256 resultAbs = Common.mulDiv18(xAbs, yAbs);\\n    if (resultAbs > uint256(uMAX_SD59x18)) {\\n        revert Errors.PRBMath_SD59x18_Mul_Overflow(x, y);\\n    }\\n\\n    // Check if x and y have the same sign using two's complement representation. The left-most bit represents the sign (1 for\\n    // negative, 0 for positive or zero).\\n    bool sameSign = (xInt ^ yInt) > -1;\\n\\n    // If the inputs have the same sign, the result should be positive. Otherwise, it should be negative.\\n    unchecked {\\n        result = wrap(sameSign ? int256(resultAbs) : -int256(resultAbs));\\n    }\\n}\\n\\n/// @notice Raises x to the power of y using the following formula:\\n///\\n/// $$\\n/// x^y = 2^{log_2{x} * y}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {exp2}, {log2}, and {mul}.\\n/// - Returns `UNIT` for 0^0.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {exp2}, {log2}, and {mul}.\\n///\\n/// @param x The base as an SD59x18 number.\\n/// @param y Exponent to raise x to, as an SD59x18 number\\n/// @return result x raised to power y, as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction pow(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n\\n    // If both x and y are zero, the result is `UNIT`. If just x is zero, the result is always zero.\\n    if (xInt == 0) {\\n        return yInt == 0 ? UNIT : ZERO;\\n    }\\n    // If x is `UNIT`, the result is always `UNIT`.\\n    else if (xInt == uUNIT) {\\n        return UNIT;\\n    }\\n\\n    // If y is zero, the result is always `UNIT`.\\n    if (yInt == 0) {\\n        return UNIT;\\n    }\\n    // If y is `UNIT`, the result is always x.\\n    else if (yInt == uUNIT) {\\n        return x;\\n    }\\n\\n    // Calculate the result using the formula.\\n    result = exp2(mul(log2(x), y));\\n}\\n\\n/// @notice Raises x (an SD59x18 number) to the power y (an unsigned basic integer) using the well-known\\n/// algorithm \\\"exponentiation by squaring\\\".\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv18}.\\n/// - Returns `UNIT` for 0^0.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {abs} and {Common.mulDiv18}.\\n/// - The result must fit in SD59x18.\\n///\\n/// @param x The base as an SD59x18 number.\\n/// @param y The exponent as a uint256.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction powu(SD59x18 x, uint256 y) pure returns (SD59x18 result) {\\n    uint256 xAbs = uint256(abs(x).unwrap());\\n\\n    // Calculate the first iteration of the loop in advance.\\n    uint256 resultAbs = y & 1 > 0 ? xAbs : uint256(uUNIT);\\n\\n    // Equivalent to `for(y /= 2; y > 0; y /= 2)`.\\n    uint256 yAux = y;\\n    for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n        xAbs = Common.mulDiv18(xAbs, xAbs);\\n\\n        // Equivalent to `y % 2 == 1`.\\n        if (yAux & 1 > 0) {\\n            resultAbs = Common.mulDiv18(resultAbs, xAbs);\\n        }\\n    }\\n\\n    // The result must fit in SD59x18.\\n    if (resultAbs > uint256(uMAX_SD59x18)) {\\n        revert Errors.PRBMath_SD59x18_Powu_Overflow(x, y);\\n    }\\n\\n    unchecked {\\n        // Is the base negative and the exponent odd? If yes, the result should be negative.\\n        int256 resultInt = int256(resultAbs);\\n        bool isNegative = x.unwrap() < 0 && y & 1 == 1;\\n        if (isNegative) {\\n            resultInt = -resultInt;\\n        }\\n        result = wrap(resultInt);\\n    }\\n}\\n\\n/// @notice Calculates the square root of x using the Babylonian method.\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n///\\n/// Notes:\\n/// - Only the positive root is returned.\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x cannot be negative, since complex numbers are not supported.\\n/// - x must be less than `MAX_SD59x18 / UNIT`.\\n///\\n/// @param x The SD59x18 number for which to calculate the square root.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction sqrt(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt < 0) {\\n        revert Errors.PRBMath_SD59x18_Sqrt_NegativeInput(x);\\n    }\\n    if (xInt > uMAX_SD59x18 / uUNIT) {\\n        revert Errors.PRBMath_SD59x18_Sqrt_Overflow(x);\\n    }\\n\\n    unchecked {\\n        // Multiply x by `UNIT` to account for the factor of `UNIT` picked up when multiplying two SD59x18 numbers.\\n        // In this case, the two numbers are both the square root.\\n        uint256 resultUint = Common.sqrt(uint256(xInt * uUNIT));\\n        result = wrap(int256(resultUint));\\n    }\\n}\\n\",\"keccak256\":\"0xedd0635769176ab99878a91ce267cee2ca107b30e6b0db10736573ff4d102868\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/ValueType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Casting.sol\\\" as Casting;\\nimport \\\"./Helpers.sol\\\" as Helpers;\\nimport \\\"./Math.sol\\\" as Math;\\n\\n/// @notice The signed 59.18-decimal fixed-point number representation, which can have up to 59 digits and up to 18\\n/// decimals. The values of this are bound by the minimum and the maximum values permitted by the underlying Solidity\\n/// type int256.\\ntype SD59x18 is int256;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Casting.intoInt256,\\n    Casting.intoSD1x18,\\n    Casting.intoUD2x18,\\n    Casting.intoUD60x18,\\n    Casting.intoUint256,\\n    Casting.intoUint128,\\n    Casting.intoUint40,\\n    Casting.unwrap\\n} for SD59x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            MATHEMATICAL FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Math.abs,\\n    Math.avg,\\n    Math.ceil,\\n    Math.div,\\n    Math.exp,\\n    Math.exp2,\\n    Math.floor,\\n    Math.frac,\\n    Math.gm,\\n    Math.inv,\\n    Math.log10,\\n    Math.log2,\\n    Math.ln,\\n    Math.mul,\\n    Math.pow,\\n    Math.powu,\\n    Math.sqrt\\n} for SD59x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                HELPER FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Helpers.add,\\n    Helpers.and,\\n    Helpers.eq,\\n    Helpers.gt,\\n    Helpers.gte,\\n    Helpers.isZero,\\n    Helpers.lshift,\\n    Helpers.lt,\\n    Helpers.lte,\\n    Helpers.mod,\\n    Helpers.neq,\\n    Helpers.not,\\n    Helpers.or,\\n    Helpers.rshift,\\n    Helpers.sub,\\n    Helpers.uncheckedAdd,\\n    Helpers.uncheckedSub,\\n    Helpers.uncheckedUnary,\\n    Helpers.xor\\n} for SD59x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    OPERATORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// The global \\\"using for\\\" directive makes it possible to use these operators on the SD59x18 type.\\nusing {\\n    Helpers.add as +,\\n    Helpers.and2 as &,\\n    Math.div as /,\\n    Helpers.eq as ==,\\n    Helpers.gt as >,\\n    Helpers.gte as >=,\\n    Helpers.lt as <,\\n    Helpers.lte as <=,\\n    Helpers.mod as %,\\n    Math.mul as *,\\n    Helpers.neq as !=,\\n    Helpers.not as ~,\\n    Helpers.or as |,\\n    Helpers.sub as -,\\n    Helpers.unary as -,\\n    Helpers.xor as ^\\n} for SD59x18 global;\\n\",\"keccak256\":\"0xe03112d145dcd5863aff24e5f381debaae29d446acd5666f3d640e3d9af738d7\",\"license\":\"MIT\"},\"@prb/math/src/ud2x18/Casting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"../Common.sol\\\" as Common;\\nimport \\\"./Errors.sol\\\" as Errors;\\nimport { uMAX_SD1x18 } from \\\"../sd1x18/Constants.sol\\\";\\nimport { SD1x18 } from \\\"../sd1x18/ValueType.sol\\\";\\nimport { SD59x18 } from \\\"../sd59x18/ValueType.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"../ud60x18/ValueType.sol\\\";\\nimport { UD2x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts a UD2x18 number into SD1x18.\\n/// - x must be less than or equal to `uMAX_SD1x18`.\\nfunction intoSD1x18(UD2x18 x) pure returns (SD1x18 result) {\\n    uint64 xUint = UD2x18.unwrap(x);\\n    if (xUint > uint64(uMAX_SD1x18)) {\\n        revert Errors.PRBMath_UD2x18_IntoSD1x18_Overflow(x);\\n    }\\n    result = SD1x18.wrap(int64(xUint));\\n}\\n\\n/// @notice Casts a UD2x18 number into SD59x18.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of SD59x18.\\nfunction intoSD59x18(UD2x18 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(int256(uint256(UD2x18.unwrap(x))));\\n}\\n\\n/// @notice Casts a UD2x18 number into UD60x18.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of UD60x18.\\nfunction intoUD60x18(UD2x18 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(UD2x18.unwrap(x));\\n}\\n\\n/// @notice Casts a UD2x18 number into uint128.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of uint128.\\nfunction intoUint128(UD2x18 x) pure returns (uint128 result) {\\n    result = uint128(UD2x18.unwrap(x));\\n}\\n\\n/// @notice Casts a UD2x18 number into uint256.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of uint256.\\nfunction intoUint256(UD2x18 x) pure returns (uint256 result) {\\n    result = uint256(UD2x18.unwrap(x));\\n}\\n\\n/// @notice Casts a UD2x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(UD2x18 x) pure returns (uint40 result) {\\n    uint64 xUint = UD2x18.unwrap(x);\\n    if (xUint > uint64(Common.MAX_UINT40)) {\\n        revert Errors.PRBMath_UD2x18_IntoUint40_Overflow(x);\\n    }\\n    result = uint40(xUint);\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction ud2x18(uint64 x) pure returns (UD2x18 result) {\\n    result = UD2x18.wrap(x);\\n}\\n\\n/// @notice Unwrap a UD2x18 number into uint64.\\nfunction unwrap(UD2x18 x) pure returns (uint64 result) {\\n    result = UD2x18.unwrap(x);\\n}\\n\\n/// @notice Wraps a uint64 number into UD2x18.\\nfunction wrap(uint64 x) pure returns (UD2x18 result) {\\n    result = UD2x18.wrap(x);\\n}\\n\",\"keccak256\":\"0x07ec9a8adddfe6bf37f0d9ce7702c5620a6215340889701da0525ed190ccc099\",\"license\":\"MIT\"},\"@prb/math/src/ud2x18/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { UD2x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @dev Euler's number as a UD2x18 number.\\nUD2x18 constant E = UD2x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum value a UD2x18 number can have.\\nuint64 constant uMAX_UD2x18 = 18_446744073709551615;\\nUD2x18 constant MAX_UD2x18 = UD2x18.wrap(uMAX_UD2x18);\\n\\n/// @dev PI as a UD2x18 number.\\nUD2x18 constant PI = UD2x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit number, which gives the decimal precision of UD2x18.\\nuint256 constant uUNIT = 1e18;\\nUD2x18 constant UNIT = UD2x18.wrap(1e18);\\n\",\"keccak256\":\"0xbd11da8ad79ffc8b7b8244c82632b0ca31970e190a8877ba1a69b4b8065dcea5\",\"license\":\"MIT\"},\"@prb/math/src/ud2x18/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { UD2x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Thrown when trying to cast a UD2x18 number that doesn't fit in SD1x18.\\nerror PRBMath_UD2x18_IntoSD1x18_Overflow(UD2x18 x);\\n\\n/// @notice Thrown when trying to cast a UD2x18 number that doesn't fit in uint40.\\nerror PRBMath_UD2x18_IntoUint40_Overflow(UD2x18 x);\\n\",\"keccak256\":\"0xdf1e22f0b4c8032bcc8b7f63fe3984e1387f3dc7b2e9ab381822249f75376d33\",\"license\":\"MIT\"},\"@prb/math/src/ud2x18/ValueType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Casting.sol\\\" as Casting;\\n\\n/// @notice The unsigned 2.18-decimal fixed-point number representation, which can have up to 2 digits and up to 18\\n/// decimals. The values of this are bound by the minimum and the maximum values permitted by the underlying Solidity\\n/// type uint64. This is useful when end users want to use uint64 to save gas, e.g. with tight variable packing in contract\\n/// storage.\\ntype UD2x18 is uint64;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Casting.intoSD1x18,\\n    Casting.intoSD59x18,\\n    Casting.intoUD60x18,\\n    Casting.intoUint256,\\n    Casting.intoUint128,\\n    Casting.intoUint40,\\n    Casting.unwrap\\n} for UD2x18 global;\\n\",\"keccak256\":\"0x2802edc9869db116a0b5c490cc5f8554742f747183fa30ac5e9c80bb967e61a1\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Casting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Errors.sol\\\" as CastingErrors;\\nimport { MAX_UINT128, MAX_UINT40 } from \\\"../Common.sol\\\";\\nimport { uMAX_SD1x18 } from \\\"../sd1x18/Constants.sol\\\";\\nimport { SD1x18 } from \\\"../sd1x18/ValueType.sol\\\";\\nimport { uMAX_SD59x18 } from \\\"../sd59x18/Constants.sol\\\";\\nimport { SD59x18 } from \\\"../sd59x18/ValueType.sol\\\";\\nimport { uMAX_UD2x18 } from \\\"../ud2x18/Constants.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts a UD60x18 number into SD1x18.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `uMAX_SD1x18`.\\nfunction intoSD1x18(UD60x18 x) pure returns (SD1x18 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > uint256(int256(uMAX_SD1x18))) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoSD1x18_Overflow(x);\\n    }\\n    result = SD1x18.wrap(int64(uint64(xUint)));\\n}\\n\\n/// @notice Casts a UD60x18 number into UD2x18.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `uMAX_UD2x18`.\\nfunction intoUD2x18(UD60x18 x) pure returns (UD2x18 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > uMAX_UD2x18) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoUD2x18_Overflow(x);\\n    }\\n    result = UD2x18.wrap(uint64(xUint));\\n}\\n\\n/// @notice Casts a UD60x18 number into SD59x18.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `uMAX_SD59x18`.\\nfunction intoSD59x18(UD60x18 x) pure returns (SD59x18 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > uint256(uMAX_SD59x18)) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoSD59x18_Overflow(x);\\n    }\\n    result = SD59x18.wrap(int256(xUint));\\n}\\n\\n/// @notice Casts a UD60x18 number into uint128.\\n/// @dev This is basically an alias for {unwrap}.\\nfunction intoUint256(UD60x18 x) pure returns (uint256 result) {\\n    result = UD60x18.unwrap(x);\\n}\\n\\n/// @notice Casts a UD60x18 number into uint128.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UINT128`.\\nfunction intoUint128(UD60x18 x) pure returns (uint128 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > MAX_UINT128) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoUint128_Overflow(x);\\n    }\\n    result = uint128(xUint);\\n}\\n\\n/// @notice Casts a UD60x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(UD60x18 x) pure returns (uint40 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > MAX_UINT40) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoUint40_Overflow(x);\\n    }\\n    result = uint40(xUint);\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction ud(uint256 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(x);\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction ud60x18(uint256 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(x);\\n}\\n\\n/// @notice Unwraps a UD60x18 number into uint256.\\nfunction unwrap(UD60x18 x) pure returns (uint256 result) {\\n    result = UD60x18.unwrap(x);\\n}\\n\\n/// @notice Wraps a uint256 number into the UD60x18 value type.\\nfunction wrap(uint256 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(x);\\n}\\n\",\"keccak256\":\"0x5bb532da36921cbdac64d1f16de5d366ef1f664502e3b7c07d0ad06917551f85\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n// NOTICE: the \\\"u\\\" prefix stands for \\\"unwrapped\\\".\\n\\n/// @dev Euler's number as a UD60x18 number.\\nUD60x18 constant E = UD60x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum input permitted in {exp}.\\nuint256 constant uEXP_MAX_INPUT = 133_084258667509499440;\\nUD60x18 constant EXP_MAX_INPUT = UD60x18.wrap(uEXP_MAX_INPUT);\\n\\n/// @dev The maximum input permitted in {exp2}.\\nuint256 constant uEXP2_MAX_INPUT = 192e18 - 1;\\nUD60x18 constant EXP2_MAX_INPUT = UD60x18.wrap(uEXP2_MAX_INPUT);\\n\\n/// @dev Half the UNIT number.\\nuint256 constant uHALF_UNIT = 0.5e18;\\nUD60x18 constant HALF_UNIT = UD60x18.wrap(uHALF_UNIT);\\n\\n/// @dev $log_2(10)$ as a UD60x18 number.\\nuint256 constant uLOG2_10 = 3_321928094887362347;\\nUD60x18 constant LOG2_10 = UD60x18.wrap(uLOG2_10);\\n\\n/// @dev $log_2(e)$ as a UD60x18 number.\\nuint256 constant uLOG2_E = 1_442695040888963407;\\nUD60x18 constant LOG2_E = UD60x18.wrap(uLOG2_E);\\n\\n/// @dev The maximum value a UD60x18 number can have.\\nuint256 constant uMAX_UD60x18 = 115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\nUD60x18 constant MAX_UD60x18 = UD60x18.wrap(uMAX_UD60x18);\\n\\n/// @dev The maximum whole value a UD60x18 number can have.\\nuint256 constant uMAX_WHOLE_UD60x18 = 115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\nUD60x18 constant MAX_WHOLE_UD60x18 = UD60x18.wrap(uMAX_WHOLE_UD60x18);\\n\\n/// @dev PI as a UD60x18 number.\\nUD60x18 constant PI = UD60x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit number, which gives the decimal precision of UD60x18.\\nuint256 constant uUNIT = 1e18;\\nUD60x18 constant UNIT = UD60x18.wrap(uUNIT);\\n\\n/// @dev The unit number squared.\\nuint256 constant uUNIT_SQUARED = 1e36;\\nUD60x18 constant UNIT_SQUARED = UD60x18.wrap(uUNIT_SQUARED);\\n\\n/// @dev Zero as a UD60x18 number.\\nUD60x18 constant ZERO = UD60x18.wrap(0);\\n\",\"keccak256\":\"0x2b80d26153d3fdcfb3a9ca772d9309d31ed1275f5b8b54c3ffb54d3652b37d90\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Conversions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { uMAX_UD60x18, uUNIT } from \\\"./Constants.sol\\\";\\nimport { PRBMath_UD60x18_Convert_Overflow } from \\\"./Errors.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Converts a UD60x18 number to a simple integer by dividing it by `UNIT`.\\n/// @dev The result is rounded toward zero.\\n/// @param x The UD60x18 number to convert.\\n/// @return result The same number in basic integer form.\\nfunction convert(UD60x18 x) pure returns (uint256 result) {\\n    result = UD60x18.unwrap(x) / uUNIT;\\n}\\n\\n/// @notice Converts a simple integer to UD60x18 by multiplying it by `UNIT`.\\n///\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UD60x18 / UNIT`.\\n///\\n/// @param x The basic integer to convert.\\n/// @param result The same number converted to UD60x18.\\nfunction convert(uint256 x) pure returns (UD60x18 result) {\\n    if (x > uMAX_UD60x18 / uUNIT) {\\n        revert PRBMath_UD60x18_Convert_Overflow(x);\\n    }\\n    unchecked {\\n        result = UD60x18.wrap(x * uUNIT);\\n    }\\n}\\n\",\"keccak256\":\"0xaf7fc2523413822de3b66ba339fe2884fb3b8c6f6cf38ec90a2c3e3aae71df6b\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Thrown when ceiling a number overflows UD60x18.\\nerror PRBMath_UD60x18_Ceil_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when converting a basic integer to the fixed-point format overflows UD60x18.\\nerror PRBMath_UD60x18_Convert_Overflow(uint256 x);\\n\\n/// @notice Thrown when taking the natural exponent of a base greater than 133_084258667509499441.\\nerror PRBMath_UD60x18_Exp_InputTooBig(UD60x18 x);\\n\\n/// @notice Thrown when taking the binary exponent of a base greater than 192e18.\\nerror PRBMath_UD60x18_Exp2_InputTooBig(UD60x18 x);\\n\\n/// @notice Thrown when taking the geometric mean of two numbers and multiplying them overflows UD60x18.\\nerror PRBMath_UD60x18_Gm_Overflow(UD60x18 x, UD60x18 y);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in SD1x18.\\nerror PRBMath_UD60x18_IntoSD1x18_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in SD59x18.\\nerror PRBMath_UD60x18_IntoSD59x18_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in UD2x18.\\nerror PRBMath_UD60x18_IntoUD2x18_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint128.\\nerror PRBMath_UD60x18_IntoUint128_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint40.\\nerror PRBMath_UD60x18_IntoUint40_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when taking the logarithm of a number less than 1.\\nerror PRBMath_UD60x18_Log_InputTooSmall(UD60x18 x);\\n\\n/// @notice Thrown when calculating the square root overflows UD60x18.\\nerror PRBMath_UD60x18_Sqrt_Overflow(UD60x18 x);\\n\",\"keccak256\":\"0xa8c60d4066248df22c49c882873efbc017344107edabc48c52209abbc39cb1e3\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { wrap } from \\\"./Casting.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Implements the checked addition operation (+) in the UD60x18 type.\\nfunction add(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() + y.unwrap());\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the UD60x18 type.\\nfunction and(UD60x18 x, uint256 bits) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() & bits);\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the UD60x18 type.\\nfunction and2(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() & y.unwrap());\\n}\\n\\n/// @notice Implements the equal operation (==) in the UD60x18 type.\\nfunction eq(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() == y.unwrap();\\n}\\n\\n/// @notice Implements the greater than operation (>) in the UD60x18 type.\\nfunction gt(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() > y.unwrap();\\n}\\n\\n/// @notice Implements the greater than or equal to operation (>=) in the UD60x18 type.\\nfunction gte(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() >= y.unwrap();\\n}\\n\\n/// @notice Implements a zero comparison check function in the UD60x18 type.\\nfunction isZero(UD60x18 x) pure returns (bool result) {\\n    // This wouldn't work if x could be negative.\\n    result = x.unwrap() == 0;\\n}\\n\\n/// @notice Implements the left shift operation (<<) in the UD60x18 type.\\nfunction lshift(UD60x18 x, uint256 bits) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() << bits);\\n}\\n\\n/// @notice Implements the lower than operation (<) in the UD60x18 type.\\nfunction lt(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() < y.unwrap();\\n}\\n\\n/// @notice Implements the lower than or equal to operation (<=) in the UD60x18 type.\\nfunction lte(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() <= y.unwrap();\\n}\\n\\n/// @notice Implements the checked modulo operation (%) in the UD60x18 type.\\nfunction mod(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() % y.unwrap());\\n}\\n\\n/// @notice Implements the not equal operation (!=) in the UD60x18 type.\\nfunction neq(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() != y.unwrap();\\n}\\n\\n/// @notice Implements the NOT (~) bitwise operation in the UD60x18 type.\\nfunction not(UD60x18 x) pure returns (UD60x18 result) {\\n    result = wrap(~x.unwrap());\\n}\\n\\n/// @notice Implements the OR (|) bitwise operation in the UD60x18 type.\\nfunction or(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() | y.unwrap());\\n}\\n\\n/// @notice Implements the right shift operation (>>) in the UD60x18 type.\\nfunction rshift(UD60x18 x, uint256 bits) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() >> bits);\\n}\\n\\n/// @notice Implements the checked subtraction operation (-) in the UD60x18 type.\\nfunction sub(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() - y.unwrap());\\n}\\n\\n/// @notice Implements the unchecked addition operation (+) in the UD60x18 type.\\nfunction uncheckedAdd(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    unchecked {\\n        result = wrap(x.unwrap() + y.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the unchecked subtraction operation (-) in the UD60x18 type.\\nfunction uncheckedSub(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    unchecked {\\n        result = wrap(x.unwrap() - y.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the XOR (^) bitwise operation in the UD60x18 type.\\nfunction xor(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() ^ y.unwrap());\\n}\\n\",\"keccak256\":\"0xf5faff881391d2c060029499a666cc5f0bea90a213150bb476fae8f02a5df268\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"../Common.sol\\\" as Common;\\nimport \\\"./Errors.sol\\\" as Errors;\\nimport { wrap } from \\\"./Casting.sol\\\";\\nimport {\\n    uEXP_MAX_INPUT,\\n    uEXP2_MAX_INPUT,\\n    uHALF_UNIT,\\n    uLOG2_10,\\n    uLOG2_E,\\n    uMAX_UD60x18,\\n    uMAX_WHOLE_UD60x18,\\n    UNIT,\\n    uUNIT,\\n    uUNIT_SQUARED,\\n    ZERO\\n} from \\\"./Constants.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            MATHEMATICAL FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Calculates the arithmetic average of x and y using the following formula:\\n///\\n/// $$\\n/// avg(x, y) = (x & y) + ((xUint ^ yUint) / 2)\\n/// $$\\n//\\n/// In English, this is what this formula does:\\n///\\n/// 1. AND x and y.\\n/// 2. Calculate half of XOR x and y.\\n/// 3. Add the two results together.\\n///\\n/// This technique is known as SWAR, which stands for \\\"SIMD within a register\\\". You can read more about it here:\\n/// https://devblogs.microsoft.com/oldnewthing/20220207-00/?p=106223\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// @param x The first operand as a UD60x18 number.\\n/// @param y The second operand as a UD60x18 number.\\n/// @return result The arithmetic average as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction avg(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    uint256 yUint = y.unwrap();\\n    unchecked {\\n        result = wrap((xUint & yUint) + ((xUint ^ yUint) >> 1));\\n    }\\n}\\n\\n/// @notice Yields the smallest whole number greater than or equal to x.\\n///\\n/// @dev This is optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional\\n/// counterparts. See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n///\\n/// Requirements:\\n/// - x must be less than or equal to `MAX_WHOLE_UD60x18`.\\n///\\n/// @param x The UD60x18 number to ceil.\\n/// @param result The smallest whole number greater than or equal to x, as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction ceil(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    if (xUint > uMAX_WHOLE_UD60x18) {\\n        revert Errors.PRBMath_UD60x18_Ceil_Overflow(x);\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n        // Equivalent to `x % UNIT`.\\n        let remainder := mod(x, uUNIT)\\n\\n        // Equivalent to `UNIT - remainder`.\\n        let delta := sub(uUNIT, remainder)\\n\\n        // Equivalent to `x + remainder > 0 ? delta : 0`.\\n        result := add(x, mul(delta, gt(remainder, 0)))\\n    }\\n}\\n\\n/// @notice Divides two UD60x18 numbers, returning a new UD60x18 number.\\n///\\n/// @dev Uses {Common.mulDiv} to enable overflow-safe multiplication and division.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {Common.mulDiv}.\\n///\\n/// @param x The numerator as a UD60x18 number.\\n/// @param y The denominator as a UD60x18 number.\\n/// @param result The quotient as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction div(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(Common.mulDiv(x.unwrap(), uUNIT, y.unwrap()));\\n}\\n\\n/// @notice Calculates the natural exponent of x using the following formula:\\n///\\n/// $$\\n/// e^x = 2^{x * log_2{e}}\\n/// $$\\n///\\n/// @dev Requirements:\\n/// - x must be less than 133_084258667509499441.\\n///\\n/// @param x The exponent as a UD60x18 number.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n\\n    // This check prevents values greater than 192e18 from being passed to {exp2}.\\n    if (xUint > uEXP_MAX_INPUT) {\\n        revert Errors.PRBMath_UD60x18_Exp_InputTooBig(x);\\n    }\\n\\n    unchecked {\\n        // Inline the fixed-point multiplication to save gas.\\n        uint256 doubleUnitProduct = xUint * uLOG2_E;\\n        result = exp2(wrap(doubleUnitProduct / uUNIT));\\n    }\\n}\\n\\n/// @notice Calculates the binary exponent of x using the binary fraction method.\\n///\\n/// @dev See https://ethereum.stackexchange.com/q/79903/24693\\n///\\n/// Requirements:\\n/// - x must be less than 192e18.\\n/// - The result must fit in UD60x18.\\n///\\n/// @param x The exponent as a UD60x18 number.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp2(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n\\n    // Numbers greater than or equal to 192e18 don't fit in the 192.64-bit format.\\n    if (xUint > uEXP2_MAX_INPUT) {\\n        revert Errors.PRBMath_UD60x18_Exp2_InputTooBig(x);\\n    }\\n\\n    // Convert x to the 192.64-bit fixed-point format.\\n    uint256 x_192x64 = (xUint << 64) / uUNIT;\\n\\n    // Pass x to the {Common.exp2} function, which uses the 192.64-bit fixed-point number representation.\\n    result = wrap(Common.exp2(x_192x64));\\n}\\n\\n/// @notice Yields the greatest whole number less than or equal to x.\\n/// @dev Optimized for fractional value inputs, because every whole value has (1e18 - 1) fractional counterparts.\\n/// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n/// @param x The UD60x18 number to floor.\\n/// @param result The greatest whole number less than or equal to x, as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction floor(UD60x18 x) pure returns (UD60x18 result) {\\n    assembly (\\\"memory-safe\\\") {\\n        // Equivalent to `x % UNIT`.\\n        let remainder := mod(x, uUNIT)\\n\\n        // Equivalent to `x - remainder > 0 ? remainder : 0)`.\\n        result := sub(x, mul(remainder, gt(remainder, 0)))\\n    }\\n}\\n\\n/// @notice Yields the excess beyond the floor of x using the odd function definition.\\n/// @dev See https://en.wikipedia.org/wiki/Fractional_part.\\n/// @param x The UD60x18 number to get the fractional part of.\\n/// @param result The fractional part of x as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction frac(UD60x18 x) pure returns (UD60x18 result) {\\n    assembly (\\\"memory-safe\\\") {\\n        result := mod(x, uUNIT)\\n    }\\n}\\n\\n/// @notice Calculates the geometric mean of x and y, i.e. $\\\\sqrt{x * y}$, rounding down.\\n///\\n/// @dev Requirements:\\n/// - x * y must fit in UD60x18.\\n///\\n/// @param x The first operand as a UD60x18 number.\\n/// @param y The second operand as a UD60x18 number.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction gm(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    uint256 yUint = y.unwrap();\\n    if (xUint == 0 || yUint == 0) {\\n        return ZERO;\\n    }\\n\\n    unchecked {\\n        // Checking for overflow this way is faster than letting Solidity do it.\\n        uint256 xyUint = xUint * yUint;\\n        if (xyUint / xUint != yUint) {\\n            revert Errors.PRBMath_UD60x18_Gm_Overflow(x, y);\\n        }\\n\\n        // We don't need to multiply the result by `UNIT` here because the x*y product picked up a factor of `UNIT`\\n        // during multiplication. See the comments in {Common.sqrt}.\\n        result = wrap(Common.sqrt(xyUint));\\n    }\\n}\\n\\n/// @notice Calculates the inverse of x.\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x must not be zero.\\n///\\n/// @param x The UD60x18 number for which to calculate the inverse.\\n/// @return result The inverse as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction inv(UD60x18 x) pure returns (UD60x18 result) {\\n    unchecked {\\n        result = wrap(uUNIT_SQUARED / x.unwrap());\\n    }\\n}\\n\\n/// @notice Calculates the natural logarithm of x using the following formula:\\n///\\n/// $$\\n/// ln{x} = log_2{x} / log_2{e}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2}.\\n/// - The precision isn't sufficiently fine-grained to return exactly `UNIT` when the input is `E`.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {log2}.\\n///\\n/// @param x The UD60x18 number for which to calculate the natural logarithm.\\n/// @return result The natural logarithm as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction ln(UD60x18 x) pure returns (UD60x18 result) {\\n    unchecked {\\n        // Inline the fixed-point multiplication to save gas. This is overflow-safe because the maximum value that\\n        // {log2} can return is ~196_205294292027477728.\\n        result = wrap(log2(x).unwrap() * uUNIT / uLOG2_E);\\n    }\\n}\\n\\n/// @notice Calculates the common logarithm of x using the following formula:\\n///\\n/// $$\\n/// log_{10}{x} = log_2{x} / log_2{10}\\n/// $$\\n///\\n/// However, if x is an exact power of ten, a hard coded value is returned.\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {log2}.\\n///\\n/// @param x The UD60x18 number for which to calculate the common logarithm.\\n/// @return result The common logarithm as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction log10(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    if (xUint < uUNIT) {\\n        revert Errors.PRBMath_UD60x18_Log_InputTooSmall(x);\\n    }\\n\\n    // Note that the `mul` in this assembly block is the standard multiplication operation, not {UD60x18.mul}.\\n    // prettier-ignore\\n    assembly (\\\"memory-safe\\\") {\\n        switch x\\n        case 1 { result := mul(uUNIT, sub(0, 18)) }\\n        case 10 { result := mul(uUNIT, sub(1, 18)) }\\n        case 100 { result := mul(uUNIT, sub(2, 18)) }\\n        case 1000 { result := mul(uUNIT, sub(3, 18)) }\\n        case 10000 { result := mul(uUNIT, sub(4, 18)) }\\n        case 100000 { result := mul(uUNIT, sub(5, 18)) }\\n        case 1000000 { result := mul(uUNIT, sub(6, 18)) }\\n        case 10000000 { result := mul(uUNIT, sub(7, 18)) }\\n        case 100000000 { result := mul(uUNIT, sub(8, 18)) }\\n        case 1000000000 { result := mul(uUNIT, sub(9, 18)) }\\n        case 10000000000 { result := mul(uUNIT, sub(10, 18)) }\\n        case 100000000000 { result := mul(uUNIT, sub(11, 18)) }\\n        case 1000000000000 { result := mul(uUNIT, sub(12, 18)) }\\n        case 10000000000000 { result := mul(uUNIT, sub(13, 18)) }\\n        case 100000000000000 { result := mul(uUNIT, sub(14, 18)) }\\n        case 1000000000000000 { result := mul(uUNIT, sub(15, 18)) }\\n        case 10000000000000000 { result := mul(uUNIT, sub(16, 18)) }\\n        case 100000000000000000 { result := mul(uUNIT, sub(17, 18)) }\\n        case 1000000000000000000 { result := 0 }\\n        case 10000000000000000000 { result := uUNIT }\\n        case 100000000000000000000 { result := mul(uUNIT, 2) }\\n        case 1000000000000000000000 { result := mul(uUNIT, 3) }\\n        case 10000000000000000000000 { result := mul(uUNIT, 4) }\\n        case 100000000000000000000000 { result := mul(uUNIT, 5) }\\n        case 1000000000000000000000000 { result := mul(uUNIT, 6) }\\n        case 10000000000000000000000000 { result := mul(uUNIT, 7) }\\n        case 100000000000000000000000000 { result := mul(uUNIT, 8) }\\n        case 1000000000000000000000000000 { result := mul(uUNIT, 9) }\\n        case 10000000000000000000000000000 { result := mul(uUNIT, 10) }\\n        case 100000000000000000000000000000 { result := mul(uUNIT, 11) }\\n        case 1000000000000000000000000000000 { result := mul(uUNIT, 12) }\\n        case 10000000000000000000000000000000 { result := mul(uUNIT, 13) }\\n        case 100000000000000000000000000000000 { result := mul(uUNIT, 14) }\\n        case 1000000000000000000000000000000000 { result := mul(uUNIT, 15) }\\n        case 10000000000000000000000000000000000 { result := mul(uUNIT, 16) }\\n        case 100000000000000000000000000000000000 { result := mul(uUNIT, 17) }\\n        case 1000000000000000000000000000000000000 { result := mul(uUNIT, 18) }\\n        case 10000000000000000000000000000000000000 { result := mul(uUNIT, 19) }\\n        case 100000000000000000000000000000000000000 { result := mul(uUNIT, 20) }\\n        case 1000000000000000000000000000000000000000 { result := mul(uUNIT, 21) }\\n        case 10000000000000000000000000000000000000000 { result := mul(uUNIT, 22) }\\n        case 100000000000000000000000000000000000000000 { result := mul(uUNIT, 23) }\\n        case 1000000000000000000000000000000000000000000 { result := mul(uUNIT, 24) }\\n        case 10000000000000000000000000000000000000000000 { result := mul(uUNIT, 25) }\\n        case 100000000000000000000000000000000000000000000 { result := mul(uUNIT, 26) }\\n        case 1000000000000000000000000000000000000000000000 { result := mul(uUNIT, 27) }\\n        case 10000000000000000000000000000000000000000000000 { result := mul(uUNIT, 28) }\\n        case 100000000000000000000000000000000000000000000000 { result := mul(uUNIT, 29) }\\n        case 1000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 30) }\\n        case 10000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 31) }\\n        case 100000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 32) }\\n        case 1000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 33) }\\n        case 10000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 34) }\\n        case 100000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 35) }\\n        case 1000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 36) }\\n        case 10000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 37) }\\n        case 100000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 38) }\\n        case 1000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 39) }\\n        case 10000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 40) }\\n        case 100000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 41) }\\n        case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 42) }\\n        case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 43) }\\n        case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 44) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 45) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 46) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 47) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 48) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 49) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 50) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 51) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 52) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 53) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 54) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 55) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 56) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 57) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 58) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 59) }\\n        default { result := uMAX_UD60x18 }\\n    }\\n\\n    if (result.unwrap() == uMAX_UD60x18) {\\n        unchecked {\\n            // Inline the fixed-point division to save gas.\\n            result = wrap(log2(x).unwrap() * uUNIT / uLOG2_10);\\n        }\\n    }\\n}\\n\\n/// @notice Calculates the binary logarithm of x using the iterative approximation algorithm:\\n///\\n/// $$\\n/// log_2{x} = n + log_2{y}, \\\\text{ where } y = x*2^{-n}, \\\\ y \\\\in [1, 2)\\n/// $$\\n///\\n/// For $0 \\\\leq x \\\\lt 1$, the input is inverted:\\n///\\n/// $$\\n/// log_2{x} = -log_2{\\\\frac{1}{x}}\\n/// $$\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n///\\n/// Notes:\\n/// - Due to the lossy precision of the iterative approximation, the results are not perfectly accurate to the last decimal.\\n///\\n/// Requirements:\\n/// - x must be greater than zero.\\n///\\n/// @param x The UD60x18 number for which to calculate the binary logarithm.\\n/// @return result The binary logarithm as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction log2(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n\\n    if (xUint < uUNIT) {\\n        revert Errors.PRBMath_UD60x18_Log_InputTooSmall(x);\\n    }\\n\\n    unchecked {\\n        // Calculate the integer part of the logarithm.\\n        uint256 n = Common.msb(xUint / uUNIT);\\n\\n        // This is the integer part of the logarithm as a UD60x18 number. The operation can't overflow because n\\n        // n is at most 255 and UNIT is 1e18.\\n        uint256 resultUint = n * uUNIT;\\n\\n        // Calculate $y = x * 2^{-n}$.\\n        uint256 y = xUint >> n;\\n\\n        // If y is the unit number, the fractional part is zero.\\n        if (y == uUNIT) {\\n            return wrap(resultUint);\\n        }\\n\\n        // Calculate the fractional part via the iterative approximation.\\n        // The `delta >>= 1` part is equivalent to `delta /= 2`, but shifting bits is more gas efficient.\\n        uint256 DOUBLE_UNIT = 2e18;\\n        for (uint256 delta = uHALF_UNIT; delta > 0; delta >>= 1) {\\n            y = (y * y) / uUNIT;\\n\\n            // Is y^2 >= 2e18 and so in the range [2e18, 4e18)?\\n            if (y >= DOUBLE_UNIT) {\\n                // Add the 2^{-m} factor to the logarithm.\\n                resultUint += delta;\\n\\n                // Halve y, which corresponds to z/2 in the Wikipedia article.\\n                y >>= 1;\\n            }\\n        }\\n        result = wrap(resultUint);\\n    }\\n}\\n\\n/// @notice Multiplies two UD60x18 numbers together, returning a new UD60x18 number.\\n///\\n/// @dev Uses {Common.mulDiv} to enable overflow-safe multiplication and division.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {Common.mulDiv}.\\n///\\n/// @dev See the documentation in {Common.mulDiv18}.\\n/// @param x The multiplicand as a UD60x18 number.\\n/// @param y The multiplier as a UD60x18 number.\\n/// @return result The product as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mul(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(Common.mulDiv18(x.unwrap(), y.unwrap()));\\n}\\n\\n/// @notice Raises x to the power of y.\\n///\\n/// For $1 \\\\leq x \\\\leq \\\\infty$, the following standard formula is used:\\n///\\n/// $$\\n/// x^y = 2^{log_2{x} * y}\\n/// $$\\n///\\n/// For $0 \\\\leq x \\\\lt 1$, since the unsigned {log2} is undefined, an equivalent formula is used:\\n///\\n/// $$\\n/// i = \\\\frac{1}{x}\\n/// w = 2^{log_2{i} * y}\\n/// x^y = \\\\frac{1}{w}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2} and {mul}.\\n/// - Returns `UNIT` for 0^0.\\n/// - It may not perform well with very small values of x. Consider using SD59x18 as an alternative.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {exp2}, {log2}, and {mul}.\\n///\\n/// @param x The base as a UD60x18 number.\\n/// @param y The exponent as a UD60x18 number.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction pow(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    uint256 yUint = y.unwrap();\\n\\n    // If both x and y are zero, the result is `UNIT`. If just x is zero, the result is always zero.\\n    if (xUint == 0) {\\n        return yUint == 0 ? UNIT : ZERO;\\n    }\\n    // If x is `UNIT`, the result is always `UNIT`.\\n    else if (xUint == uUNIT) {\\n        return UNIT;\\n    }\\n\\n    // If y is zero, the result is always `UNIT`.\\n    if (yUint == 0) {\\n        return UNIT;\\n    }\\n    // If y is `UNIT`, the result is always x.\\n    else if (yUint == uUNIT) {\\n        return x;\\n    }\\n\\n    // If x is greater than `UNIT`, use the standard formula.\\n    if (xUint > uUNIT) {\\n        result = exp2(mul(log2(x), y));\\n    }\\n    // Conversely, if x is less than `UNIT`, use the equivalent formula.\\n    else {\\n        UD60x18 i = wrap(uUNIT_SQUARED / xUint);\\n        UD60x18 w = exp2(mul(log2(i), y));\\n        result = wrap(uUNIT_SQUARED / w.unwrap());\\n    }\\n}\\n\\n/// @notice Raises x (a UD60x18 number) to the power y (an unsigned basic integer) using the well-known\\n/// algorithm \\\"exponentiation by squaring\\\".\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv18}.\\n/// - Returns `UNIT` for 0^0.\\n///\\n/// Requirements:\\n/// - The result must fit in UD60x18.\\n///\\n/// @param x The base as a UD60x18 number.\\n/// @param y The exponent as a uint256.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction powu(UD60x18 x, uint256 y) pure returns (UD60x18 result) {\\n    // Calculate the first iteration of the loop in advance.\\n    uint256 xUint = x.unwrap();\\n    uint256 resultUint = y & 1 > 0 ? xUint : uUNIT;\\n\\n    // Equivalent to `for(y /= 2; y > 0; y /= 2)`.\\n    for (y >>= 1; y > 0; y >>= 1) {\\n        xUint = Common.mulDiv18(xUint, xUint);\\n\\n        // Equivalent to `y % 2 == 1`.\\n        if (y & 1 > 0) {\\n            resultUint = Common.mulDiv18(resultUint, xUint);\\n        }\\n    }\\n    result = wrap(resultUint);\\n}\\n\\n/// @notice Calculates the square root of x using the Babylonian method.\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n///\\n/// Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x must be less than `MAX_UD60x18 / UNIT`.\\n///\\n/// @param x The UD60x18 number for which to calculate the square root.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction sqrt(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n\\n    unchecked {\\n        if (xUint > uMAX_UD60x18 / uUNIT) {\\n            revert Errors.PRBMath_UD60x18_Sqrt_Overflow(x);\\n        }\\n        // Multiply x by `UNIT` to account for the factor of `UNIT` picked up when multiplying two UD60x18 numbers.\\n        // In this case, the two numbers are both the square root.\\n        result = wrap(Common.sqrt(xUint * uUNIT));\\n    }\\n}\\n\",\"keccak256\":\"0xafe12d658b5bb495226df1841cbfbcb25e9fc443c6d41a85b5ac6aa7ec79ea29\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/ValueType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Casting.sol\\\" as Casting;\\nimport \\\"./Helpers.sol\\\" as Helpers;\\nimport \\\"./Math.sol\\\" as Math;\\n\\n/// @notice The unsigned 60.18-decimal fixed-point number representation, which can have up to 60 digits and up to 18\\n/// decimals. The values of this are bound by the minimum and the maximum values permitted by the Solidity type uint256.\\n/// @dev The value type is defined here so it can be imported in all other files.\\ntype UD60x18 is uint256;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Casting.intoSD1x18,\\n    Casting.intoUD2x18,\\n    Casting.intoSD59x18,\\n    Casting.intoUint128,\\n    Casting.intoUint256,\\n    Casting.intoUint40,\\n    Casting.unwrap\\n} for UD60x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            MATHEMATICAL FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// The global \\\"using for\\\" directive makes the functions in this library callable on the UD60x18 type.\\nusing {\\n    Math.avg,\\n    Math.ceil,\\n    Math.div,\\n    Math.exp,\\n    Math.exp2,\\n    Math.floor,\\n    Math.frac,\\n    Math.gm,\\n    Math.inv,\\n    Math.ln,\\n    Math.log10,\\n    Math.log2,\\n    Math.mul,\\n    Math.pow,\\n    Math.powu,\\n    Math.sqrt\\n} for UD60x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                HELPER FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// The global \\\"using for\\\" directive makes the functions in this library callable on the UD60x18 type.\\nusing {\\n    Helpers.add,\\n    Helpers.and,\\n    Helpers.eq,\\n    Helpers.gt,\\n    Helpers.gte,\\n    Helpers.isZero,\\n    Helpers.lshift,\\n    Helpers.lt,\\n    Helpers.lte,\\n    Helpers.mod,\\n    Helpers.neq,\\n    Helpers.not,\\n    Helpers.or,\\n    Helpers.rshift,\\n    Helpers.sub,\\n    Helpers.uncheckedAdd,\\n    Helpers.uncheckedSub,\\n    Helpers.xor\\n} for UD60x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    OPERATORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// The global \\\"using for\\\" directive makes it possible to use these operators on the UD60x18 type.\\nusing {\\n    Helpers.add as +,\\n    Helpers.and2 as &,\\n    Math.div as /,\\n    Helpers.eq as ==,\\n    Helpers.gt as >,\\n    Helpers.gte as >=,\\n    Helpers.lt as <,\\n    Helpers.lte as <=,\\n    Helpers.or as |,\\n    Helpers.mod as %,\\n    Math.mul as *,\\n    Helpers.neq as !=,\\n    Helpers.not as ~,\\n    Helpers.sub as -,\\n    Helpers.xor as ^\\n} for UD60x18 global;\\n\",\"keccak256\":\"0xdd873b5124180d9b71498b3a7fe93b1c08c368bec741f7d5f8e17f78a0b70f31\",\"license\":\"MIT\"},\"contracts/NetworkRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { IConnext } from \\\"@connext/interfaces/core/IConnext.sol\\\";\\nimport { IXReceiver } from \\\"@connext/interfaces/core/IXReceiver.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IMemberRegistry, INetworkMemberRegistry, ISplitManager } from \\\"./interfaces/INetworkMemberRegistry.sol\\\";\\nimport { ISplitMain } from \\\"./interfaces/ISplitMain.sol\\\";\\nimport \\\"./registry/MemberRegistry.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n//*********************************************************************//\\n// --------------------------- custom errors ------------------------- //\\n//*********************************************************************//\\nerror InvalidSplit__MemberListSizeMismatch();\\nerror InvalidSplit__AccountsOutOfOrder(uint256 _index);\\nerror Split_ControlNotHandedOver();\\n\\n// DAO member registry\\n//  - keeps track of members\\n//  - keeps track of member part/full time activity (activity multiplier)\\n//  - keeps track of member start date\\n//  - keeps track of member total seconds active\\n\\ncontract NetworkRegistry is OwnableUpgradeable, IXReceiver, INetworkMemberRegistry, MemberRegistry {\\n    // Connext contract in the current domain\\n    IConnext public connext;\\n    // The domain ID where the source updater contract is deployed\\n    uint32 public updaterDomain;\\n    // The address of the source updater contract\\n    address public updater;\\n\\n    // chainId => Registry\\n    mapping (uint32 => Registry) public networkRegistry;\\n\\n    ISplitMain public splitMain;\\n    address public split;\\n\\n    /// @notice constant to scale uints into percentages (1e6 == 100%)\\n    uint256 public constant PERCENTAGE_SCALE = 1e6;\\n    /// @notice maximum distributor fee; 1e5 = 10% * PERCENTAGE_SCALE\\n    uint256 internal constant MAX_DISTRIBUTOR_FEE = 1e5;\\n\\n    struct Split {\\n        address receiver;\\n        uint32 percentAllocations;\\n    }\\n\\n    struct MemberContribution {\\n        address receiverAddress;\\n        uint256 calcContribution;\\n    }\\n\\n    /** @notice A modifier for authenticated calls.\\n     * This is an important security consideration. If the target contract\\n     * function should be authenticated, it must check three things:\\n     *    1) The originating call comes from the expected origin domain.\\n     *    2) The originating call comes from the expected source contract.\\n     *    3) The call to this contract comes from Connext.\\n     */\\n    modifier onlyUpdater(address _originSender, uint32 _origin) {\\n        require(\\n        _origin == updaterDomain &&\\n            _originSender == updater &&\\n            _msgSender() == address(connext),\\n        \\\"NetworkRegistry: !updaterDomain || !updater || !Connext\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrUpdater() {\\n        require(\\n            owner() == _msgSender() ||\\n            (updater != address(0) && _msgSender() == address(this)),\\n            \\\"NetworkRegistry: !owner || !updater\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier validNetworkParams(uint32[] memory _chainIds, uint256[] memory _relayerFees) {\\n        require(_chainIds.length == _relayerFees.length, \\\"NetworkRegistry: params size mismatch\\\");\\n        uint256 totalRelayerFees = 0;\\n        for (uint256 i = 0; i < _relayerFees.length; ) {\\n            totalRelayerFees += _relayerFees[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        require(\\n            msg.value == totalRelayerFees,\\n            \\\"NetworkRegistry: msg.value < relayerFees\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier validNetworkRegistry(uint32 _chainId) {\\n        require(\\n            networkRegistry[_chainId].domainId != 0 && networkRegistry[_chainId].registryAddress != address(0),\\n            \\\"NetworkRegistry: !supported network\\\"\\n        );\\n        // require(_registry.delegate != address(0), \\\"NetworkRegistry: Missing delegate\\\"); // TODO: really need a delegate in case of failed tx?\\n        _;\\n    }\\n\\n    event NewUpdaterConfig(address _connext, uint32 _updaterDomain, address _updater);\\n    event SplitUpdated(address _splitMain, address _split);\\n    event NetworkRegistryUpdated(uint32 indexed _chainId, address indexed _registryAddress, uint32 indexed _domainId, address _delegate);\\n    event SplitsUpdated(address _split, bytes32 _splitHash, uint32 _splitDistributorFee);\\n    event SyncMessageSubmitted(bytes32 indexed _transferId, uint32 indexed _chainId, bytes4 indexed _action, address _registryAddress);\\n    event SyncActionPerformed(bytes32 indexed _transferId, uint32 indexed _originDomain, bytes4 indexed _action, bool _success, address _originSender);\\n\\n    constructor() {\\n        // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/utils/Initializable.sol#L45\\n        _disableInitializers();\\n    }\\n\\n    function __NetworkRegistry_init_unchained(\\n        address _connext,\\n        uint32 _updaterDomain,\\n        address _updater,\\n        address _splitMain,\\n        address _split\\n    ) internal onlyInitializing {\\n        connext = IConnext(_connext);\\n        updaterDomain = _updaterDomain;\\n        updater = _updater;\\n        splitMain = ISplitMain(_splitMain);\\n        split = _split;\\n    }\\n\\n    function __NetworkRegistry_init(\\n        address _connext,\\n        uint32 _updaterDomain,\\n        address _updater,\\n        address _splitMain,\\n        address _split,\\n        address _owner\\n    ) internal onlyInitializing {\\n        __Ownable_init();\\n        __NetworkRegistry_init_unchained(\\n            _connext,\\n            _updaterDomain,\\n            _updater,\\n            _splitMain,\\n            _split\\n        );\\n        if (_owner == address(0)) renounceOwnership();\\n        else transferOwnership(_owner);\\n    }\\n\\n    function initialize(bytes memory _initializationParams) external virtual initializer {\\n        (\\n            address _connext,\\n            uint32 _updaterDomain,\\n            address _updater,\\n            address _splitMain,\\n            address _split,\\n            address _owner\\n        ) = abi.decode(_initializationParams, (address, uint32, address, address, address, address));\\n        __NetworkRegistry_init(\\n            _connext,\\n            _updaterDomain,\\n            _updater,\\n            _splitMain,\\n            _split,\\n            _owner\\n        );\\n    }\\n\\n    function _executeXCall(\\n        uint32 _chainId,\\n        bytes memory _callData,\\n        uint256 _relayerFee\\n    ) internal validNetworkRegistry(_chainId) returns (bytes32 transferId) {\\n        transferId = connext.xcall{value: _relayerFee}(\\n            networkRegistry[_chainId].domainId,         // _destination: domain ID of the destination chain\\n            networkRegistry[_chainId].registryAddress,  // _to: address of the target contract (Pong)\\n            address(0),     // _asset: use address zero for 0-value transfers\\n            networkRegistry[_chainId].delegate,         // _delegate: address that can revert or forceLocal on destination\\n            0,              // _amount: 0 because no funds are being transferred\\n            0,              // _slippage: can be anything between 0-10000 because no funds are being transferred\\n            _callData       // _callData: the encoded calldata to send\\n        );\\n    }\\n\\n    function _execSyncAction(bytes4 action, bytes memory _callData, uint32 _chainId, uint256 _relayerFee) internal {\\n        bytes32 transferId = _executeXCall(_chainId, _callData, _relayerFee);\\n        emit SyncMessageSubmitted(transferId, _chainId, action, networkRegistry[_chainId].registryAddress);\\n    }\\n\\n    function _syncRegistries(bytes4 action , bytes memory _callData, uint32[] memory _chainIds, uint256[] memory _relayerFees) internal {\\n        for (uint256 i = 0; i < _chainIds.length; ) {\\n            _execSyncAction(action, _callData, _chainIds[i], _relayerFees[i]);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    // add member to registry\\n    function setNewMember(\\n        address _member,\\n        uint32 _activityMultiplier,\\n        uint32 _startDate\\n    ) public virtual onlyOwnerOrUpdater {\\n        _setNewMember(_member, _activityMultiplier, _startDate);  \\n    }\\n\\n    function syncSetNewMember(\\n        address _member,\\n        uint32 _activityMultiplier,\\n        uint32 _startDate,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable onlyOwner validNetworkParams(_chainIds, _relayerFees) {\\n        setNewMember(_member, _activityMultiplier, _startDate);\\n        bytes4 action = IMemberRegistry.setNewMember.selector;\\n        bytes memory callData = abi.encode(action, _member, _activityMultiplier, _startDate);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    // update member activity multiplier\\n    function updateMember(address _member, uint32 _activityMultiplier)\\n        public virtual\\n        onlyOwnerOrUpdater\\n    {\\n        _updateMember(_member, _activityMultiplier);\\n    }\\n\\n    function syncUpdateMember(\\n        address _member,\\n        uint32 _activityMultiplier,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable onlyOwner validNetworkParams(_chainIds, _relayerFees) {\\n        updateMember(_member, _activityMultiplier);\\n        bytes4 action = IMemberRegistry.updateMember.selector;\\n        bytes memory callData = abi.encode(action, _member, _activityMultiplier);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    // BATCH OPERATIONS\\n\\n    function batchNewMember(\\n        address[] memory _members,\\n        uint32[] memory _activityMultipliers,\\n        uint32[] memory _startDates\\n    ) public onlyOwnerOrUpdater {\\n        for (uint256 i = 0; i < _members.length; ) {\\n            setNewMember(_members[i], _activityMultipliers[i], _startDates[i]);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    // TODO: should we cover edge cases when we want to sync a replica registry from scratch?\\n    function syncBatchNewMember(\\n        address[] calldata _members,\\n        uint32[] calldata _activityMultipliers,\\n        uint32[] calldata _startDates,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable onlyOwner validNetworkParams(_chainIds, _relayerFees) {\\n        batchNewMember(_members, _activityMultipliers, _startDates);\\n        bytes4 action = IMemberRegistry.batchNewMember.selector;\\n        bytes memory callData = abi.encode(action, _members, _activityMultipliers, _startDates);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    function syncNetworkMemberRegistry(\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable onlyOwner validNetworkParams(_chainIds, _relayerFees) {\\n        (\\n            address[] memory _members,\\n            uint32[] memory _activityMultipliers,\\n            uint32[] memory _startDates\\n        )= getMembersSplitProperties();\\n        bytes4 action = IMemberRegistry.batchNewMember.selector;\\n        bytes memory callData = abi.encode(action, _members, _activityMultipliers, _startDates);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    function batchUpdateMember(\\n        address[] memory _members,\\n        uint32[] memory _activityMultipliers\\n    ) public onlyOwnerOrUpdater {\\n        for (uint256 i = 0; i < _members.length; ) {\\n            updateMember(_members[i], _activityMultipliers[i]);\\n            unchecked {\\n                i++;\\n            }\\n        } \\n    }\\n\\n    function syncBatchUpdateMember(\\n        address[] calldata _members,\\n        uint32[] calldata _activityMultipliers,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable onlyOwner validNetworkParams(_chainIds, _relayerFees) {\\n        batchUpdateMember(_members, _activityMultipliers);\\n        bytes4 action = IMemberRegistry.batchUpdateMember.selector;\\n        bytes memory callData = abi.encode(action, _members, _activityMultipliers);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    // UPDATE ACTIONS\\n\\n    // update member total seconds and seconds in last period\\n    // TODO: do we want to make it permissionless in case of a replica registry?\\n    function updateSecondsActive() public {\\n        _updateSecondsActive();\\n    }\\n\\n    function syncUpdateSecondsActive(\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable validNetworkParams(_chainIds, _relayerFees) {\\n        updateSecondsActive();\\n        bytes4 action = IMemberRegistry.updateSecondsActive.selector;\\n        bytes memory callData = abi.encode(action);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    // takes a sorted (offchain) list of addresses from the member array\\n    // send update to 0xsplits\\n    function updateSplits(address[] calldata _sortedList, uint32 _splitDistributorFee) public {\\n        (address[] memory _receivers, uint32[] memory _percentAllocations) = calculate(_sortedList);\\n\\n        // run splits update\\n        splitMain.updateSplit(\\n            split,\\n            _receivers,\\n            _percentAllocations,\\n            _splitDistributorFee\\n        );\\n        bytes32 splitHash = keccak256(abi.encodePacked(_receivers, _percentAllocations, _splitDistributorFee));\\n        emit SplitsUpdated(split, splitHash, _splitDistributorFee);\\n    }\\n\\n    function syncUpdateSplits(\\n        address[] calldata _sortedList,\\n        uint32 _splitDistributorFee,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable validNetworkParams(_chainIds, _relayerFees) {\\n        updateSplits(_sortedList, _splitDistributorFee);\\n        bytes4 action = ISplitManager.updateSplits.selector;\\n        bytes memory callData = abi.encode(action, _sortedList, _splitDistributorFee);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    // update member registry and update splits\\n    function updateAll(address[] calldata _sortedList, uint32 _splitDistributorFee) public {\\n        updateSecondsActive();\\n        updateSplits(_sortedList, _splitDistributorFee);\\n    }\\n\\n    function syncUpdateAll(\\n        address[] calldata _sortedList,\\n        uint32 _splitDistributorFee,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable validNetworkParams(_chainIds, _relayerFees) {\\n        updateAll(_sortedList, _splitDistributorFee);\\n        bytes4 action = ISplitManager.updateAll.selector;\\n        bytes memory callData = abi.encode(action, _sortedList, _splitDistributorFee);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    // // update member registry, update splits, and distribute ETH\\n    // // wraps 0xsplits distributeETH\\n    // function updateAllAndDistributeETH(\\n    //     address[] calldata _sortedList,\\n    //     address _distributorAddress,\\n    //     uint32 _splitDistributorFee\\n    // ) external {\\n    //     (\\n    //         address[] memory _receivers,\\n    //         uint32[] memory _percentAllocations\\n    //     ) = updateAll(_sortedList, _splitDistributorFee);\\n    //     splitMain.distributeETH(\\n    //         split,\\n    //         _receivers,\\n    //         _percentAllocations,\\n    //         _splitDistributorFee,\\n    //         _distributorAddress\\n    //     );   \\n    // }\\n\\n    // // update member registry, update splits, and distribute ERC20\\n    // // wraps 0xsplits distributeERC20\\n    // function updateAllAndDistributeERC20(\\n    //     address[] calldata _sortedList,\\n    //     IERC20 _token,\\n    //     address _distributorAddress,\\n    //     uint32 _splitDistributorFee\\n    // ) external {\\n    //     (\\n    //         address[] memory _receivers,\\n    //         uint32[] memory _percentAllocations\\n    //     ) = updateAll(_sortedList, _splitDistributorFee);\\n    //     splitMain.distributeERC20(\\n    //         split,\\n    //         _token,\\n    //         _receivers,\\n    //         _percentAllocations,\\n    //         _splitDistributorFee,\\n    //         _distributorAddress\\n    //     );\\n        \\n    // }\\n\\n    // calculate the split allocations\\n    // verifys the address list is sorted, has no dups, and is valid\\n    // gets the total seconds from all members square rooted for % calc\\n    // set up arrays and parameters for 0xsplits contract call\\n    //  addresses sorted, only non zero allocations\\n    //  keep track of running total of allocations because it must equal PERCENTAGE_SCALE\\n    function calculate(address[] memory _sortedList)\\n        public\\n        virtual\\n        view\\n        returns (\\n            address[] memory _receivers,\\n            uint32[] memory _percentAllocations\\n        )\\n    {\\n        uint256 activeMembers;\\n        uint256 total;\\n        address previous;\\n\\n        // verify list is current members and is sorted\\n        if (_sortedList.length != members.length) revert InvalidSplit__MemberListSizeMismatch();\\n        MemberContribution[] memory memberDistribution = new MemberContribution[](_sortedList.length);\\n        for (uint256 i = 0; i < _sortedList.length; ) {\\n            address memberAddress = _sortedList[i];\\n            Member memory member = getMember(memberAddress);\\n            if (previous >= memberAddress) revert InvalidSplit__AccountsOutOfOrder(i);\\n\\n            // ignore inactive members\\n            if (member.activityMultiplier > 0) {\\n                memberDistribution[i] = MemberContribution({\\n                    receiverAddress: memberAddress,\\n                    calcContribution: calculateContributionOf(member)\\n                });\\n                // get the total seconds in the last period\\n                // total = total + unwrap(wrap(members[memberIdx - 1].secondsActive).sqrt());\\n                total += memberDistribution[i].calcContribution;\\n                unchecked { // gas optimization: very unlikely to overflow\\n                    activeMembers++;\\n                }\\n                previous = memberAddress;\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        // define variables for split params\\n        _receivers = new address[](activeMembers);\\n        _percentAllocations = new uint32[](activeMembers);\\n\\n        // define variables for second loop\\n        uint32 runningTotal;\\n        uint256 nonZeroIndex; // index counter for non zero allocations\\n        // fill 0xsplits arrays with sorted list\\n        for (uint256 i = 0; i < _sortedList.length; ) {\\n            // uint256 memberIdx = memberIdxs[_sortedList[i]];\\n            // Member memory _member = members[memberIdx - 1];\\n            // if (_member.activityMultiplier > 0) {\\n            if (memberDistribution[i].calcContribution > 0) {\\n                _receivers[nonZeroIndex] = memberDistribution[i].receiverAddress;\\n                _percentAllocations[nonZeroIndex] = uint32(\\n                    (memberDistribution[i].calcContribution * PERCENTAGE_SCALE) / total\\n                );\\n\\n                runningTotal += _percentAllocations[nonZeroIndex];\\n                unchecked {\\n                    nonZeroIndex++;\\n                }\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        // if there was any loss add it to the first account.\\n        if (runningTotal != PERCENTAGE_SCALE) {\\n            _percentAllocations[0] += uint32(PERCENTAGE_SCALE - runningTotal);\\n        }\\n    }\\n\\n    function setUpdaterConfig(address _connext, uint32 _updaterDomain, address _updater) external onlyOwner {\\n        connext = IConnext(_connext);\\n        updaterDomain = _updaterDomain;\\n        updater = _updater;\\n        emit NewUpdaterConfig(_connext, _updaterDomain, _updater);\\n    }\\n\\n    function updateNetworkRegistry(uint32 _chainId, Registry memory _newRegistry) external onlyOwner {\\n        if (networkRegistry[_chainId].registryAddress != address(0) && _newRegistry.registryAddress == address(0)) {\\n            delete networkRegistry[_chainId];\\n        } else {\\n            require(_newRegistry.domainId != 0 && _newRegistry.registryAddress != address(0), \\\"NetworkRegistry: invalid registry\\\");\\n            networkRegistry[_chainId] = _newRegistry;\\n        }\\n        emit NetworkRegistryUpdated(_chainId, _newRegistry.registryAddress, _newRegistry.domainId, _newRegistry.delegate);\\n    }\\n\\n    function isMainRegistry() public view returns (bool) {\\n        return updaterDomain == 0 && updater == address(0);\\n    }\\n\\n    // Split CONFIG\\n    function setSplit(address _splitMain, address _split) public onlyOwnerOrUpdater {\\n        splitMain = ISplitMain(_splitMain);\\n        address currentController = splitMain.getController(_split);\\n        require(currentController != address(0), \\\"NetworkRegistry: !exists || immutable\\\");\\n        address newController = splitMain.getNewPotentialController(_split);\\n        if (newController != address(this) && currentController != address(this)) {\\n            revert Split_ControlNotHandedOver();\\n        }\\n        split = _split;\\n        emit SplitUpdated(_splitMain, split);\\n        if (newController == address(this)) {\\n            acceptSplitControl();\\n        }\\n    }\\n\\n    function updateNetworkSplit(\\n        uint32[] memory _chainIds,\\n        address[] memory _splitsMain,\\n        address[] memory _splits,\\n        uint256[] memory _relayerFees\\n    ) external payable onlyOwner validNetworkParams(_chainIds, _relayerFees) {\\n        require(\\n            _splitsMain.length == _chainIds.length && _splits.length == _chainIds.length,\\n            \\\"NetworkRegistry: params size mismatch\\\"\\n        );\\n        bytes4 action = ISplitManager.setSplit.selector;\\n        for (uint256 i = 0; i < _chainIds.length; ) {\\n            bytes memory callData = abi.encode(action, _splitsMain[i], _splits[i]);\\n            _execSyncAction(action, callData, _chainIds[i], _relayerFees[i]);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    // 0xSplits OWNERSHIP INTERFCE WRAPPERS\\n\\n    function transferSplitControl(address _newController) public onlyOwnerOrUpdater {\\n        splitMain.transferControl(split, _newController);\\n    }\\n\\n    function transferNetworkSplitControl(\\n        uint32[] memory _chainIds,\\n        address[] memory _newControllers,\\n        uint256[] memory _relayerFees\\n    ) external payable onlyOwner validNetworkParams(_chainIds, _relayerFees) {\\n        require(_newControllers.length == _chainIds.length, \\\"NetworkRegistry: params size mismatch\\\");\\n        bytes4 action = ISplitManager.transferSplitControl.selector;\\n        for (uint256 i = 0; i < _chainIds.length; ) {\\n            bytes memory callData = abi.encode(action, _newControllers[i]);\\n            _execSyncAction(action, callData, _chainIds[i], _relayerFees[i]);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function acceptSplitControl() public onlyOwnerOrUpdater {\\n        splitMain.acceptControl(split);\\n    }\\n\\n    function acceptNetworkSplitControl(\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable onlyOwner validNetworkParams(_chainIds, _relayerFees) {\\n        bytes4 action = ISplitManager.acceptSplitControl.selector;\\n        bytes memory callData = abi.encode(action);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    function cancelSplitControlTransfer() public onlyOwnerOrUpdater {\\n        splitMain.cancelControlTransfer(split);\\n    }\\n\\n    function cancelNetworkSplitControlTransfer(\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable onlyOwner validNetworkParams(_chainIds, _relayerFees) {\\n        bytes4 action = ISplitManager.cancelSplitControlTransfer.selector;\\n        bytes memory callData = abi.encode(action);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    /** @notice The receiver function as required by the IXReceiver interface.\\n     * @dev \\n     */\\n    function xReceive(\\n        bytes32 _transferId,\\n        uint256 /* _amount */,\\n        address /* _asset */,\\n        address _originSender,\\n        uint32 _origin,\\n        bytes memory _incomingCalldata\\n    ) external onlyUpdater(_originSender, _origin) returns (bytes memory) {\\n        bytes4 action = abi.decode(_incomingCalldata, (bytes4));\\n        bytes memory callData;\\n        if (action == IMemberRegistry.setNewMember.selector) {\\n            (\\n                ,\\n                address _member,\\n                uint32 _activityMultiplier,\\n                uint32 _startDate\\n            ) = abi.decode(_incomingCalldata, (bytes4, address, uint32, uint32));\\n            callData = abi.encodeWithSelector(IMemberRegistry.setNewMember.selector, _member, _activityMultiplier, _startDate);\\n        } else if (action == IMemberRegistry.updateMember.selector) {\\n            (, address _member, uint32 _activityMultiplier) = abi.decode(_incomingCalldata, (bytes4, address, uint32));\\n            callData = abi.encodeWithSelector(action, _member, _activityMultiplier);\\n        } else if (action == IMemberRegistry.batchNewMember.selector) {\\n            (\\n                ,\\n                address[] memory _members,\\n                uint32[] memory _activityMultipliers,\\n                uint32[] memory _startDates\\n            ) = abi.decode(_incomingCalldata, (bytes4, address[], uint32[], uint32[]));\\n            callData = abi.encodeWithSelector(action, _members, _activityMultipliers, _startDates);\\n        } else if (action == IMemberRegistry.batchUpdateMember.selector) {\\n            (\\n                ,\\n                address[] memory _members,\\n                uint32[] memory _activityMultipliers\\n            ) = abi.decode(_incomingCalldata, (bytes4, address[], uint32[]));\\n            callData = abi.encodeWithSelector(action, _members, _activityMultipliers);\\n        } else if (action == IMemberRegistry.updateSecondsActive.selector) {\\n            callData = abi.encodeWithSelector(action);\\n        } else if (action == ISplitManager.updateSplits.selector) {\\n            (, address[] memory _sortedList, uint32 _splitDistributorFee) = abi.decode(_incomingCalldata, (bytes4, address[], uint32));\\n            callData = abi.encodeWithSelector(action, _sortedList, _splitDistributorFee);\\n        } else if (action == ISplitManager.updateAll.selector) {\\n            (, address[] memory _sortedList, uint32 _splitDistributorFee) = abi.decode(_incomingCalldata, (bytes4, address[], uint32));\\n            callData = abi.encodeWithSelector(action, _sortedList, _splitDistributorFee);\\n        } else if (action == ISplitManager.setSplit.selector) {\\n            (, address _splitMain, address _split) = abi.decode(_incomingCalldata, (bytes4, address, address));\\n            callData = abi.encodeWithSelector(action, _splitMain, _split);\\n        } else if (action == ISplitManager.transferSplitControl.selector) {\\n            (, address _newController) = abi.decode(_incomingCalldata, (bytes4, address));\\n            callData = abi.encodeWithSelector(action, _newController);\\n        } else if (action == ISplitManager.acceptSplitControl.selector) {\\n            callData = abi.encodeWithSelector(action);\\n        } else if (action == ISplitManager.cancelSplitControlTransfer.selector) {\\n            callData = abi.encodeWithSelector(action);\\n        }\\n\\n        (bool success, bytes memory data) = address(this).call(callData);\\n        emit SyncActionPerformed(_transferId, _origin, action, success, _originSender);\\n        return data;\\n    }\\n}\\n\",\"keccak256\":\"0x99be5ccf4a613fc0cb37e2483a51cbeda65f9faa80d18a4d35a33b4e98d6f712\",\"license\":\"MIT\"},\"contracts/NetworkRegistryShaman.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { IBaal } from \\\"@daohaus/baal-contracts/contracts/interfaces/IBaal.sol\\\";\\n\\nimport { NetworkRegistry } from \\\"./NetworkRegistry.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract NetworkRegistryShaman is NetworkRegistry {\\n\\n    IBaal public baal;\\n    uint256 public sharesToMint;\\n    bool public burnShares;\\n\\n    modifier isManagerShaman() {\\n        if (isMainRegistry()) {\\n            require(address(baal) != address(0) && baal.isManager(address(this)), \\\"NetworkRegistryShaman: !init || ! manager\\\");\\n        }\\n        _;\\n    }\\n\\n    function initialize(bytes memory _initializationParams) external override initializer {\\n        (\\n            address _connext,\\n            uint32 _updaterDomain,\\n            address _updater,\\n            address _splitMain,\\n            address _split,\\n            address _baal,\\n            uint256 _sharesToMint,\\n            bool _burnShares\\n        ) = abi.decode(_initializationParams, (address, uint32, address, address, address, address, uint256, bool));\\n        baal = IBaal(_baal);\\n        __NetworkRegistry_init(\\n            _connext,\\n            _updaterDomain,\\n            _updater,\\n            _splitMain,\\n            _split,\\n            baal.avatar() // NOTICE: Baal avatar as registry Owner\\n        );\\n        sharesToMint = _sharesToMint;\\n        burnShares = _burnShares;\\n    }\\n\\n    function setShamanConfig(uint256 _sharesToMint, bool _burnShares) external onlyOwnerOrUpdater {\\n        burnShares = _burnShares;\\n        sharesToMint = _sharesToMint;\\n    }\\n\\n    function setNewMember(\\n        address _member,\\n        uint32 _activityMultiplier,\\n        uint32 _startDate\\n    ) public override isManagerShaman {\\n        super.setNewMember(_member, _activityMultiplier, _startDate);\\n        if (isMainRegistry()) {\\n            address[] memory _receivers = new address[](1);\\n            _receivers[0] = _member;\\n            uint256[] memory _amounts = new uint256[](1);\\n            _amounts[0] = sharesToMint;\\n            baal.mintShares(_receivers, _amounts);\\n        }\\n    }\\n\\n    function updateMember(\\n        address _member,\\n        uint32 _activityMultiplier\\n    ) public override isManagerShaman {\\n        super.updateMember(_member, _activityMultiplier);\\n        if (isMainRegistry() && burnShares) {\\n            address[] memory _from = new address[](1);\\n            _from[0] = _member;\\n            uint256[] memory _amounts = new uint256[](1);\\n            _amounts[0] = sharesToMint;\\n            baal.burnShares(_from, _amounts);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ba345bed398e2bc0dc0388a6114aa88f7af76d4cc63c9306ab132d6b73422df\",\"license\":\"MIT\"},\"contracts/interfaces/IMemberRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/**\\n * @title An on-chain member activity registry\\n * @author DAOHaus\\n * @notice Interface to manage an on-chain member activity registry\\n * @dev Includes minimal interfaces to implement a registry to track members & active time\\n */\\ninterface IMemberRegistry {\\n\\n    /**\\n     * @notice Adds a new member to the registry\\n     * @dev Activity multiplier could be set within 0-100 (%) range (i.e. 50 -> part-time 100 -> full-time)\\n     * but it's up to the implementer to establish the multiplier boundaries\\n     * @param _member The addres of the new member to be added to the registry\\n     * @param _activityMultiplier The member activity multiplier\\n     * @param _startDate The date member when the member got active\\n     */\\n    function setNewMember(address _member, uint32 _activityMultiplier, uint32 _startDate) external;\\n    \\n    /**\\n     * @notice Updates the activity multiplier of an existing member\\n     * @dev Make sure member is in the registry\\n     * Activity multiplier could be set within 0-100 (%) range (i.e. 50 -> part-time 100 -> full-time)\\n     * but it's up to the implementer to establish the multiplier boundaries\\n     * @param _member The addres of the existing member\\n     * @param _activityMultiplier The member new activity multiplier\\n     */\\n    function updateMember(address _member, uint32 _activityMultiplier) external;\\n\\n    /**\\n     * @notice Adds a new set of members to the registry\\n     * @dev Make sure array parameters are of the same length\\n     * Activity multiplier could be set within 0-100 (%) range (i.e. 50 -> part-time 100 -> full-time)\\n     * but it's up to the implementer to establish the multiplier boundaries\\n     * @param _members A list of member addresses to be added to the registry\\n     * @param _activityMultipliers Activity multipliers for each new member\\n     * @param _startDates A list of dates when each member got active\\n     */\\n    function batchNewMember(address[] memory _members, uint32[] memory _activityMultipliers, uint32[] memory _startDates) external;\\n\\n    /**\\n     * @notice Updates the activity multiplier of a set of existing members\\n     * @dev Make sure members are in the registry\\n     * Activity multiplier could be set within 0-100 (%) range (i.e. 50 -> part-time 100 -> full-time)\\n     * but it's up to the implementer to establish the multiplier boundaries\\n     * @param _members A list of existing members\\n     * @param _activityMultipliers New activity multipliers for each member\\n     */\\n    function batchUpdateMember(address[] memory _members, uint32[] memory _activityMultipliers) external;\\n\\n    /**\\n     * @notice Updates seconds active for each member since the last update epoch\\n     * @dev It should manage a lastActivityUpdate state variable to update activity based on last update epoch\\n     * however for new members it should update seconds based each member startDate\\n     */\\n    function updateSecondsActive() external;\\n}\\n\",\"keccak256\":\"0x5e5895ecad44b842c3df77df7d1c5c9d5979e6f25654f8bf0fd35fd7cfc350e7\",\"license\":\"MIT\"},\"contracts/interfaces/INetworkMemberRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { IMemberRegistry } from \\\"./IMemberRegistry.sol\\\";\\nimport { ISplitManager } from \\\"./ISplitManager.sol\\\";\\n\\ninterface INetworkMemberRegistry is IMemberRegistry, ISplitManager {\\n\\n    struct Registry {\\n        uint32 domainId;\\n        address registryAddress; // registryAddress: NetworkRegistry on destination\\n        address delegate; // delegate: address that can revert or forceLocal on destination\\n    }\\n\\n    function initialize(bytes memory _initializationParams) external;\\n\\n    function isMainRegistry() external view returns (bool);\\n\\n    function setUpdaterConfig(address _connext, uint32 _updaterDomain, address _updater) external;\\n    function updateNetworkRegistry(uint32 _chainId, Registry memory _registry) external;\\n\\n    function syncSetNewMember(\\n        address _member,\\n        uint32 _activityMultiplier,\\n        uint32 _startDate,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable;\\n\\n    function syncUpdateMember(\\n        address _member,\\n        uint32 _activityMultiplier,\\n        uint32[] calldata chainIds,\\n        uint256[] calldata relayerFees\\n    ) external payable;\\n\\n    function syncBatchNewMember(\\n        address[] calldata _members,\\n        uint32[] calldata _activityMultipliers,\\n        uint32[] calldata _startDates,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable;\\n\\n    function syncNetworkMemberRegistry(\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable;\\n\\n    function syncBatchUpdateMember(\\n        address[] calldata _members,\\n        uint32[] calldata _activityMultipliers,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable;\\n\\n    function syncUpdateSecondsActive(\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable;\\n\\n    function syncUpdateSplits(\\n        address[] calldata _sortedList,\\n        uint32 _splitDistributorFee,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable;\\n\\n    function syncUpdateAll(\\n        address[] calldata _sortedList,\\n        uint32 _splitDistributorFee,\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable;\\n\\n    function updateNetworkSplit(\\n        uint32[] memory _chainIds,\\n        address[] memory _splitsMain,\\n        address[] memory _splits,\\n        uint256[] memory _relayerFees\\n    ) external payable;\\n\\n    // function updateNetworkSplit(\\n    //     uint32[] memory _chainIds,\\n    //     address[] memory _splits,\\n    //     uint32[] memory _splitDistributorFees,\\n    //     uint256[] memory _relayerFees\\n    // ) external payable;\\n\\n    function transferNetworkSplitControl(\\n        uint32[] memory _chainIds,\\n        address[] memory _newControllers,\\n        uint256[] memory _relayerFees\\n    ) external payable;\\n\\n    function acceptNetworkSplitControl(\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable;\\n\\n    function cancelNetworkSplitControlTransfer(\\n        uint32[] calldata _chainIds,\\n        uint256[] calldata _relayerFees\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x750e0faaaa5ef5fec6fcec468a721ae4e636b82489200cad299e526405f6455c\",\"license\":\"MIT\"},\"contracts/interfaces/ISplitMain.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISplitMain {\\n  /**\\n   * FUNCTIONS\\n   */\\n\\n  function walletImplementation() external returns (address);\\n\\n  function createSplit(\\n    address[] calldata accounts,\\n    uint32[] calldata percentAllocations,\\n    uint32 distributorFee,\\n    address controller\\n  ) external returns (address);\\n\\n  function predictImmutableSplitAddress(\\n    address[] calldata accounts,\\n    uint32[] calldata percentAllocations,\\n    uint32 distributorFee\\n  ) external view returns (address);\\n\\n  function updateSplit(\\n    address split,\\n    address[] calldata accounts,\\n    uint32[] calldata percentAllocations,\\n    uint32 distributorFee\\n  ) external;\\n\\n  function getController(address split) external view returns (address);\\n\\n  function getNewPotentialController(address split) external view returns (address);\\n\\n  function transferControl(address split, address newController) external;\\n\\n  function cancelControlTransfer(address split) external;\\n\\n  function acceptControl(address split) external;\\n\\n  function makeSplitImmutable(address split) external;\\n\\n  function distributeETH(\\n    address split,\\n    address[] calldata accounts,\\n    uint32[] calldata percentAllocations,\\n    uint32 distributorFee,\\n    address distributorAddress\\n  ) external;\\n\\n  function updateAndDistributeETH(\\n    address split,\\n    address[] calldata accounts,\\n    uint32[] calldata percentAllocations,\\n    uint32 distributorFee,\\n    address distributorAddress\\n  ) external;\\n\\n  function distributeERC20(\\n    address split,\\n    IERC20 token,\\n    address[] calldata accounts,\\n    uint32[] calldata percentAllocations,\\n    uint32 distributorFee,\\n    address distributorAddress\\n  ) external;\\n\\n  function updateAndDistributeERC20(\\n    address split,\\n    IERC20 token,\\n    address[] calldata accounts,\\n    uint32[] calldata percentAllocations,\\n    uint32 distributorFee,\\n    address distributorAddress\\n  ) external;\\n\\n  function withdraw(\\n    address account,\\n    uint256 withdrawETH,\\n    IERC20[] calldata tokens\\n  ) external;\\n\\n  /**\\n   * EVENTS\\n   */\\n\\n  /** @notice emitted after each successful split creation\\n   *  @param split Address of the created split\\n   */\\n  event CreateSplit(address indexed split);\\n\\n  /** @notice emitted after each successful split update\\n   *  @param split Address of the updated split\\n   */\\n  event UpdateSplit(address indexed split);\\n\\n  /** @notice emitted after each initiated split control transfer\\n   *  @param split Address of the split control transfer was initiated for\\n   *  @param newPotentialController Address of the split's new potential controller\\n   */\\n  event InitiateControlTransfer(\\n    address indexed split,\\n    address indexed newPotentialController\\n  );\\n\\n  /** @notice emitted after each canceled split control transfer\\n   *  @param split Address of the split control transfer was canceled for\\n   */\\n  event CancelControlTransfer(address indexed split);\\n\\n  /** @notice emitted after each successful split control transfer\\n   *  @param split Address of the split control was transferred for\\n   *  @param previousController Address of the split's previous controller\\n   *  @param newController Address of the split's new controller\\n   */\\n  event ControlTransfer(\\n    address indexed split,\\n    address indexed previousController,\\n    address indexed newController\\n  );\\n\\n  /** @notice emitted after each successful ETH balance split\\n   *  @param split Address of the split that distributed its balance\\n   *  @param amount Amount of ETH distributed\\n   *  @param distributorAddress Address to credit distributor fee to\\n   */\\n  event DistributeETH(\\n    address indexed split,\\n    uint256 amount,\\n    address indexed distributorAddress\\n  );\\n\\n  /** @notice emitted after each successful ERC20 balance split\\n   *  @param split Address of the split that distributed its balance\\n   *  @param token Address of ERC20 distributed\\n   *  @param amount Amount of ERC20 distributed\\n   *  @param distributorAddress Address to credit distributor fee to\\n   */\\n  event DistributeERC20(\\n    address indexed split,\\n    IERC20 indexed token,\\n    uint256 amount,\\n    address indexed distributorAddress\\n  );\\n\\n  /** @notice emitted after each successful withdrawal\\n   *  @param account Address that funds were withdrawn to\\n   *  @param ethAmount Amount of ETH withdrawn\\n   *  @param tokens Addresses of ERC20s withdrawn\\n   *  @param tokenAmounts Amounts of corresponding ERC20s withdrawn\\n   */\\n  event Withdrawal(\\n    address indexed account,\\n    uint256 ethAmount,\\n    IERC20[] tokens,\\n    uint256[] tokenAmounts\\n  );\\n\\n}\\n\",\"keccak256\":\"0x5f269fda1a62635c0052b6c29482b37f142443a8057cc73291e93acaf82e20da\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ISplitManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title 0xSplit manager interface\\n * @author DAOHaus\\n * @notice Interface that allow a contract to become a controller and update a 0xSplit distribution\\n */\\ninterface ISplitManager {\\n    function calculate(address[] memory _sortedList) external view returns (address[] memory, uint32[] memory);\\n    function updateSplits(address[] memory _sortedList, uint32 _splitDistributorFee) external;\\n    function updateAll(address[] memory _sortedList, uint32 _splitDistributorFee) external;\\n\\n    // TODO: might remove this\\n    // function updateAllAndDistributeETH(address[] memory _sortedList, address _distributorAddress, uint32 _splitDistributorFee) external;\\n    // function updateAllAndDistributeERC20(address[] memory _sortedList, IERC20 _token, address _distributorAddress, uint32 _splitDistributorFee) external;\\n\\n    /**\\n     * @notice Updates the addresses for the 0xSplitMain proxy and 0xSplit contract\\n     * @dev Should make sure the 0xSplit contract exists and isn't immutable (no owner)\\n     * Also make sure controller has been already handed over to the manager or waiting to be accepted.\\n     * If manager is already a potential controller, call acceptSplitControl()\\n     * @param _splitMain The address of the 0xSplitMain\\n     * @param _split The address of the 0xSplit contract\\n     */\\n    function setSplit(address _splitMain, address _split) external;\\n\\n    function transferSplitControl(address _newController) external;\\n\\n    /**\\n     * @notice Accepts control of the current 0xSplit contract\\n     * @dev should accept control of the current 0xsplit in the state\\n     */\\n    function acceptSplitControl() external;\\n    function cancelSplitControlTransfer() external;\\n}\\n\",\"keccak256\":\"0x286085234a40f5f58759319d4c8bbfb0269d288070ad1400d1bd420f2e6a3a62\",\"license\":\"MIT\"},\"contracts/registry/MemberRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@prb/math/src/UD60x18.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n//*********************************************************************//\\n// --------------------------- custom errors ------------------------- //\\n//*********************************************************************//\\nerror Member__AlreadyRegistered(address _member);\\nerror Member__NotRegistered(address _member);\\nerror InvalidMember__Address(address _member);\\nerror InvalidMember__StartDateInTheFuture(address _member, uint32 _startDate);\\nerror InvalidMember__ActivityMultiplier(address _member, uint32 _activityMultiplier);\\n\\nabstract contract MemberRegistry {\\n    struct Member {\\n        address account;\\n        uint32 secondsActive;\\n        uint32 startDate;\\n        uint32 activityMultiplier;\\n    }\\n\\n    // iterable\\n    Member[] public members;\\n    uint256 internal count = 0;\\n    \\n    mapping(address => uint256) public memberIdxs;\\n\\n    // store when a update happens\\n    uint32 public lastActivityUpdate;\\n\\n    // EVENTS\\n    event NewMember(address indexed _member, uint32 _startDate, uint32 _activityMultiplier);\\n    event UpdateMember(address indexed _member, uint32 _activityMultiplier);\\n    event UpdateMemberSeconds(address indexed _member, uint32 _secondsActive);\\n    \\n    event RegistryActivityUpdate(uint32 _date, uint256 _totalMemberUpdates);\\n\\n    // REGISTERY MODIFIERS\\n\\n    // add member to registry\\n    // if member already exists, update their activity multiplier\\n    // if member does not exist, add them to the registry\\n    function _setNewMember(\\n        address _member,\\n        uint32 _activityMultiplier,\\n        uint32 _startDate\\n    ) internal {\\n        if (_member == address(0)) revert InvalidMember__Address(_member);\\n        if (memberIdxs[_member] != 0) revert Member__AlreadyRegistered(_member);\\n        if (_activityMultiplier > 100) revert InvalidMember__ActivityMultiplier(_member, _activityMultiplier);\\n        if (_startDate > block.timestamp) revert InvalidMember__StartDateInTheFuture(_member, _startDate);\\n\\n        // set to 0, will be updated in next update\\n        uint32 secondsActive = 0;\\n        members.push(\\n            Member(_member, secondsActive, _startDate, _activityMultiplier)\\n        );\\n        unchecked {\\n            memberIdxs[_member] = ++count;\\n        }\\n        emit NewMember(_member, _startDate, _activityMultiplier);\\n    }\\n\\n    function _updateMember(\\n        address _member,\\n        uint32 _activityMultiplier // e.g. 0-100 %\\n    ) internal {\\n        uint256 memberIdx = memberIdxs[_member];\\n        if(memberIdx == 0) revert Member__NotRegistered(_member);\\n        if(_activityMultiplier > 100) revert InvalidMember__ActivityMultiplier(_member, _activityMultiplier);\\n\\n        Member storage member = members[memberIdxs[_member] - 1];\\n        member.activityMultiplier = _activityMultiplier;\\n\\n        emit UpdateMember(_member, _activityMultiplier);\\n    }\\n\\n    // add seconds active to member from last update\\n    // for brand new members it will be an update from their start date\\n    // todo: this could be more generic, use a controller contract to update\\n    function _updateSecondsActive() internal virtual {\\n        uint32 currentDate = uint32(block.timestamp);\\n        // update struct with total seconds active and seconds in last claim\\n        uint256 i;\\n        for (i = 0; i < members.length; ) {\\n            Member storage _member = members[i];\\n            uint32 newSecondsActive = 0;\\n            if (_member.activityMultiplier > 0) {\\n                uint32 initDate = _member.secondsActive > 0 ? lastActivityUpdate : _member.startDate;\\n                uint256 activeSeconds = currentDate - initDate;\\n                // multiply by modifier and divide by 100 to get modifier % of seconds\\n                newSecondsActive = uint32((activeSeconds * _member.activityMultiplier) / 100);\\n            }\\n            _member.secondsActive += newSecondsActive;\\n            emit UpdateMemberSeconds(_member.account, newSecondsActive);\\n            unchecked {\\n                i++; // gas optimization: very unlikely to overflow\\n            }\\n        }\\n        emit RegistryActivityUpdate(currentDate, i);\\n        lastActivityUpdate = currentDate;\\n    }\\n\\n    function calculateContributionOf(Member memory _member) public virtual pure returns (uint256) {\\n        return unwrap(wrap(_member.secondsActive).sqrt());\\n    }\\n\\n    function getMembers() public view returns (Member[] memory) {\\n        return members;\\n    }\\n\\n    function getMembersSplitProperties() public view returns(\\n        address[] memory,\\n        uint32[] memory,\\n        uint32[] memory\\n    ) {\\n        address[] memory _members = new address[](members.length);\\n        uint32[] memory _activityMultipliers = new uint32[](members.length);\\n        uint32[] memory _startDates = new uint32[](members.length);\\n        for (uint256 i = 0; i < members.length; ) {\\n            _members[i] = members[i].account;\\n            _activityMultipliers[i] = members[i].activityMultiplier;\\n            _startDates[i] = members[i].startDate;\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        return (_members, _activityMultipliers, _startDates);\\n    }\\n\\n    function getMember(address _member) public view returns (Member memory) {\\n        if(memberIdxs[_member] == 0) revert Member__NotRegistered(_member);\\n        return members[memberIdxs[_member] - 1];\\n    }\\n\\n    function totalMembers() public view returns (uint256) {\\n        return members.length;\\n    }\\n\\n    function calculateContributionOf(address _memberAddress) public view returns (uint256) {\\n        Member memory member = getMember(_memberAddress);\\n        return calculateContributionOf(member);\\n    }\\n\\n    function calculateTotalContributions() public view returns (uint256 total) {\\n        for (uint256 i = 0; i < members.length; ) {\\n            total += calculateContributionOf(members[i]);\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8cd6e27f3ca383e40984002a14ef8a1c7aa8f74a2e8f3abf4ceece231d92e9fb\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405260006066553480156200001657600080fd5b506200002162000027565b620000e9565b600054610100900460ff1615620000945760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e7576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b615dee80620000f96000396000f3fe60806040526004361061031a5760003560e01c80638dc15791116101ab578063c818c70f116100f7578063e9172c2d11610095578063f76541761161006f578063f765417614610962578063fd614f4114610982578063ffcf9bae146109af578063fff9834d146109cf57600080fd5b8063e9172c2d14610902578063f2fde38b14610922578063f6ce03541461094257600080fd5b8063df034cd0116100d1578063df034cd01461088d578063e46867fd146108ad578063e4a7c603146108cd578063e5a2a2a5146108e257600080fd5b8063c818c70f14610826578063cf2933c114610846578063de4b05481461086657600080fd5b8063a084b6c011610164578063b044631c1161013e578063b044631c146107a1578063b0affdf7146107b4578063b85a2ce1146107e2578063bf59b4881461080257600080fd5b8063a084b6c014610764578063a8e6f1e714610779578063ab6efc301461078c57600080fd5b80638dc15791146106345780638ddc5f35146106545780638ee31392146106d05780639d7b8545146107025780639eab525314610722578063a02b60061461074457600080fd5b80635523a9601161026a578063715018a61161022357806376e92559116101fd57806376e92559146105cc5780637f6d2708146105e157806380e038bc146106015780638da5cb5b1461061657600080fd5b8063715018a61461058157806375491512146105965780637698a833146105ac57600080fd5b80635523a960146104bb57806356c0e992146104ce5780635daf08ca146104e157806364c6d00a1461053757806367942be01461054a5780636bda59da1461056e57600080fd5b8063325d1e9c116102d75780633a8246f3116102b15780633a8246f31461045e5780633f26479e14610471578063439fab9114610488578063535949a6146104a857600080fd5b8063325d1e9c146103fb57806334e2fc651461040e578063371b52e31461044957600080fd5b80630202f82a1461031f5780630726312a146103345780630bddc56b146103545780630e769b2b146103835780631049d736146103bb5780632ada2596146103ce575b600080fd5b61033261032d366004614630565b6109e2565b005b34801561034057600080fd5b5061033261034f3660046146c4565b610ba3565b34801561036057600080fd5b50606f5461036e9060ff1681565b60405190151581526020015b60405180910390f35b34801561038f57600080fd5b50606b546103a3906001600160a01b031681565b6040516001600160a01b03909116815260200161037a565b6103326103c936600461470f565b610d65565b3480156103da57600080fd5b506103ee6103e936600461477a565b610f27565b60405161037a91906147d1565b6103326104093660046147df565b611023565b34801561041a57600080fd5b5061043b61042936600461477a565b60676020526000908152604090205481565b60405190815260200161037a565b34801561045557600080fd5b506103326111d8565b61033261046c366004614886565b611285565b34801561047d57600080fd5b5061043b620f424081565b34801561049457600080fd5b506103326104a33660046149c9565b611396565b6103326104b6366004614a05565b61159a565b6103326104c9366004614886565b611801565b6103326104dc36600461470f565b611912565b3480156104ed57600080fd5b506105016104fc366004614af5565b611a96565b604080516001600160a01b03909516855263ffffffff93841660208601529183169184019190915216606082015260800161037a565b61033261054536600461470f565b611ae3565b34801561055657600080fd5b5061055f611beb565b60405161037a93929190614b88565b61033261057c366004614d21565b611e05565b34801561058d57600080fd5b50610332611f6f565b3480156105a257600080fd5b5061043b606e5481565b3480156105b857600080fd5b506103326105c7366004614da8565b611f83565b3480156105d857600080fd5b5060655461043b565b3480156105ed57600080fd5b506103326105fc366004614e50565b612153565b34801561060d57600080fd5b506103326121b2565b34801561062257600080fd5b506033546001600160a01b03166103a3565b34801561064057600080fd5b5061033261064f366004614e80565b61222f565b34801561066057600080fd5b506106a461066f366004614ecb565b606a602052600090815260409020805460019091015463ffffffff8216916001600160a01b03600160201b9091048116911683565b6040805163ffffffff90941684526001600160a01b03928316602085015291169082015260600161037a565b3480156106dc57600080fd5b506068546106ed9063ffffffff1681565b60405163ffffffff909116815260200161037a565b34801561070e57600080fd5b5061033261071d36600461477a565b612364565b34801561072e57600080fd5b50610737612419565b60405161037a9190614ee8565b34801561075057600080fd5b5061033261075f366004614e80565b6124b0565b34801561077057600080fd5b5061036e6124c3565b610332610787366004614f36565b6124f1565b34801561079857600080fd5b5061043b61265a565b6103326107af36600461470f565b6126f6565b3480156107c057600080fd5b506107d46107cf366004614fe2565b6127fe565b60405161037a929190615016565b3480156107ee57600080fd5b506103326107fd36600461503b565b612b96565b34801561080e57600080fd5b506068546106ed90600160c01b900463ffffffff1681565b34801561083257600080fd5b50610332610841366004615069565b612dea565b34801561085257600080fd5b50610332610861366004615097565b612fad565b34801561087257600080fd5b506068546103a390600160201b90046001600160a01b031681565b34801561089957600080fd5b506069546103a3906001600160a01b031681565b3480156108b957600080fd5b506103326108c83660046150fa565b613046565b3480156108d957600080fd5b506103326130f9565b3480156108ee57600080fd5b50606d546103a3906001600160a01b031681565b34801561090e57600080fd5b5061043b61091d36600461477a565b613101565b34801561092e57600080fd5b5061033261093d36600461477a565b61311f565b34801561094e57600080fd5b5061033261095d366004615177565b613198565b34801561096e57600080fd5b50606c546103a3906001600160a01b031681565b34801561098e57600080fd5b506109a261099d3660046151b7565b613244565b60405161037a919061528d565b3480156109bb57600080fd5b5061043b6109ca3660046152a0565b613800565b6103326109dd366004615324565b613827565b6109ea613a33565b838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208087028281018201909352868252909350869250859182918501908490808284376000920191909152505082518451149150610a7a90505760405162461bcd60e51b8152600401610a71906153e7565b60405180910390fd5b6000805b8251811015610ab657828181518110610a9957610a9961542c565b602002602001015182610aac9190615458565b9150600101610a7e565b50803414610ad65760405162461bcd60e51b8152600401610a719061546b565b610ae08989612dea565b6040805163c818c70f60e01b602082018190526001600160a01b038c169282019290925263ffffffff8a1660608201526000906080016040516020818303038152906040529050610b9682828b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d918291850190849080828437600092019190915250613a8d92505050565b5050505050505050505050565b610bab6124c3565b15610c4d57606d546001600160a01b031615801590610c315750606d5460405163f3ae241560e01b81523060048201526001600160a01b039091169063f3ae241590602401602060405180830381865afa158015610c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3191906154b3565b610c4d5760405162461bcd60e51b8152600401610a71906154d0565b610c58838383613ad2565b610c606124c3565b15610d6057604080516001808252818301909252600091602080830190803683370190505090508381600081518110610c9b57610c9b61542c565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050606e5481600081518110610cee57610cee61542c565b6020908102919091010152606d54604051632c78fd0360e21b81526001600160a01b039091169063b1e3f40c90610d2b9085908590600401615519565b600060405180830381600087803b158015610d4557600080fd5b505af1158015610d59573d6000803e3d6000fd5b5050505050505b505050565b610d6d613a33565b838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208087028281018201909352868252909350869250859182918501908490808284376000920191909152505082518451149150610df490505760405162461bcd60e51b8152600401610a71906153e7565b6000805b8251811015610e3057828181518110610e1357610e1361542c565b602002602001015182610e269190615458565b9150600101610df8565b50803414610e505760405162461bcd60e51b8152600401610a719061546b565b6000806000610e5d611beb565b604051929550909350915063e46867fd60e01b90600090610e88908390879087908790602001615570565b6040516020818303038152906040529050610f1982828e8e80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508d8d80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613a8d92505050565b505050505050505050505050565b6040805160808101825260008082526020808301829052828401829052606083018290526001600160a01b03851682526067905291822054909103610f8a5760405163c6040d1d60e01b81526001600160a01b0383166004820152602401610a71565b6001600160a01b038216600090815260676020526040902054606590610fb2906001906155c3565b81548110610fc257610fc261542c565b60009182526020918290206040805160808101825291909201546001600160a01b038116825263ffffffff600160a01b8204811694830194909452600160c01b8104841692820192909252600160e01b909104909116606082015292915050565b61102b613a33565b8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080870282810182019093528682529093508692508591829185019084908082843760009201919091525050825184511491506110b290505760405162461bcd60e51b8152600401610a71906153e7565b6000805b82518110156110ee578281815181106110d1576110d161542c565b6020026020010151826110e49190615458565b91506001016110b6565b5080341461110e5760405162461bcd60e51b8152600401610a719061546b565b6111198a8a8a610ba3565b60408051630393189560e11b602082018190526001600160a01b038d169282019290925263ffffffff808c1660608301528a16608082015260009060a0015b6040516020818303038152906040529050610f1982828b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d918291850190849080828437600092019190915250613a8d92505050565b6033546001600160a01b031633148061120557506069546001600160a01b03161580159061120557503330145b6112215760405162461bcd60e51b8152600401610a71906155d6565b606b54606c54604051630933e36d60e11b81526001600160a01b039182166004820152911690631267c6da906024015b600060405180830381600087803b15801561126b57600080fd5b505af115801561127f573d6000803e3d6000fd5b50505050565b83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808702828101820190935286825290935086925085918291850190849080828437600092019190915250508251845114915061130c90505760405162461bcd60e51b8152600401610a71906153e7565b6000805b82518110156113485782818151811061132b5761132b61542c565b60200260200101518261133e9190615458565b9150600101611310565b508034146113685760405162461bcd60e51b8152600401610a719061546b565b6113738a8a8a6124b0565b604051635015b00360e11b906000906111589083908e908e908e90602001615657565b600054610100900460ff16158080156113b65750600054600160ff909116105b806113d05750303b1580156113d0575060005460ff166001145b6114335760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a71565b6000805460ff191660011790558015611456576000805461ff0019166101001790555b600080600080600080600080898060200190518101906114769190615691565b9750975097509750975097509750975082606d60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506115318888888888606d60009054906101000a90046001600160a01b03166001600160a01b0316635aef7de66040518163ffffffff1660e01b8152600401602060405180830381865afa158015611508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152c9190615737565b613b26565b606e91909155606f805460ff191691151591909117905550508415935061159692505050576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6115a2613a33565b83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808702828101820190935286825290935086925085918291850190849080828437600092019190915250508251845114915061162990505760405162461bcd60e51b8152600401610a71906153e7565b6000805b8251811015611665578281815181106116485761164861542c565b60200260200101518261165b9190615458565b915060010161162d565b508034146116855760405162461bcd60e51b8152600401610a719061546b565b6117458d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061304692505050565b600063e46867fd60e01b90506000818f8f8f8f8f8f604051602001611770979695949392919061578f565b60405160208183030381529060405290506117f082828b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d918291850190849080828437600092019190915250613a8d92505050565b505050505050505050505050505050565b83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808702828101820190935286825290935086925085918291850190849080828437600092019190915250508251845114915061188890505760405162461bcd60e51b8152600401610a71906153e7565b6000805b82518110156118c4578281815181106118a7576118a761542c565b6020026020010151826118ba9190615458565b915060010161188c565b508034146118e45760405162461bcd60e51b8152600401610a719061546b565b6118ef8a8a8a61222f565b604051638dc1579160e01b906000906111589083908e908e908e90602001615657565b61191a613a33565b8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080870282810182019093528682529093508692508591829185019084908082843760009201919091525050825184511491506119a190505760405162461bcd60e51b8152600401610a71906153e7565b6000805b82518110156119dd578281815181106119c0576119c061542c565b6020026020010151826119d39190615458565b91506001016119a5565b508034146119fd5760405162461bcd60e51b8152600401610a719061546b565b604080516320380e2f60e21b6020820181905291600091015b6040516020818303038152906040529050610d5982828b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d918291850190849080828437600092019190915250613a8d92505050565b60658181548110611aa657600080fd5b6000918252602090912001546001600160a01b038116915063ffffffff600160a01b8204811691600160c01b8104821691600160e01b9091041684565b611aeb613a33565b838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208087028281018201909352868252909350869250859182918501908490808284376000920191909152505082518451149150611b7290505760405162461bcd60e51b8152600401610a71906153e7565b6000805b8251811015611bae57828181518110611b9157611b9161542c565b602002602001015182611ba49190615458565b9150600101611b76565b50803414611bce5760405162461bcd60e51b8152600401610a719061546b565b6040805163371b52e360e01b602082018190529160009101611a16565b606080606060006065805490506001600160401b03811115611c0f57611c0f614914565b604051908082528060200260200182016040528015611c38578160200160208202803683370190505b506065549091506000906001600160401b03811115611c5957611c59614914565b604051908082528060200260200182016040528015611c82578160200160208202803683370190505b506065549091506000906001600160401b03811115611ca357611ca3614914565b604051908082528060200260200182016040528015611ccc578160200160208202803683370190505b50905060005b606554811015611df85760658181548110611cef57611cef61542c565b60009182526020909120015484516001600160a01b0390911690859083908110611d1b57611d1b61542c565b60200260200101906001600160a01b031690816001600160a01b03168152505060658181548110611d4e57611d4e61542c565b90600052602060002001600001601c9054906101000a900463ffffffff16838281518110611d7e57611d7e61542c565b602002602001019063ffffffff16908163ffffffff168152505060658181548110611dab57611dab61542c565b9060005260206000200160000160189054906101000a900463ffffffff16828281518110611ddb57611ddb61542c565b63ffffffff90921660209283029190910190910152600101611cd2565b5091959094509092509050565b611e0d613a33565b82818051825114611e305760405162461bcd60e51b8152600401610a71906153e7565b6000805b8251811015611e6c57828181518110611e4f57611e4f61542c565b602002602001015182611e629190615458565b9150600101611e34565b50803414611e8c5760405162461bcd60e51b8152600401610a719061546b565b8551855114611ead5760405162461bcd60e51b8152600401610a71906153e7565b639d7b854560e01b60005b8751811015611f6557600082888381518110611ed657611ed661542c565b6020026020010151604051602001611f0d9291906001600160e01b03199290921682526001600160a01b0316602082015260400190565b6040516020818303038152906040529050611f5c83828b8581518110611f3557611f3561542c565b60200260200101518a8681518110611f4f57611f4f61542c565b6020026020010151613b8e565b50600101611eb8565b5050505050505050565b611f77613a33565b611f816000613c0d565b565b611f8b613a33565b63ffffffff82166000908152606a6020526040902054600160201b90046001600160a01b031615801590611fca575060208101516001600160a01b0316155b156120085763ffffffff82166000908152606a6020526040902080546001600160c01b031916815560010180546001600160a01b03191690556120e5565b805163ffffffff161580159061202a575060208101516001600160a01b031615155b6120805760405162461bcd60e51b815260206004820152602160248201527f4e6574776f726b52656769737472793a20696e76616c696420726567697374726044820152607960f81b6064820152608401610a71565b63ffffffff8281166000908152606a6020908152604091829020845181549286015194166001600160c01b031990921691909117600160201b6001600160a01b039485160217815590830151600190910180546001600160a01b031916919092161790555b806000015163ffffffff1681602001516001600160a01b03168363ffffffff167f4db6d44cad7c0eddcb10fcbcb14f9600520da0ea078eedc230cbed5aa0661d20846040015160405161214791906001600160a01b0391909116815260200190565b60405180910390a45050565b6033546001600160a01b031633148061218057506069546001600160a01b03161580159061218057503330145b61219c5760405162461bcd60e51b8152600401610a71906155d6565b606f805460ff1916911515919091179055606e55565b6033546001600160a01b03163314806121df57506069546001600160a01b0316158015906121df57503330145b6121fb5760405162461bcd60e51b8152600401610a71906155d6565b606b54606c5460405163031f799160e61b81526001600160a01b03918216600482015291169063c7de644090602401611251565b60008061226e8585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506127fe92505050565b606b54606c54604051637677856760e11b81529395509193506001600160a01b039081169263ecef0ace926122ad9216908690869089906004016157e8565b600060405180830381600087803b1580156122c757600080fd5b505af11580156122db573d6000803e3d6000fd5b5050505060008282856040516020016122f693929190615836565b60408051601f198184030181528282528051602091820120606c546001600160a01b0316845290830181905263ffffffff87168383015290519092507fc65927f292bd600bd77f04e7e614c2c2997ee8a3123221acf8a033a151cb86179181900360600190a1505050505050565b6033546001600160a01b031633148061239157506069546001600160a01b03161580159061239157503330145b6123ad5760405162461bcd60e51b8152600401610a71906155d6565b606b54606c546040516334392cbd60e21b81526001600160a01b039182166004820152838216602482015291169063d0e4b2f490604401600060405180830381600087803b1580156123fe57600080fd5b505af1158015612412573d6000803e3d6000fd5b5050505050565b60606065805480602002602001604051908101604052809291908181526020016000905b828210156124a757600084815260209081902060408051608081018252918501546001600160a01b038116835263ffffffff600160a01b8204811684860152600160c01b8204811692840192909252600160e01b900416606082015282526001909201910161243d565b50505050905090565b6124b86130f9565b610d6083838361222f565b606854600090600160c01b900463ffffffff161580156124ec57506069546001600160a01b0316155b905090565b6124f9613a33565b8381805182511461251c5760405162461bcd60e51b8152600401610a71906153e7565b6000805b82518110156125585782818151811061253b5761253b61542c565b60200260200101518261254e9190615458565b9150600101612520565b508034146125785760405162461bcd60e51b8152600401610a719061546b565b8651865114801561258a575086518551145b6125a65760405162461bcd60e51b8152600401610a71906153e7565b63b85a2ce160e01b60005b8851811015610d59576000828983815181106125cf576125cf61542c565b60200260200101518984815181106125e9576125e961542c565b6020026020010151604051602001612629939291906001600160e01b03199390931683526001600160a01b03918216602084015216604082015260600190565b604051602081830303815290604052905061265183828c8581518110611f3557611f3561542c565b506001016125b1565b6000805b6065548110156126f2576126de6065828154811061267e5761267e61542c565b60009182526020918290206040805160808101825291909201546001600160a01b038116825263ffffffff600160a01b8204811694830194909452600160c01b8104841692820192909252600160e01b9091049091166060820152613800565b6126e89083615458565b915060010161265e565b5090565b83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808702828101820190935286825290935086925085918291850190849080828437600092019190915250508251845114915061277d90505760405162461bcd60e51b8152600401610a71906153e7565b6000805b82518110156127b95782818151811061279c5761279c61542c565b6020026020010151826127af9190615458565b9150600101612781565b508034146127d95760405162461bcd60e51b8152600401610a719061546b565b6127e16130f9565b6040805163e4a7c60360e01b602082018190529160009101611a16565b606080600080600060658054905086511461282c5760405163c53e5b5b60e01b815260040160405180910390fd5b600086516001600160401b0381111561284757612847614914565b60405190808252806020026020018201604052801561288c57816020015b60408051808201909152600080825260208201528152602001906001900390816128655790505b50905060005b875181101561298f5760008882815181106128af576128af61542c565b6020026020010151905060006128c482610f27565b9050816001600160a01b0316856001600160a01b0316106128fb5760405163ac6bd23360e01b815260048101849052602401610a71565b606081015163ffffffff1615612985576040518060400160405280836001600160a01b0316815260200161292e83613800565b8152508484815181106129435761294361542c565b60200260200101819052508383815181106129605761296061542c565b602002602001015160200151866129779190615458565b955086806001019750508194505b5050600101612892565b50836001600160401b038111156129a8576129a8614914565b6040519080825280602002602001820160405280156129d1578160200160208202803683370190505b509550836001600160401b038111156129ec576129ec614914565b604051908082528060200260200182016040528015612a15578160200160208202803683370190505b50945060008060005b8951811015612b36576000848281518110612a3b57612a3b61542c565b6020026020010151602001511115612b2e57838181518110612a5f57612a5f61542c565b602002602001015160000151898381518110612a7d57612a7d61542c565b60200260200101906001600160a01b031690816001600160a01b03168152505085620f4240858381518110612ab457612ab461542c565b602002602001015160200151612aca91906158bb565b612ad491906158e8565b888381518110612ae657612ae661542c565b602002602001019063ffffffff16908163ffffffff1681525050878281518110612b1257612b1261542c565b602002602001015183612b25919061590a565b92506001909101905b600101612a1e565b50620f42408263ffffffff1614612b8b57612b5a63ffffffff8316620f42406155c3565b87600081518110612b6d57612b6d61542c565b60200260200101818151612b81919061590a565b63ffffffff169052505b505050505050915091565b6033546001600160a01b0316331480612bc357506069546001600160a01b031615801590612bc357503330145b612bdf5760405162461bcd60e51b8152600401610a71906155d6565b606b80546001600160a01b0319166001600160a01b03848116918217909255604051634463315560e11b815291831660048301526000916388c662aa90602401602060405180830381865afa158015612c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c609190615737565b90506001600160a01b038116612cc65760405162461bcd60e51b815260206004820152602560248201527f4e6574776f726b52656769737472793a2021657869737473207c7c20696d6d756044820152647461626c6560d81b6064820152608401610a71565b606b5460405163708728eb60e11b81526001600160a01b038481166004830152600092169063e10e51d690602401602060405180830381865afa158015612d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d359190615737565b90506001600160a01b0381163014801590612d5957506001600160a01b0382163014155b15612d7757604051633170a38d60e01b815260040160405180910390fd5b606c80546001600160a01b0319166001600160a01b0385811691821790925560408051928716835260208301919091527fc8d09d7710e05a8ef2f307dcf13f859ce7e661b3eee1a04a57c4d481758a6c1d910160405180910390a1306001600160a01b0382160361127f5761127f6121b2565b612df26124c3565b15612e9457606d546001600160a01b031615801590612e785750606d5460405163f3ae241560e01b81523060048201526001600160a01b039091169063f3ae241590602401602060405180830381865afa158015612e54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7891906154b3565b612e945760405162461bcd60e51b8152600401610a71906154d0565b612e9e8282613c5f565b612ea66124c3565b8015612eb45750606f5460ff165b1561159657604080516001808252818301909252600091602080830190803683370190505090508281600081518110612eef57612eef61542c565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050606e5481600081518110612f4257612f4261542c565b6020908102919091010152606d5460405163262949f360e21b81526001600160a01b03909116906398a527cc90612f7f9085908590600401615519565b600060405180830381600087803b158015612f9957600080fd5b505af1158015611f65573d6000803e3d6000fd5b6033546001600160a01b0316331480612fda57506069546001600160a01b031615801590612fda57503330145b612ff65760405162461bcd60e51b8152600401610a71906155d6565b60005b8251811015610d605761303e8382815181106130175761301761542c565b60200260200101518383815181106130315761303161542c565b6020026020010151612dea565b600101612ff9565b6033546001600160a01b031633148061307357506069546001600160a01b03161580159061307357503330145b61308f5760405162461bcd60e51b8152600401610a71906155d6565b60005b835181101561127f576130f18482815181106130b0576130b061542c565b60200260200101518483815181106130ca576130ca61542c565b60200260200101518484815181106130e4576130e461542c565b6020026020010151610ba3565b600101613092565b611f81613cb2565b60008061310d83610f27565b905061311881613800565b9392505050565b613127613a33565b6001600160a01b03811661318c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a71565b61319581613c0d565b50565b6131a0613a33565b60688054640100000000600160e01b031916600160201b6001600160a01b0386811691820263ffffffff60c01b191692909217600160c01b63ffffffff871690810291909117909355606980546001600160a01b0319169285169283179055604080519182526020820193909352918201527f21ae9d1c05d009b6af15c73821748e22e498496e2b29672090c67ae892322d6f9060600160405180910390a1505050565b6068546060908490849063ffffffff808316600160c01b9092041614801561327957506069546001600160a01b038381169116145b801561329f5750606854600160201b90046001600160a01b0316336001600160a01b0316145b6133115760405162461bcd60e51b815260206004820152603760248201527f4e6574776f726b52656769737472793a202175706461746572446f6d61696e2060448201527f7c7c202175706461746572207c7c2021436f6e6e6578740000000000000000006064820152608401610a71565b600084806020019051810190613327919061594b565b90506060637c6ce76b60e11b6001600160e01b03198316016133d55760008060008880602001905181019061335c9190615966565b6040516001600160a01b038416602482015263ffffffff8084166044830152821660648201529296509094509250630393189560e11b91506084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152935061372e92505050565b6337e738f160e01b6001600160e01b031983160161346a576000808780602001905181019061340491906159c2565b6040516001600160a01b038316602482015263ffffffff8216604482015291945092508591506064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152925061372e915050565b631b97980360e01b6001600160e01b03198316016134b85760008060008880602001905181019061349b9190615ac9565b935093509350508483838360405160240161339893929190614b88565b6330d6cc3f60e01b6001600160e01b031983160161350057600080878060200190518101906134e79190615b55565b925092505083828260405160240161342e929190615016565b631b5839fd60e01b6001600160e01b031983160161354a57506040805160048152602481019091526020810180516001600160e01b03166001600160e01b0319841617905261372e565b63723ea86f60e01b6001600160e01b031983160161359257600080878060200190518101906135799190615bbe565b925092505083828260405160240161342e929190615c14565b632fea4ffd60e11b6001600160e01b03198316016135c157600080878060200190518101906135799190615bbe565b6347a5d31f60e01b6001600160e01b031983160161361a57600080878060200190518101906135f09190615c3c565b6040516001600160a01b03808416602483015282166044820152919450925085915060640161342e565b6362847abb60e01b6001600160e01b031983160161369e576000868060200190518101906136489190615c7b565b6040516001600160a01b038216602482015290925084915060440160408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152915061372e9050565b631fc7f1d160e21b6001600160e01b03198316016136e857506040805160048152602481019091526020810180516001600160e01b03166001600160e01b0319841617905261372e565b63c8e4ad1d60e01b6001600160e01b031983160161372e57506040805160048152602481019091526020810180516001600160e01b03166001600160e01b031984161790525b600080306001600160a01b0316836040516137499190615ca7565b6000604051808303816000865af19150503d8060008114613786576040519150601f19603f3d011682016040523d82523d6000602084013e61378b565b606091505b5091509150836001600160e01b0319168963ffffffff168e7f1291b044e5e68ff17a19703d0775336ad7ec700ef5679fbd11bd0084af55baf3858e6040516137e892919091151582526001600160a01b0316602082015260400190565b60405180910390a49c9b505050505050505050505050565b600061382161381e613819846020015163ffffffff1690565b613e4e565b90565b92915050565b61382f613a33565b8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080870282810182019093528682529093508692508591829185019084908082843760009201919091525050825184511491506138b690505760405162461bcd60e51b8152600401610a71906153e7565b6000805b82518110156138f2578281815181106138d5576138d561542c565b6020026020010151826138e89190615458565b91506001016138ba565b508034146139125760405162461bcd60e51b8152600401610a719061546b565b61397f8b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d918291850190849080828437600092019190915250612fad92505050565b60405163cf2933c160e01b906000906139a49083908f908f908f908f90602001615cc3565b6040516020818303038152906040529050613a2482828b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d918291850190849080828437600092019190915250613a8d92505050565b50505050505050505050505050565b6033546001600160a01b03163314611f815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a71565b60005b825181101561241257613aca8585858481518110613ab057613ab061542c565b6020026020010151858581518110611f4f57611f4f61542c565b600101613a90565b6033546001600160a01b0316331480613aff57506069546001600160a01b031615801590613aff57503330145b613b1b5760405162461bcd60e51b8152600401610a71906155d6565b610d60838383613ea4565b600054610100900460ff16613b4d5760405162461bcd60e51b8152600401610a7190615d05565b613b556140c3565b613b6286868686866140f2565b6001600160a01b038116613b7d57613b78611f6f565b613b86565b613b868161311f565b505050505050565b6000613b9b838584614196565b63ffffffff84166000818152606a6020908152604091829020549151600160201b9092046001600160a01b031682529293506001600160e01b031988169284917f20ffb62aa5e31e4b559317e8af8f877e19a9126fd6ff1fee93bcf06e59d385cc910160405180910390a45050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6033546001600160a01b0316331480613c8c57506069546001600160a01b031615801590613c8c57503330145b613ca85760405162461bcd60e51b8152600401610a71906155d6565b61159682826142f3565b4260005b606554811015613df257600060658281548110613cd557613cd561542c565b600091825260208220018054909250600160e01b900463ffffffff1615613d68578154600090600160a01b900463ffffffff16613d20578254600160c01b900463ffffffff16613d2a565b60685463ffffffff165b90506000613d388287615d50565b845463ffffffff9182169250606491613d5991600160e01b900416836158bb565b613d6391906158e8565b925050505b815481908390601490613d89908490600160a01b900463ffffffff1661590a565b82546101009290920a63ffffffff818102199093169183160217909155835460405191841682526001600160a01b031691507f780f517310a8481b4817e26f9d1a336e49e7522775e8e6b4fb22c73908be6ce69060200160405180910390a25050600101613cb6565b6040805163ffffffff84168152602081018390527f896e364af402e453909cff1f8bb117d283d37a717e7cf4a5c5b88be2197fa09f910160405180910390a1506068805463ffffffff191663ffffffff92909216919091179055565b6000817812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21811115613e8e5760405163edc236ad60e01b815260048101849052602401610a71565b61311861381e670de0b6b3a76400008302614417565b6001600160a01b038316613ed657604051633899e57b60e01b81526001600160a01b0384166004820152602401610a71565b6001600160a01b03831660009081526067602052604090205415613f1857604051636822fa9960e11b81526001600160a01b0384166004820152602401610a71565b60648263ffffffff161115613f575760405163424f515b60e11b81526001600160a01b038416600482015263ffffffff83166024820152604401610a71565b428163ffffffff161115613f955760405163faac476360e01b81526001600160a01b038416600482015263ffffffff82166024820152604401610a71565b604080516080810182526001600160a01b038086168083526000602080850182815263ffffffff8881168789019081528a821660608901908152606580546001818101835591885299517f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c7909a0180549551935192518516600160e01b026001600160e01b03938616600160c01b02939093166001600160c01b0394909516600160a01b026001600160c01b03199096169a9099169990991793909317161717909355606680549094019384905581815260679092528382209290925591517f13ca1f9a974ca1b85618843282dc1981c63a62c389aa5cf6e4a31937f8434e73906140b5908590879063ffffffff92831681529116602082015260400190565b60405180910390a250505050565b600054610100900460ff166140ea5760405162461bcd60e51b8152600401610a7190615d05565b611f8161458e565b600054610100900460ff166141195760405162461bcd60e51b8152600401610a7190615d05565b6068805463ffffffff909516600160c01b0263ffffffff60c01b196001600160a01b03978816600160201b0216640100000000600160e01b03199096169590951794909417909355606980549285166001600160a01b0319938416179055606b8054918516918316919091179055606c8054929093169116179055565b63ffffffff8084166000908152606a60205260408120549091859116158015906141e4575063ffffffff81166000908152606a6020526040902054600160201b90046001600160a01b031615155b61423c5760405162461bcd60e51b815260206004820152602360248201527f4e6574776f726b52656769737472793a2021737570706f72746564206e6574776044820152626f726b60e81b6064820152608401610a71565b60685463ffffffff8087166000908152606a6020526040808220805460019091015491516345560b5d60e11b81526001600160a01b03600160201b96879004811696638aac16ba968b966142a796918616959290920483169391921690829081908e90600401615d6d565b60206040518083038185885af11580156142c5573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906142ea9190615dc8565b95945050505050565b6001600160a01b038216600090815260676020526040812054908190036143385760405163c6040d1d60e01b81526001600160a01b0384166004820152602401610a71565b60648263ffffffff1611156143775760405163424f515b60e11b81526001600160a01b038416600482015263ffffffff83166024820152604401610a71565b6001600160a01b03831660009081526067602052604081205460659061439f906001906155c3565b815481106143af576143af61542c565b60009182526020918290200180546001600160e01b0316600160e01b63ffffffff87169081029190911782556040519081529092506001600160a01b038616917f597a24f4063494925c9b40150fd455db446fcc9046ddb9a1ded3ee8fad6b988491016140b5565b60008160000361442957506000919050565b50600181600160801b81106144435760409190911b9060801c5b68010000000000000000811061445e5760209190911b9060401c5b600160201b81106144745760109190911b9060201c5b6201000081106144895760089190911b9060101c5b610100811061449d5760049190911b9060081c5b601081106144b05760029190911b9060041c5b600481106144c057600182901b91505b60018284816144d1576144d16158d2565b048301901c915060018284816144e9576144e96158d2565b048301901c91506001828481614501576145016158d2565b048301901c91506001828481614519576145196158d2565b048301901c91506001828481614531576145316158d2565b048301901c91506001828481614549576145496158d2565b048301901c91506001828481614561576145616158d2565b048301901c91506000828481614579576145796158d2565b049050808310614587578092505b5050919050565b600054610100900460ff166145b55760405162461bcd60e51b8152600401610a7190615d05565b611f8133613c0d565b6001600160a01b038116811461319557600080fd5b63ffffffff8116811461319557600080fd5b60008083601f8401126145f757600080fd5b5081356001600160401b0381111561460e57600080fd5b6020830191508360208260051b850101111561462957600080fd5b9250929050565b6000806000806000806080878903121561464957600080fd5b8635614654816145be565b95506020870135614664816145d3565b945060408701356001600160401b038082111561468057600080fd5b61468c8a838b016145e5565b909650945060608901359150808211156146a557600080fd5b506146b289828a016145e5565b979a9699509497509295939492505050565b6000806000606084860312156146d957600080fd5b83356146e4816145be565b925060208401356146f4816145d3565b91506040840135614704816145d3565b809150509250925092565b6000806000806040858703121561472557600080fd5b84356001600160401b038082111561473c57600080fd5b614748888389016145e5565b9096509450602087013591508082111561476157600080fd5b5061476e878288016145e5565b95989497509550505050565b60006020828403121561478c57600080fd5b8135613118816145be565b80516001600160a01b0316825260208082015163ffffffff9081169184019190915260408083015182169084015260609182015116910152565b608081016138218284614797565b600080600080600080600060a0888a0312156147fa57600080fd5b8735614805816145be565b96506020880135614815816145d3565b95506040880135614825816145d3565b945060608801356001600160401b038082111561484157600080fd5b61484d8b838c016145e5565b909650945060808a013591508082111561486657600080fd5b506148738a828b016145e5565b989b979a50959850939692959293505050565b60008060008060008060006080888a0312156148a157600080fd5b87356001600160401b03808211156148b857600080fd5b6148c48b838c016145e5565b909950975060208a013591506148d9826145d3565b909550604089013590808211156148ef57600080fd5b6148fb8b838c016145e5565b909650945060608a013591508082111561486657600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561495257614952614914565b604052919050565b600082601f83011261496b57600080fd5b81356001600160401b0381111561498457614984614914565b614997601f8201601f191660200161492a565b8181528460208386010111156149ac57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156149db57600080fd5b81356001600160401b038111156149f157600080fd5b6149fd8482850161495a565b949350505050565b60008060008060008060008060008060a08b8d031215614a2457600080fd5b8a356001600160401b0380821115614a3b57600080fd5b614a478e838f016145e5565b909c509a5060208d0135915080821115614a6057600080fd5b614a6c8e838f016145e5565b909a50985060408d0135915080821115614a8557600080fd5b614a918e838f016145e5565b909850965060608d0135915080821115614aaa57600080fd5b614ab68e838f016145e5565b909650945060808d0135915080821115614acf57600080fd5b50614adc8d828e016145e5565b915080935050809150509295989b9194979a5092959850565b600060208284031215614b0757600080fd5b5035919050565b600081518084526020808501945080840160005b83811015614b475781516001600160a01b031687529582019590820190600101614b22565b509495945050505050565b600081518084526020808501945080840160005b83811015614b4757815163ffffffff1687529582019590820190600101614b66565b606081526000614b9b6060830186614b0e565b8281036020840152614bad8186614b52565b90508281036040840152614bc18185614b52565b9695505050505050565b60006001600160401b03821115614be457614be4614914565b5060051b60200190565b600082601f830112614bff57600080fd5b81356020614c14614c0f83614bcb565b61492a565b82815260059290921b84018101918181019086841115614c3357600080fd5b8286015b84811015614c57578035614c4a816145d3565b8352918301918301614c37565b509695505050505050565b600082601f830112614c7357600080fd5b81356020614c83614c0f83614bcb565b82815260059290921b84018101918181019086841115614ca257600080fd5b8286015b84811015614c57578035614cb9816145be565b8352918301918301614ca6565b600082601f830112614cd757600080fd5b81356020614ce7614c0f83614bcb565b82815260059290921b84018101918181019086841115614d0657600080fd5b8286015b84811015614c575780358352918301918301614d0a565b600080600060608486031215614d3657600080fd5b83356001600160401b0380821115614d4d57600080fd5b614d5987838801614bee565b94506020860135915080821115614d6f57600080fd5b614d7b87838801614c62565b93506040860135915080821115614d9157600080fd5b50614d9e86828701614cc6565b9150509250925092565b6000808284036080811215614dbc57600080fd5b8335614dc7816145d3565b92506060601f1982011215614ddb57600080fd5b50604051606081018181106001600160401b0382111715614dfe57614dfe614914565b6040526020840135614e0f816145d3565b81526040840135614e1f816145be565b60208201526060840135614e32816145be565b6040820152919491935090915050565b801515811461319557600080fd5b60008060408385031215614e6357600080fd5b823591506020830135614e7581614e42565b809150509250929050565b600080600060408486031215614e9557600080fd5b83356001600160401b03811115614eab57600080fd5b614eb7868287016145e5565b9094509250506020840135614704816145d3565b600060208284031215614edd57600080fd5b8135613118816145d3565b6020808252825182820181905260009190848201906040850190845b81811015614f2a57614f17838551614797565b9284019260809290920191600101614f04565b50909695505050505050565b60008060008060808587031215614f4c57600080fd5b84356001600160401b0380821115614f6357600080fd5b614f6f88838901614bee565b95506020870135915080821115614f8557600080fd5b614f9188838901614c62565b94506040870135915080821115614fa757600080fd5b614fb388838901614c62565b93506060870135915080821115614fc957600080fd5b50614fd687828801614cc6565b91505092959194509250565b600060208284031215614ff457600080fd5b81356001600160401b0381111561500a57600080fd5b6149fd84828501614c62565b6040815260006150296040830185614b0e565b82810360208401526142ea8185614b52565b6000806040838503121561504e57600080fd5b8235615059816145be565b91506020830135614e75816145be565b6000806040838503121561507c57600080fd5b8235615087816145be565b91506020830135614e75816145d3565b600080604083850312156150aa57600080fd5b82356001600160401b03808211156150c157600080fd5b6150cd86838701614c62565b935060208501359150808211156150e357600080fd5b506150f085828601614bee565b9150509250929050565b60008060006060848603121561510f57600080fd5b83356001600160401b038082111561512657600080fd5b61513287838801614c62565b9450602086013591508082111561514857600080fd5b61515487838801614bee565b9350604086013591508082111561516a57600080fd5b50614d9e86828701614bee565b60008060006060848603121561518c57600080fd5b8335615197816145be565b925060208401356151a7816145d3565b91506040840135614704816145be565b60008060008060008060c087890312156151d057600080fd5b863595506020870135945060408701356151e9816145be565b935060608701356151f9816145be565b92506080870135615209816145d3565b915060a08701356001600160401b0381111561522457600080fd5b61523089828a0161495a565b9150509295509295509295565b60005b83811015615258578181015183820152602001615240565b50506000910152565b6000815180845261527981602086016020860161523d565b601f01601f19169290920160200192915050565b6020815260006131186020830184615261565b6000608082840312156152b257600080fd5b604051608081018181106001600160401b03821117156152d4576152d4614914565b60405282356152e2816145be565b815260208301356152f2816145d3565b60208201526040830135615305816145d3565b60408201526060830135615318816145d3565b60608201529392505050565b6000806000806000806000806080898b03121561534057600080fd5b88356001600160401b038082111561535757600080fd5b6153638c838d016145e5565b909a50985060208b013591508082111561537c57600080fd5b6153888c838d016145e5565b909850965060408b01359150808211156153a157600080fd5b6153ad8c838d016145e5565b909650945060608b01359150808211156153c657600080fd5b506153d38b828c016145e5565b999c989b5096995094979396929594505050565b60208082526025908201527f4e6574776f726b52656769737472793a20706172616d732073697a65206d69736040820152640dac2e8c6d60db1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561382157613821615442565b60208082526028908201527f4e6574776f726b52656769737472793a206d73672e76616c7565203c2072656c604082015267617965724665657360c01b606082015260800190565b6000602082840312156154c557600080fd5b815161311881614e42565b60208082526029908201527f4e6574776f726b52656769737472795368616d616e3a2021696e6974207c7c20604082015268109036b0b730b3b2b960b91b606082015260800190565b60408152600061552c6040830185614b0e565b82810360208481019190915284518083528582019282019060005b8181101561556357845183529383019391830191600101615547565b5090979650505050505050565b63ffffffff60e01b851681526080602082015260006155926080830186614b0e565b82810360408401526155a48186614b52565b905082810360608401526155b88185614b52565b979650505050505050565b8181038181111561382157613821615442565b60208082526023908201527f4e6574776f726b52656769737472793a20216f776e6572207c7c2021757064616040820152623a32b960e91b606082015260800190565b8183526000602080850194508260005b85811015614b4757813561563c816145be565b6001600160a01b031687529582019590820190600101615629565b63ffffffff60e01b8516815260606020820152600061567a606083018587615619565b905063ffffffff8316604083015295945050505050565b600080600080600080600080610100898b0312156156ae57600080fd5b88516156b9816145be565b60208a01519098506156ca816145d3565b60408a01519097506156db816145be565b60608a01519096506156ec816145be565b60808a01519095506156fd816145be565b60a08a015190945061570e816145be565b60c08a015160e08b0151919450925061572681614e42565b809150509295985092959890939650565b60006020828403121561574957600080fd5b8151613118816145be565b8183526000602080850194508260005b85811015614b47578135615777816145d3565b63ffffffff1687529582019590820190600101615764565b63ffffffff60e01b881681526080602082015260006157b260808301888a615619565b82810360408401526157c5818789615754565b905082810360608401526157da818587615754565b9a9950505050505050505050565b6001600160a01b038516815260806020820181905260009061580c90830186614b0e565b828103604084015261581e8186614b52565b91505063ffffffff8316606083015295945050505050565b835160009082906020808801845b838110156158695781516001600160a01b031685529382019390820190600101615844565b5050865181880193925060005b8181101561589857845163ffffffff1684529382019392820192600101615876565b50505060e09490941b6001600160e01b0319168452505060049091019392505050565b808202811582820484141761382157613821615442565b634e487b7160e01b600052601260045260246000fd5b60008261590557634e487b7160e01b600052601260045260246000fd5b500490565b63ffffffff81811683821601908082111561592757615927615442565b5092915050565b80516001600160e01b03198116811461594657600080fd5b919050565b60006020828403121561595d57600080fd5b6131188261592e565b6000806000806080858703121561597c57600080fd5b6159858561592e565b93506020850151615995816145be565b60408601519093506159a6816145d3565b60608601519092506159b7816145d3565b939692955090935050565b6000806000606084860312156159d757600080fd5b6159e08461592e565b925060208401516159f0816145be565b6040850151909250614704816145d3565b600082601f830112615a1257600080fd5b81516020615a22614c0f83614bcb565b82815260059290921b84018101918181019086841115615a4157600080fd5b8286015b84811015614c57578051615a58816145be565b8352918301918301615a45565b600082601f830112615a7657600080fd5b81516020615a86614c0f83614bcb565b82815260059290921b84018101918181019086841115615aa557600080fd5b8286015b84811015614c57578051615abc816145d3565b8352918301918301615aa9565b60008060008060808587031215615adf57600080fd5b615ae88561592e565b935060208501516001600160401b0380821115615b0457600080fd5b615b1088838901615a01565b94506040870151915080821115615b2657600080fd5b615b3288838901615a65565b93506060870151915080821115615b4857600080fd5b50614fd687828801615a65565b600080600060608486031215615b6a57600080fd5b615b738461592e565b925060208401516001600160401b0380821115615b8f57600080fd5b615b9b87838801615a01565b93506040860151915080821115615bb157600080fd5b50614d9e86828701615a65565b600080600060608486031215615bd357600080fd5b615bdc8461592e565b925060208401516001600160401b03811115615bf757600080fd5b615c0386828701615a01565b9250506040840151614704816145d3565b604081526000615c276040830185614b0e565b905063ffffffff831660208301529392505050565b600080600060608486031215615c5157600080fd5b615c5a8461592e565b92506020840151615c6a816145be565b6040850151909250614704816145be565b60008060408385031215615c8e57600080fd5b615c978361592e565b91506020830151614e75816145be565b60008251615cb981846020870161523d565b9190910192915050565b63ffffffff60e01b86168152606060208201526000615ce6606083018688615619565b8281036040840152615cf9818587615754565b98975050505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b63ffffffff82811682821603908082111561592757615927615442565b63ffffffff881681526001600160a01b0387811660208301528681166040830152851660608201526080810184905260a0810183905260e060c08201819052600090615dbb90830184615261565b9998505050505050505050565b600060208284031215615dda57600080fd5b505191905056fea164736f6c6343000813000a",
  "deployedBytecode": "0x60806040526004361061031a5760003560e01c80638dc15791116101ab578063c818c70f116100f7578063e9172c2d11610095578063f76541761161006f578063f765417614610962578063fd614f4114610982578063ffcf9bae146109af578063fff9834d146109cf57600080fd5b8063e9172c2d14610902578063f2fde38b14610922578063f6ce03541461094257600080fd5b8063df034cd0116100d1578063df034cd01461088d578063e46867fd146108ad578063e4a7c603146108cd578063e5a2a2a5146108e257600080fd5b8063c818c70f14610826578063cf2933c114610846578063de4b05481461086657600080fd5b8063a084b6c011610164578063b044631c1161013e578063b044631c146107a1578063b0affdf7146107b4578063b85a2ce1146107e2578063bf59b4881461080257600080fd5b8063a084b6c014610764578063a8e6f1e714610779578063ab6efc301461078c57600080fd5b80638dc15791146106345780638ddc5f35146106545780638ee31392146106d05780639d7b8545146107025780639eab525314610722578063a02b60061461074457600080fd5b80635523a9601161026a578063715018a61161022357806376e92559116101fd57806376e92559146105cc5780637f6d2708146105e157806380e038bc146106015780638da5cb5b1461061657600080fd5b8063715018a61461058157806375491512146105965780637698a833146105ac57600080fd5b80635523a960146104bb57806356c0e992146104ce5780635daf08ca146104e157806364c6d00a1461053757806367942be01461054a5780636bda59da1461056e57600080fd5b8063325d1e9c116102d75780633a8246f3116102b15780633a8246f31461045e5780633f26479e14610471578063439fab9114610488578063535949a6146104a857600080fd5b8063325d1e9c146103fb57806334e2fc651461040e578063371b52e31461044957600080fd5b80630202f82a1461031f5780630726312a146103345780630bddc56b146103545780630e769b2b146103835780631049d736146103bb5780632ada2596146103ce575b600080fd5b61033261032d366004614630565b6109e2565b005b34801561034057600080fd5b5061033261034f3660046146c4565b610ba3565b34801561036057600080fd5b50606f5461036e9060ff1681565b60405190151581526020015b60405180910390f35b34801561038f57600080fd5b50606b546103a3906001600160a01b031681565b6040516001600160a01b03909116815260200161037a565b6103326103c936600461470f565b610d65565b3480156103da57600080fd5b506103ee6103e936600461477a565b610f27565b60405161037a91906147d1565b6103326104093660046147df565b611023565b34801561041a57600080fd5b5061043b61042936600461477a565b60676020526000908152604090205481565b60405190815260200161037a565b34801561045557600080fd5b506103326111d8565b61033261046c366004614886565b611285565b34801561047d57600080fd5b5061043b620f424081565b34801561049457600080fd5b506103326104a33660046149c9565b611396565b6103326104b6366004614a05565b61159a565b6103326104c9366004614886565b611801565b6103326104dc36600461470f565b611912565b3480156104ed57600080fd5b506105016104fc366004614af5565b611a96565b604080516001600160a01b03909516855263ffffffff93841660208601529183169184019190915216606082015260800161037a565b61033261054536600461470f565b611ae3565b34801561055657600080fd5b5061055f611beb565b60405161037a93929190614b88565b61033261057c366004614d21565b611e05565b34801561058d57600080fd5b50610332611f6f565b3480156105a257600080fd5b5061043b606e5481565b3480156105b857600080fd5b506103326105c7366004614da8565b611f83565b3480156105d857600080fd5b5060655461043b565b3480156105ed57600080fd5b506103326105fc366004614e50565b612153565b34801561060d57600080fd5b506103326121b2565b34801561062257600080fd5b506033546001600160a01b03166103a3565b34801561064057600080fd5b5061033261064f366004614e80565b61222f565b34801561066057600080fd5b506106a461066f366004614ecb565b606a602052600090815260409020805460019091015463ffffffff8216916001600160a01b03600160201b9091048116911683565b6040805163ffffffff90941684526001600160a01b03928316602085015291169082015260600161037a565b3480156106dc57600080fd5b506068546106ed9063ffffffff1681565b60405163ffffffff909116815260200161037a565b34801561070e57600080fd5b5061033261071d36600461477a565b612364565b34801561072e57600080fd5b50610737612419565b60405161037a9190614ee8565b34801561075057600080fd5b5061033261075f366004614e80565b6124b0565b34801561077057600080fd5b5061036e6124c3565b610332610787366004614f36565b6124f1565b34801561079857600080fd5b5061043b61265a565b6103326107af36600461470f565b6126f6565b3480156107c057600080fd5b506107d46107cf366004614fe2565b6127fe565b60405161037a929190615016565b3480156107ee57600080fd5b506103326107fd36600461503b565b612b96565b34801561080e57600080fd5b506068546106ed90600160c01b900463ffffffff1681565b34801561083257600080fd5b50610332610841366004615069565b612dea565b34801561085257600080fd5b50610332610861366004615097565b612fad565b34801561087257600080fd5b506068546103a390600160201b90046001600160a01b031681565b34801561089957600080fd5b506069546103a3906001600160a01b031681565b3480156108b957600080fd5b506103326108c83660046150fa565b613046565b3480156108d957600080fd5b506103326130f9565b3480156108ee57600080fd5b50606d546103a3906001600160a01b031681565b34801561090e57600080fd5b5061043b61091d36600461477a565b613101565b34801561092e57600080fd5b5061033261093d36600461477a565b61311f565b34801561094e57600080fd5b5061033261095d366004615177565b613198565b34801561096e57600080fd5b50606c546103a3906001600160a01b031681565b34801561098e57600080fd5b506109a261099d3660046151b7565b613244565b60405161037a919061528d565b3480156109bb57600080fd5b5061043b6109ca3660046152a0565b613800565b6103326109dd366004615324565b613827565b6109ea613a33565b838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208087028281018201909352868252909350869250859182918501908490808284376000920191909152505082518451149150610a7a90505760405162461bcd60e51b8152600401610a71906153e7565b60405180910390fd5b6000805b8251811015610ab657828181518110610a9957610a9961542c565b602002602001015182610aac9190615458565b9150600101610a7e565b50803414610ad65760405162461bcd60e51b8152600401610a719061546b565b610ae08989612dea565b6040805163c818c70f60e01b602082018190526001600160a01b038c169282019290925263ffffffff8a1660608201526000906080016040516020818303038152906040529050610b9682828b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d918291850190849080828437600092019190915250613a8d92505050565b5050505050505050505050565b610bab6124c3565b15610c4d57606d546001600160a01b031615801590610c315750606d5460405163f3ae241560e01b81523060048201526001600160a01b039091169063f3ae241590602401602060405180830381865afa158015610c0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3191906154b3565b610c4d5760405162461bcd60e51b8152600401610a71906154d0565b610c58838383613ad2565b610c606124c3565b15610d6057604080516001808252818301909252600091602080830190803683370190505090508381600081518110610c9b57610c9b61542c565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050606e5481600081518110610cee57610cee61542c565b6020908102919091010152606d54604051632c78fd0360e21b81526001600160a01b039091169063b1e3f40c90610d2b9085908590600401615519565b600060405180830381600087803b158015610d4557600080fd5b505af1158015610d59573d6000803e3d6000fd5b5050505050505b505050565b610d6d613a33565b838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208087028281018201909352868252909350869250859182918501908490808284376000920191909152505082518451149150610df490505760405162461bcd60e51b8152600401610a71906153e7565b6000805b8251811015610e3057828181518110610e1357610e1361542c565b602002602001015182610e269190615458565b9150600101610df8565b50803414610e505760405162461bcd60e51b8152600401610a719061546b565b6000806000610e5d611beb565b604051929550909350915063e46867fd60e01b90600090610e88908390879087908790602001615570565b6040516020818303038152906040529050610f1982828e8e80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508d8d80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250613a8d92505050565b505050505050505050505050565b6040805160808101825260008082526020808301829052828401829052606083018290526001600160a01b03851682526067905291822054909103610f8a5760405163c6040d1d60e01b81526001600160a01b0383166004820152602401610a71565b6001600160a01b038216600090815260676020526040902054606590610fb2906001906155c3565b81548110610fc257610fc261542c565b60009182526020918290206040805160808101825291909201546001600160a01b038116825263ffffffff600160a01b8204811694830194909452600160c01b8104841692820192909252600160e01b909104909116606082015292915050565b61102b613a33565b8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080870282810182019093528682529093508692508591829185019084908082843760009201919091525050825184511491506110b290505760405162461bcd60e51b8152600401610a71906153e7565b6000805b82518110156110ee578281815181106110d1576110d161542c565b6020026020010151826110e49190615458565b91506001016110b6565b5080341461110e5760405162461bcd60e51b8152600401610a719061546b565b6111198a8a8a610ba3565b60408051630393189560e11b602082018190526001600160a01b038d169282019290925263ffffffff808c1660608301528a16608082015260009060a0015b6040516020818303038152906040529050610f1982828b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d918291850190849080828437600092019190915250613a8d92505050565b6033546001600160a01b031633148061120557506069546001600160a01b03161580159061120557503330145b6112215760405162461bcd60e51b8152600401610a71906155d6565b606b54606c54604051630933e36d60e11b81526001600160a01b039182166004820152911690631267c6da906024015b600060405180830381600087803b15801561126b57600080fd5b505af115801561127f573d6000803e3d6000fd5b50505050565b83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808702828101820190935286825290935086925085918291850190849080828437600092019190915250508251845114915061130c90505760405162461bcd60e51b8152600401610a71906153e7565b6000805b82518110156113485782818151811061132b5761132b61542c565b60200260200101518261133e9190615458565b9150600101611310565b508034146113685760405162461bcd60e51b8152600401610a719061546b565b6113738a8a8a6124b0565b604051635015b00360e11b906000906111589083908e908e908e90602001615657565b600054610100900460ff16158080156113b65750600054600160ff909116105b806113d05750303b1580156113d0575060005460ff166001145b6114335760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a71565b6000805460ff191660011790558015611456576000805461ff0019166101001790555b600080600080600080600080898060200190518101906114769190615691565b9750975097509750975097509750975082606d60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506115318888888888606d60009054906101000a90046001600160a01b03166001600160a01b0316635aef7de66040518163ffffffff1660e01b8152600401602060405180830381865afa158015611508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152c9190615737565b613b26565b606e91909155606f805460ff191691151591909117905550508415935061159692505050576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6115a2613a33565b83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808702828101820190935286825290935086925085918291850190849080828437600092019190915250508251845114915061162990505760405162461bcd60e51b8152600401610a71906153e7565b6000805b8251811015611665578281815181106116485761164861542c565b60200260200101518261165b9190615458565b915060010161162d565b508034146116855760405162461bcd60e51b8152600401610a719061546b565b6117458d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508c8c80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061304692505050565b600063e46867fd60e01b90506000818f8f8f8f8f8f604051602001611770979695949392919061578f565b60405160208183030381529060405290506117f082828b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d918291850190849080828437600092019190915250613a8d92505050565b505050505050505050505050505050565b83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808702828101820190935286825290935086925085918291850190849080828437600092019190915250508251845114915061188890505760405162461bcd60e51b8152600401610a71906153e7565b6000805b82518110156118c4578281815181106118a7576118a761542c565b6020026020010151826118ba9190615458565b915060010161188c565b508034146118e45760405162461bcd60e51b8152600401610a719061546b565b6118ef8a8a8a61222f565b604051638dc1579160e01b906000906111589083908e908e908e90602001615657565b61191a613a33565b8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080870282810182019093528682529093508692508591829185019084908082843760009201919091525050825184511491506119a190505760405162461bcd60e51b8152600401610a71906153e7565b6000805b82518110156119dd578281815181106119c0576119c061542c565b6020026020010151826119d39190615458565b91506001016119a5565b508034146119fd5760405162461bcd60e51b8152600401610a719061546b565b604080516320380e2f60e21b6020820181905291600091015b6040516020818303038152906040529050610d5982828b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d918291850190849080828437600092019190915250613a8d92505050565b60658181548110611aa657600080fd5b6000918252602090912001546001600160a01b038116915063ffffffff600160a01b8204811691600160c01b8104821691600160e01b9091041684565b611aeb613a33565b838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208087028281018201909352868252909350869250859182918501908490808284376000920191909152505082518451149150611b7290505760405162461bcd60e51b8152600401610a71906153e7565b6000805b8251811015611bae57828181518110611b9157611b9161542c565b602002602001015182611ba49190615458565b9150600101611b76565b50803414611bce5760405162461bcd60e51b8152600401610a719061546b565b6040805163371b52e360e01b602082018190529160009101611a16565b606080606060006065805490506001600160401b03811115611c0f57611c0f614914565b604051908082528060200260200182016040528015611c38578160200160208202803683370190505b506065549091506000906001600160401b03811115611c5957611c59614914565b604051908082528060200260200182016040528015611c82578160200160208202803683370190505b506065549091506000906001600160401b03811115611ca357611ca3614914565b604051908082528060200260200182016040528015611ccc578160200160208202803683370190505b50905060005b606554811015611df85760658181548110611cef57611cef61542c565b60009182526020909120015484516001600160a01b0390911690859083908110611d1b57611d1b61542c565b60200260200101906001600160a01b031690816001600160a01b03168152505060658181548110611d4e57611d4e61542c565b90600052602060002001600001601c9054906101000a900463ffffffff16838281518110611d7e57611d7e61542c565b602002602001019063ffffffff16908163ffffffff168152505060658181548110611dab57611dab61542c565b9060005260206000200160000160189054906101000a900463ffffffff16828281518110611ddb57611ddb61542c565b63ffffffff90921660209283029190910190910152600101611cd2565b5091959094509092509050565b611e0d613a33565b82818051825114611e305760405162461bcd60e51b8152600401610a71906153e7565b6000805b8251811015611e6c57828181518110611e4f57611e4f61542c565b602002602001015182611e629190615458565b9150600101611e34565b50803414611e8c5760405162461bcd60e51b8152600401610a719061546b565b8551855114611ead5760405162461bcd60e51b8152600401610a71906153e7565b639d7b854560e01b60005b8751811015611f6557600082888381518110611ed657611ed661542c565b6020026020010151604051602001611f0d9291906001600160e01b03199290921682526001600160a01b0316602082015260400190565b6040516020818303038152906040529050611f5c83828b8581518110611f3557611f3561542c565b60200260200101518a8681518110611f4f57611f4f61542c565b6020026020010151613b8e565b50600101611eb8565b5050505050505050565b611f77613a33565b611f816000613c0d565b565b611f8b613a33565b63ffffffff82166000908152606a6020526040902054600160201b90046001600160a01b031615801590611fca575060208101516001600160a01b0316155b156120085763ffffffff82166000908152606a6020526040902080546001600160c01b031916815560010180546001600160a01b03191690556120e5565b805163ffffffff161580159061202a575060208101516001600160a01b031615155b6120805760405162461bcd60e51b815260206004820152602160248201527f4e6574776f726b52656769737472793a20696e76616c696420726567697374726044820152607960f81b6064820152608401610a71565b63ffffffff8281166000908152606a6020908152604091829020845181549286015194166001600160c01b031990921691909117600160201b6001600160a01b039485160217815590830151600190910180546001600160a01b031916919092161790555b806000015163ffffffff1681602001516001600160a01b03168363ffffffff167f4db6d44cad7c0eddcb10fcbcb14f9600520da0ea078eedc230cbed5aa0661d20846040015160405161214791906001600160a01b0391909116815260200190565b60405180910390a45050565b6033546001600160a01b031633148061218057506069546001600160a01b03161580159061218057503330145b61219c5760405162461bcd60e51b8152600401610a71906155d6565b606f805460ff1916911515919091179055606e55565b6033546001600160a01b03163314806121df57506069546001600160a01b0316158015906121df57503330145b6121fb5760405162461bcd60e51b8152600401610a71906155d6565b606b54606c5460405163031f799160e61b81526001600160a01b03918216600482015291169063c7de644090602401611251565b60008061226e8585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506127fe92505050565b606b54606c54604051637677856760e11b81529395509193506001600160a01b039081169263ecef0ace926122ad9216908690869089906004016157e8565b600060405180830381600087803b1580156122c757600080fd5b505af11580156122db573d6000803e3d6000fd5b5050505060008282856040516020016122f693929190615836565b60408051601f198184030181528282528051602091820120606c546001600160a01b0316845290830181905263ffffffff87168383015290519092507fc65927f292bd600bd77f04e7e614c2c2997ee8a3123221acf8a033a151cb86179181900360600190a1505050505050565b6033546001600160a01b031633148061239157506069546001600160a01b03161580159061239157503330145b6123ad5760405162461bcd60e51b8152600401610a71906155d6565b606b54606c546040516334392cbd60e21b81526001600160a01b039182166004820152838216602482015291169063d0e4b2f490604401600060405180830381600087803b1580156123fe57600080fd5b505af1158015612412573d6000803e3d6000fd5b5050505050565b60606065805480602002602001604051908101604052809291908181526020016000905b828210156124a757600084815260209081902060408051608081018252918501546001600160a01b038116835263ffffffff600160a01b8204811684860152600160c01b8204811692840192909252600160e01b900416606082015282526001909201910161243d565b50505050905090565b6124b86130f9565b610d6083838361222f565b606854600090600160c01b900463ffffffff161580156124ec57506069546001600160a01b0316155b905090565b6124f9613a33565b8381805182511461251c5760405162461bcd60e51b8152600401610a71906153e7565b6000805b82518110156125585782818151811061253b5761253b61542c565b60200260200101518261254e9190615458565b9150600101612520565b508034146125785760405162461bcd60e51b8152600401610a719061546b565b8651865114801561258a575086518551145b6125a65760405162461bcd60e51b8152600401610a71906153e7565b63b85a2ce160e01b60005b8851811015610d59576000828983815181106125cf576125cf61542c565b60200260200101518984815181106125e9576125e961542c565b6020026020010151604051602001612629939291906001600160e01b03199390931683526001600160a01b03918216602084015216604082015260600190565b604051602081830303815290604052905061265183828c8581518110611f3557611f3561542c565b506001016125b1565b6000805b6065548110156126f2576126de6065828154811061267e5761267e61542c565b60009182526020918290206040805160808101825291909201546001600160a01b038116825263ffffffff600160a01b8204811694830194909452600160c01b8104841692820192909252600160e01b9091049091166060820152613800565b6126e89083615458565b915060010161265e565b5090565b83838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808702828101820190935286825290935086925085918291850190849080828437600092019190915250508251845114915061277d90505760405162461bcd60e51b8152600401610a71906153e7565b6000805b82518110156127b95782818151811061279c5761279c61542c565b6020026020010151826127af9190615458565b9150600101612781565b508034146127d95760405162461bcd60e51b8152600401610a719061546b565b6127e16130f9565b6040805163e4a7c60360e01b602082018190529160009101611a16565b606080600080600060658054905086511461282c5760405163c53e5b5b60e01b815260040160405180910390fd5b600086516001600160401b0381111561284757612847614914565b60405190808252806020026020018201604052801561288c57816020015b60408051808201909152600080825260208201528152602001906001900390816128655790505b50905060005b875181101561298f5760008882815181106128af576128af61542c565b6020026020010151905060006128c482610f27565b9050816001600160a01b0316856001600160a01b0316106128fb5760405163ac6bd23360e01b815260048101849052602401610a71565b606081015163ffffffff1615612985576040518060400160405280836001600160a01b0316815260200161292e83613800565b8152508484815181106129435761294361542c565b60200260200101819052508383815181106129605761296061542c565b602002602001015160200151866129779190615458565b955086806001019750508194505b5050600101612892565b50836001600160401b038111156129a8576129a8614914565b6040519080825280602002602001820160405280156129d1578160200160208202803683370190505b509550836001600160401b038111156129ec576129ec614914565b604051908082528060200260200182016040528015612a15578160200160208202803683370190505b50945060008060005b8951811015612b36576000848281518110612a3b57612a3b61542c565b6020026020010151602001511115612b2e57838181518110612a5f57612a5f61542c565b602002602001015160000151898381518110612a7d57612a7d61542c565b60200260200101906001600160a01b031690816001600160a01b03168152505085620f4240858381518110612ab457612ab461542c565b602002602001015160200151612aca91906158bb565b612ad491906158e8565b888381518110612ae657612ae661542c565b602002602001019063ffffffff16908163ffffffff1681525050878281518110612b1257612b1261542c565b602002602001015183612b25919061590a565b92506001909101905b600101612a1e565b50620f42408263ffffffff1614612b8b57612b5a63ffffffff8316620f42406155c3565b87600081518110612b6d57612b6d61542c565b60200260200101818151612b81919061590a565b63ffffffff169052505b505050505050915091565b6033546001600160a01b0316331480612bc357506069546001600160a01b031615801590612bc357503330145b612bdf5760405162461bcd60e51b8152600401610a71906155d6565b606b80546001600160a01b0319166001600160a01b03848116918217909255604051634463315560e11b815291831660048301526000916388c662aa90602401602060405180830381865afa158015612c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c609190615737565b90506001600160a01b038116612cc65760405162461bcd60e51b815260206004820152602560248201527f4e6574776f726b52656769737472793a2021657869737473207c7c20696d6d756044820152647461626c6560d81b6064820152608401610a71565b606b5460405163708728eb60e11b81526001600160a01b038481166004830152600092169063e10e51d690602401602060405180830381865afa158015612d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d359190615737565b90506001600160a01b0381163014801590612d5957506001600160a01b0382163014155b15612d7757604051633170a38d60e01b815260040160405180910390fd5b606c80546001600160a01b0319166001600160a01b0385811691821790925560408051928716835260208301919091527fc8d09d7710e05a8ef2f307dcf13f859ce7e661b3eee1a04a57c4d481758a6c1d910160405180910390a1306001600160a01b0382160361127f5761127f6121b2565b612df26124c3565b15612e9457606d546001600160a01b031615801590612e785750606d5460405163f3ae241560e01b81523060048201526001600160a01b039091169063f3ae241590602401602060405180830381865afa158015612e54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7891906154b3565b612e945760405162461bcd60e51b8152600401610a71906154d0565b612e9e8282613c5f565b612ea66124c3565b8015612eb45750606f5460ff165b1561159657604080516001808252818301909252600091602080830190803683370190505090508281600081518110612eef57612eef61542c565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050606e5481600081518110612f4257612f4261542c565b6020908102919091010152606d5460405163262949f360e21b81526001600160a01b03909116906398a527cc90612f7f9085908590600401615519565b600060405180830381600087803b158015612f9957600080fd5b505af1158015611f65573d6000803e3d6000fd5b6033546001600160a01b0316331480612fda57506069546001600160a01b031615801590612fda57503330145b612ff65760405162461bcd60e51b8152600401610a71906155d6565b60005b8251811015610d605761303e8382815181106130175761301761542c565b60200260200101518383815181106130315761303161542c565b6020026020010151612dea565b600101612ff9565b6033546001600160a01b031633148061307357506069546001600160a01b03161580159061307357503330145b61308f5760405162461bcd60e51b8152600401610a71906155d6565b60005b835181101561127f576130f18482815181106130b0576130b061542c565b60200260200101518483815181106130ca576130ca61542c565b60200260200101518484815181106130e4576130e461542c565b6020026020010151610ba3565b600101613092565b611f81613cb2565b60008061310d83610f27565b905061311881613800565b9392505050565b613127613a33565b6001600160a01b03811661318c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a71565b61319581613c0d565b50565b6131a0613a33565b60688054640100000000600160e01b031916600160201b6001600160a01b0386811691820263ffffffff60c01b191692909217600160c01b63ffffffff871690810291909117909355606980546001600160a01b0319169285169283179055604080519182526020820193909352918201527f21ae9d1c05d009b6af15c73821748e22e498496e2b29672090c67ae892322d6f9060600160405180910390a1505050565b6068546060908490849063ffffffff808316600160c01b9092041614801561327957506069546001600160a01b038381169116145b801561329f5750606854600160201b90046001600160a01b0316336001600160a01b0316145b6133115760405162461bcd60e51b815260206004820152603760248201527f4e6574776f726b52656769737472793a202175706461746572446f6d61696e2060448201527f7c7c202175706461746572207c7c2021436f6e6e6578740000000000000000006064820152608401610a71565b600084806020019051810190613327919061594b565b90506060637c6ce76b60e11b6001600160e01b03198316016133d55760008060008880602001905181019061335c9190615966565b6040516001600160a01b038416602482015263ffffffff8084166044830152821660648201529296509094509250630393189560e11b91506084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152935061372e92505050565b6337e738f160e01b6001600160e01b031983160161346a576000808780602001905181019061340491906159c2565b6040516001600160a01b038316602482015263ffffffff8216604482015291945092508591506064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152925061372e915050565b631b97980360e01b6001600160e01b03198316016134b85760008060008880602001905181019061349b9190615ac9565b935093509350508483838360405160240161339893929190614b88565b6330d6cc3f60e01b6001600160e01b031983160161350057600080878060200190518101906134e79190615b55565b925092505083828260405160240161342e929190615016565b631b5839fd60e01b6001600160e01b031983160161354a57506040805160048152602481019091526020810180516001600160e01b03166001600160e01b0319841617905261372e565b63723ea86f60e01b6001600160e01b031983160161359257600080878060200190518101906135799190615bbe565b925092505083828260405160240161342e929190615c14565b632fea4ffd60e11b6001600160e01b03198316016135c157600080878060200190518101906135799190615bbe565b6347a5d31f60e01b6001600160e01b031983160161361a57600080878060200190518101906135f09190615c3c565b6040516001600160a01b03808416602483015282166044820152919450925085915060640161342e565b6362847abb60e01b6001600160e01b031983160161369e576000868060200190518101906136489190615c7b565b6040516001600160a01b038216602482015290925084915060440160408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152915061372e9050565b631fc7f1d160e21b6001600160e01b03198316016136e857506040805160048152602481019091526020810180516001600160e01b03166001600160e01b0319841617905261372e565b63c8e4ad1d60e01b6001600160e01b031983160161372e57506040805160048152602481019091526020810180516001600160e01b03166001600160e01b031984161790525b600080306001600160a01b0316836040516137499190615ca7565b6000604051808303816000865af19150503d8060008114613786576040519150601f19603f3d011682016040523d82523d6000602084013e61378b565b606091505b5091509150836001600160e01b0319168963ffffffff168e7f1291b044e5e68ff17a19703d0775336ad7ec700ef5679fbd11bd0084af55baf3858e6040516137e892919091151582526001600160a01b0316602082015260400190565b60405180910390a49c9b505050505050505050505050565b600061382161381e613819846020015163ffffffff1690565b613e4e565b90565b92915050565b61382f613a33565b8383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505060408051602080870282810182019093528682529093508692508591829185019084908082843760009201919091525050825184511491506138b690505760405162461bcd60e51b8152600401610a71906153e7565b6000805b82518110156138f2578281815181106138d5576138d561542c565b6020026020010151826138e89190615458565b91506001016138ba565b508034146139125760405162461bcd60e51b8152600401610a719061546b565b61397f8b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d918291850190849080828437600092019190915250612fad92505050565b60405163cf2933c160e01b906000906139a49083908f908f908f908f90602001615cc3565b6040516020818303038152906040529050613a2482828b8b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808f0282810182019093528e82529093508e92508d918291850190849080828437600092019190915250613a8d92505050565b50505050505050505050505050565b6033546001600160a01b03163314611f815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a71565b60005b825181101561241257613aca8585858481518110613ab057613ab061542c565b6020026020010151858581518110611f4f57611f4f61542c565b600101613a90565b6033546001600160a01b0316331480613aff57506069546001600160a01b031615801590613aff57503330145b613b1b5760405162461bcd60e51b8152600401610a71906155d6565b610d60838383613ea4565b600054610100900460ff16613b4d5760405162461bcd60e51b8152600401610a7190615d05565b613b556140c3565b613b6286868686866140f2565b6001600160a01b038116613b7d57613b78611f6f565b613b86565b613b868161311f565b505050505050565b6000613b9b838584614196565b63ffffffff84166000818152606a6020908152604091829020549151600160201b9092046001600160a01b031682529293506001600160e01b031988169284917f20ffb62aa5e31e4b559317e8af8f877e19a9126fd6ff1fee93bcf06e59d385cc910160405180910390a45050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6033546001600160a01b0316331480613c8c57506069546001600160a01b031615801590613c8c57503330145b613ca85760405162461bcd60e51b8152600401610a71906155d6565b61159682826142f3565b4260005b606554811015613df257600060658281548110613cd557613cd561542c565b600091825260208220018054909250600160e01b900463ffffffff1615613d68578154600090600160a01b900463ffffffff16613d20578254600160c01b900463ffffffff16613d2a565b60685463ffffffff165b90506000613d388287615d50565b845463ffffffff9182169250606491613d5991600160e01b900416836158bb565b613d6391906158e8565b925050505b815481908390601490613d89908490600160a01b900463ffffffff1661590a565b82546101009290920a63ffffffff818102199093169183160217909155835460405191841682526001600160a01b031691507f780f517310a8481b4817e26f9d1a336e49e7522775e8e6b4fb22c73908be6ce69060200160405180910390a25050600101613cb6565b6040805163ffffffff84168152602081018390527f896e364af402e453909cff1f8bb117d283d37a717e7cf4a5c5b88be2197fa09f910160405180910390a1506068805463ffffffff191663ffffffff92909216919091179055565b6000817812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f21811115613e8e5760405163edc236ad60e01b815260048101849052602401610a71565b61311861381e670de0b6b3a76400008302614417565b6001600160a01b038316613ed657604051633899e57b60e01b81526001600160a01b0384166004820152602401610a71565b6001600160a01b03831660009081526067602052604090205415613f1857604051636822fa9960e11b81526001600160a01b0384166004820152602401610a71565b60648263ffffffff161115613f575760405163424f515b60e11b81526001600160a01b038416600482015263ffffffff83166024820152604401610a71565b428163ffffffff161115613f955760405163faac476360e01b81526001600160a01b038416600482015263ffffffff82166024820152604401610a71565b604080516080810182526001600160a01b038086168083526000602080850182815263ffffffff8881168789019081528a821660608901908152606580546001818101835591885299517f8ff97419363ffd7000167f130ef7168fbea05faf9251824ca5043f113cc6a7c7909a0180549551935192518516600160e01b026001600160e01b03938616600160c01b02939093166001600160c01b0394909516600160a01b026001600160c01b03199096169a9099169990991793909317161717909355606680549094019384905581815260679092528382209290925591517f13ca1f9a974ca1b85618843282dc1981c63a62c389aa5cf6e4a31937f8434e73906140b5908590879063ffffffff92831681529116602082015260400190565b60405180910390a250505050565b600054610100900460ff166140ea5760405162461bcd60e51b8152600401610a7190615d05565b611f8161458e565b600054610100900460ff166141195760405162461bcd60e51b8152600401610a7190615d05565b6068805463ffffffff909516600160c01b0263ffffffff60c01b196001600160a01b03978816600160201b0216640100000000600160e01b03199096169590951794909417909355606980549285166001600160a01b0319938416179055606b8054918516918316919091179055606c8054929093169116179055565b63ffffffff8084166000908152606a60205260408120549091859116158015906141e4575063ffffffff81166000908152606a6020526040902054600160201b90046001600160a01b031615155b61423c5760405162461bcd60e51b815260206004820152602360248201527f4e6574776f726b52656769737472793a2021737570706f72746564206e6574776044820152626f726b60e81b6064820152608401610a71565b60685463ffffffff8087166000908152606a6020526040808220805460019091015491516345560b5d60e11b81526001600160a01b03600160201b96879004811696638aac16ba968b966142a796918616959290920483169391921690829081908e90600401615d6d565b60206040518083038185885af11580156142c5573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906142ea9190615dc8565b95945050505050565b6001600160a01b038216600090815260676020526040812054908190036143385760405163c6040d1d60e01b81526001600160a01b0384166004820152602401610a71565b60648263ffffffff1611156143775760405163424f515b60e11b81526001600160a01b038416600482015263ffffffff83166024820152604401610a71565b6001600160a01b03831660009081526067602052604081205460659061439f906001906155c3565b815481106143af576143af61542c565b60009182526020918290200180546001600160e01b0316600160e01b63ffffffff87169081029190911782556040519081529092506001600160a01b038616917f597a24f4063494925c9b40150fd455db446fcc9046ddb9a1ded3ee8fad6b988491016140b5565b60008160000361442957506000919050565b50600181600160801b81106144435760409190911b9060801c5b68010000000000000000811061445e5760209190911b9060401c5b600160201b81106144745760109190911b9060201c5b6201000081106144895760089190911b9060101c5b610100811061449d5760049190911b9060081c5b601081106144b05760029190911b9060041c5b600481106144c057600182901b91505b60018284816144d1576144d16158d2565b048301901c915060018284816144e9576144e96158d2565b048301901c91506001828481614501576145016158d2565b048301901c91506001828481614519576145196158d2565b048301901c91506001828481614531576145316158d2565b048301901c91506001828481614549576145496158d2565b048301901c91506001828481614561576145616158d2565b048301901c91506000828481614579576145796158d2565b049050808310614587578092505b5050919050565b600054610100900460ff166145b55760405162461bcd60e51b8152600401610a7190615d05565b611f8133613c0d565b6001600160a01b038116811461319557600080fd5b63ffffffff8116811461319557600080fd5b60008083601f8401126145f757600080fd5b5081356001600160401b0381111561460e57600080fd5b6020830191508360208260051b850101111561462957600080fd5b9250929050565b6000806000806000806080878903121561464957600080fd5b8635614654816145be565b95506020870135614664816145d3565b945060408701356001600160401b038082111561468057600080fd5b61468c8a838b016145e5565b909650945060608901359150808211156146a557600080fd5b506146b289828a016145e5565b979a9699509497509295939492505050565b6000806000606084860312156146d957600080fd5b83356146e4816145be565b925060208401356146f4816145d3565b91506040840135614704816145d3565b809150509250925092565b6000806000806040858703121561472557600080fd5b84356001600160401b038082111561473c57600080fd5b614748888389016145e5565b9096509450602087013591508082111561476157600080fd5b5061476e878288016145e5565b95989497509550505050565b60006020828403121561478c57600080fd5b8135613118816145be565b80516001600160a01b0316825260208082015163ffffffff9081169184019190915260408083015182169084015260609182015116910152565b608081016138218284614797565b600080600080600080600060a0888a0312156147fa57600080fd5b8735614805816145be565b96506020880135614815816145d3565b95506040880135614825816145d3565b945060608801356001600160401b038082111561484157600080fd5b61484d8b838c016145e5565b909650945060808a013591508082111561486657600080fd5b506148738a828b016145e5565b989b979a50959850939692959293505050565b60008060008060008060006080888a0312156148a157600080fd5b87356001600160401b03808211156148b857600080fd5b6148c48b838c016145e5565b909950975060208a013591506148d9826145d3565b909550604089013590808211156148ef57600080fd5b6148fb8b838c016145e5565b909650945060608a013591508082111561486657600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561495257614952614914565b604052919050565b600082601f83011261496b57600080fd5b81356001600160401b0381111561498457614984614914565b614997601f8201601f191660200161492a565b8181528460208386010111156149ac57600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156149db57600080fd5b81356001600160401b038111156149f157600080fd5b6149fd8482850161495a565b949350505050565b60008060008060008060008060008060a08b8d031215614a2457600080fd5b8a356001600160401b0380821115614a3b57600080fd5b614a478e838f016145e5565b909c509a5060208d0135915080821115614a6057600080fd5b614a6c8e838f016145e5565b909a50985060408d0135915080821115614a8557600080fd5b614a918e838f016145e5565b909850965060608d0135915080821115614aaa57600080fd5b614ab68e838f016145e5565b909650945060808d0135915080821115614acf57600080fd5b50614adc8d828e016145e5565b915080935050809150509295989b9194979a5092959850565b600060208284031215614b0757600080fd5b5035919050565b600081518084526020808501945080840160005b83811015614b475781516001600160a01b031687529582019590820190600101614b22565b509495945050505050565b600081518084526020808501945080840160005b83811015614b4757815163ffffffff1687529582019590820190600101614b66565b606081526000614b9b6060830186614b0e565b8281036020840152614bad8186614b52565b90508281036040840152614bc18185614b52565b9695505050505050565b60006001600160401b03821115614be457614be4614914565b5060051b60200190565b600082601f830112614bff57600080fd5b81356020614c14614c0f83614bcb565b61492a565b82815260059290921b84018101918181019086841115614c3357600080fd5b8286015b84811015614c57578035614c4a816145d3565b8352918301918301614c37565b509695505050505050565b600082601f830112614c7357600080fd5b81356020614c83614c0f83614bcb565b82815260059290921b84018101918181019086841115614ca257600080fd5b8286015b84811015614c57578035614cb9816145be565b8352918301918301614ca6565b600082601f830112614cd757600080fd5b81356020614ce7614c0f83614bcb565b82815260059290921b84018101918181019086841115614d0657600080fd5b8286015b84811015614c575780358352918301918301614d0a565b600080600060608486031215614d3657600080fd5b83356001600160401b0380821115614d4d57600080fd5b614d5987838801614bee565b94506020860135915080821115614d6f57600080fd5b614d7b87838801614c62565b93506040860135915080821115614d9157600080fd5b50614d9e86828701614cc6565b9150509250925092565b6000808284036080811215614dbc57600080fd5b8335614dc7816145d3565b92506060601f1982011215614ddb57600080fd5b50604051606081018181106001600160401b0382111715614dfe57614dfe614914565b6040526020840135614e0f816145d3565b81526040840135614e1f816145be565b60208201526060840135614e32816145be565b6040820152919491935090915050565b801515811461319557600080fd5b60008060408385031215614e6357600080fd5b823591506020830135614e7581614e42565b809150509250929050565b600080600060408486031215614e9557600080fd5b83356001600160401b03811115614eab57600080fd5b614eb7868287016145e5565b9094509250506020840135614704816145d3565b600060208284031215614edd57600080fd5b8135613118816145d3565b6020808252825182820181905260009190848201906040850190845b81811015614f2a57614f17838551614797565b9284019260809290920191600101614f04565b50909695505050505050565b60008060008060808587031215614f4c57600080fd5b84356001600160401b0380821115614f6357600080fd5b614f6f88838901614bee565b95506020870135915080821115614f8557600080fd5b614f9188838901614c62565b94506040870135915080821115614fa757600080fd5b614fb388838901614c62565b93506060870135915080821115614fc957600080fd5b50614fd687828801614cc6565b91505092959194509250565b600060208284031215614ff457600080fd5b81356001600160401b0381111561500a57600080fd5b6149fd84828501614c62565b6040815260006150296040830185614b0e565b82810360208401526142ea8185614b52565b6000806040838503121561504e57600080fd5b8235615059816145be565b91506020830135614e75816145be565b6000806040838503121561507c57600080fd5b8235615087816145be565b91506020830135614e75816145d3565b600080604083850312156150aa57600080fd5b82356001600160401b03808211156150c157600080fd5b6150cd86838701614c62565b935060208501359150808211156150e357600080fd5b506150f085828601614bee565b9150509250929050565b60008060006060848603121561510f57600080fd5b83356001600160401b038082111561512657600080fd5b61513287838801614c62565b9450602086013591508082111561514857600080fd5b61515487838801614bee565b9350604086013591508082111561516a57600080fd5b50614d9e86828701614bee565b60008060006060848603121561518c57600080fd5b8335615197816145be565b925060208401356151a7816145d3565b91506040840135614704816145be565b60008060008060008060c087890312156151d057600080fd5b863595506020870135945060408701356151e9816145be565b935060608701356151f9816145be565b92506080870135615209816145d3565b915060a08701356001600160401b0381111561522457600080fd5b61523089828a0161495a565b9150509295509295509295565b60005b83811015615258578181015183820152602001615240565b50506000910152565b6000815180845261527981602086016020860161523d565b601f01601f19169290920160200192915050565b6020815260006131186020830184615261565b6000608082840312156152b257600080fd5b604051608081018181106001600160401b03821117156152d4576152d4614914565b60405282356152e2816145be565b815260208301356152f2816145d3565b60208201526040830135615305816145d3565b60408201526060830135615318816145d3565b60608201529392505050565b6000806000806000806000806080898b03121561534057600080fd5b88356001600160401b038082111561535757600080fd5b6153638c838d016145e5565b909a50985060208b013591508082111561537c57600080fd5b6153888c838d016145e5565b909850965060408b01359150808211156153a157600080fd5b6153ad8c838d016145e5565b909650945060608b01359150808211156153c657600080fd5b506153d38b828c016145e5565b999c989b5096995094979396929594505050565b60208082526025908201527f4e6574776f726b52656769737472793a20706172616d732073697a65206d69736040820152640dac2e8c6d60db1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8082018082111561382157613821615442565b60208082526028908201527f4e6574776f726b52656769737472793a206d73672e76616c7565203c2072656c604082015267617965724665657360c01b606082015260800190565b6000602082840312156154c557600080fd5b815161311881614e42565b60208082526029908201527f4e6574776f726b52656769737472795368616d616e3a2021696e6974207c7c20604082015268109036b0b730b3b2b960b91b606082015260800190565b60408152600061552c6040830185614b0e565b82810360208481019190915284518083528582019282019060005b8181101561556357845183529383019391830191600101615547565b5090979650505050505050565b63ffffffff60e01b851681526080602082015260006155926080830186614b0e565b82810360408401526155a48186614b52565b905082810360608401526155b88185614b52565b979650505050505050565b8181038181111561382157613821615442565b60208082526023908201527f4e6574776f726b52656769737472793a20216f776e6572207c7c2021757064616040820152623a32b960e91b606082015260800190565b8183526000602080850194508260005b85811015614b4757813561563c816145be565b6001600160a01b031687529582019590820190600101615629565b63ffffffff60e01b8516815260606020820152600061567a606083018587615619565b905063ffffffff8316604083015295945050505050565b600080600080600080600080610100898b0312156156ae57600080fd5b88516156b9816145be565b60208a01519098506156ca816145d3565b60408a01519097506156db816145be565b60608a01519096506156ec816145be565b60808a01519095506156fd816145be565b60a08a015190945061570e816145be565b60c08a015160e08b0151919450925061572681614e42565b809150509295985092959890939650565b60006020828403121561574957600080fd5b8151613118816145be565b8183526000602080850194508260005b85811015614b47578135615777816145d3565b63ffffffff1687529582019590820190600101615764565b63ffffffff60e01b881681526080602082015260006157b260808301888a615619565b82810360408401526157c5818789615754565b905082810360608401526157da818587615754565b9a9950505050505050505050565b6001600160a01b038516815260806020820181905260009061580c90830186614b0e565b828103604084015261581e8186614b52565b91505063ffffffff8316606083015295945050505050565b835160009082906020808801845b838110156158695781516001600160a01b031685529382019390820190600101615844565b5050865181880193925060005b8181101561589857845163ffffffff1684529382019392820192600101615876565b50505060e09490941b6001600160e01b0319168452505060049091019392505050565b808202811582820484141761382157613821615442565b634e487b7160e01b600052601260045260246000fd5b60008261590557634e487b7160e01b600052601260045260246000fd5b500490565b63ffffffff81811683821601908082111561592757615927615442565b5092915050565b80516001600160e01b03198116811461594657600080fd5b919050565b60006020828403121561595d57600080fd5b6131188261592e565b6000806000806080858703121561597c57600080fd5b6159858561592e565b93506020850151615995816145be565b60408601519093506159a6816145d3565b60608601519092506159b7816145d3565b939692955090935050565b6000806000606084860312156159d757600080fd5b6159e08461592e565b925060208401516159f0816145be565b6040850151909250614704816145d3565b600082601f830112615a1257600080fd5b81516020615a22614c0f83614bcb565b82815260059290921b84018101918181019086841115615a4157600080fd5b8286015b84811015614c57578051615a58816145be565b8352918301918301615a45565b600082601f830112615a7657600080fd5b81516020615a86614c0f83614bcb565b82815260059290921b84018101918181019086841115615aa557600080fd5b8286015b84811015614c57578051615abc816145d3565b8352918301918301615aa9565b60008060008060808587031215615adf57600080fd5b615ae88561592e565b935060208501516001600160401b0380821115615b0457600080fd5b615b1088838901615a01565b94506040870151915080821115615b2657600080fd5b615b3288838901615a65565b93506060870151915080821115615b4857600080fd5b50614fd687828801615a65565b600080600060608486031215615b6a57600080fd5b615b738461592e565b925060208401516001600160401b0380821115615b8f57600080fd5b615b9b87838801615a01565b93506040860151915080821115615bb157600080fd5b50614d9e86828701615a65565b600080600060608486031215615bd357600080fd5b615bdc8461592e565b925060208401516001600160401b03811115615bf757600080fd5b615c0386828701615a01565b9250506040840151614704816145d3565b604081526000615c276040830185614b0e565b905063ffffffff831660208301529392505050565b600080600060608486031215615c5157600080fd5b615c5a8461592e565b92506020840151615c6a816145be565b6040850151909250614704816145be565b60008060408385031215615c8e57600080fd5b615c978361592e565b91506020830151614e75816145be565b60008251615cb981846020870161523d565b9190910192915050565b63ffffffff60e01b86168152606060208201526000615ce6606083018688615619565b8281036040840152615cf9818587615754565b98975050505050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b63ffffffff82811682821603908082111561592757615927615442565b63ffffffff881681526001600160a01b0387811660208301528681166040830152851660608201526080810184905260a0810183905260e060c08201819052600090615dbb90830184615261565b9998505050505050505050565b600060208284031215615dda57600080fd5b505191905056fea164736f6c6343000813000a",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptSplitControl()": {
        "details": "should accept control of the current 0xsplit in the state"
      },
      "batchNewMember(address[],uint32[],uint32[])": {
        "details": "Make sure array parameters are of the same length Activity multiplier could be set within 0-100 (%) range (i.e. 50 -> part-time 100 -> full-time) but it's up to the implementer to establish the multiplier boundaries",
        "params": {
          "_activityMultipliers": "Activity multipliers for each new member",
          "_members": "A list of member addresses to be added to the registry",
          "_startDates": "A list of dates when each member got active"
        }
      },
      "batchUpdateMember(address[],uint32[])": {
        "details": "Make sure members are in the registry Activity multiplier could be set within 0-100 (%) range (i.e. 50 -> part-time 100 -> full-time) but it's up to the implementer to establish the multiplier boundaries",
        "params": {
          "_activityMultipliers": "New activity multipliers for each member",
          "_members": "A list of existing members"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setNewMember(address,uint32,uint32)": {
        "details": "Activity multiplier could be set within 0-100 (%) range (i.e. 50 -> part-time 100 -> full-time) but it's up to the implementer to establish the multiplier boundaries",
        "params": {
          "_activityMultiplier": "The member activity multiplier",
          "_member": "The addres of the new member to be added to the registry",
          "_startDate": "The date member when the member got active"
        }
      },
      "setSplit(address,address)": {
        "details": "Should make sure the 0xSplit contract exists and isn't immutable (no owner) Also make sure controller has been already handed over to the manager or waiting to be accepted. If manager is already a potential controller, call acceptSplitControl()",
        "params": {
          "_split": "The address of the 0xSplit contract",
          "_splitMain": "The address of the 0xSplitMain"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateMember(address,uint32)": {
        "details": "Make sure member is in the registry Activity multiplier could be set within 0-100 (%) range (i.e. 50 -> part-time 100 -> full-time) but it's up to the implementer to establish the multiplier boundaries",
        "params": {
          "_activityMultiplier": "The member new activity multiplier",
          "_member": "The addres of the existing member"
        }
      },
      "updateSecondsActive()": {
        "details": "It should manage a lastActivityUpdate state variable to update activity based on last update epoch however for new members it should update seconds based each member startDate"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath_UD60x18_Sqrt_Overflow(uint256)": [
        {
          "notice": "Thrown when calculating the square root overflows UD60x18."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "PERCENTAGE_SCALE()": {
        "notice": "constant to scale uints into percentages (1e6 == 100%)"
      },
      "acceptSplitControl()": {
        "notice": "Accepts control of the current 0xSplit contract"
      },
      "batchNewMember(address[],uint32[],uint32[])": {
        "notice": "Adds a new set of members to the registry"
      },
      "batchUpdateMember(address[],uint32[])": {
        "notice": "Updates the activity multiplier of a set of existing members"
      },
      "setNewMember(address,uint32,uint32)": {
        "notice": "Adds a new member to the registry"
      },
      "setSplit(address,address)": {
        "notice": "Updates the addresses for the 0xSplitMain proxy and 0xSplit contract"
      },
      "updateMember(address,uint32)": {
        "notice": "Updates the activity multiplier of an existing member"
      },
      "updateSecondsActive()": {
        "notice": "Updates seconds active for each member since the last update epoch"
      },
      "xReceive(bytes32,uint256,address,address,uint32,bytes)": {
        "notice": "The receiver function as required by the IXReceiver interface."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 829,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 832,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1316,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 701,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 821,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11532,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "members",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_struct(Member)11528_storage)dyn_storage"
      },
      {
        "astId": 11535,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "count",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 11539,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "memberIdxs",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11541,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "lastActivityUpdate",
        "offset": 0,
        "slot": "104",
        "type": "t_uint32"
      },
      {
        "astId": 8507,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "connext",
        "offset": 4,
        "slot": "104",
        "type": "t_contract(IConnext)285"
      },
      {
        "astId": 8509,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "updaterDomain",
        "offset": 24,
        "slot": "104",
        "type": "t_uint32"
      },
      {
        "astId": 8511,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "updater",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 8516,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "networkRegistry",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_uint32,t_struct(Registry)11026_storage)"
      },
      {
        "astId": 8519,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "splitMain",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(ISplitMain)11437"
      },
      {
        "astId": 8521,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "split",
        "offset": 0,
        "slot": "108",
        "type": "t_address"
      },
      {
        "astId": 10598,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "baal",
        "offset": 0,
        "slot": "109",
        "type": "t_contract(IBaal)690"
      },
      {
        "astId": 10600,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "sharesToMint",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 10602,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "burnShares",
        "offset": 0,
        "slot": "111",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Member)11528_storage)dyn_storage": {
        "base": "t_struct(Member)11528_storage",
        "encoding": "dynamic_array",
        "label": "struct MemberRegistry.Member[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBaal)690": {
        "encoding": "inplace",
        "label": "contract IBaal",
        "numberOfBytes": "20"
      },
      "t_contract(IConnext)285": {
        "encoding": "inplace",
        "label": "contract IConnext",
        "numberOfBytes": "20"
      },
      "t_contract(ISplitMain)11437": {
        "encoding": "inplace",
        "label": "contract ISplitMain",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_struct(Registry)11026_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct INetworkMemberRegistry.Registry)",
        "numberOfBytes": "32",
        "value": "t_struct(Registry)11026_storage"
      },
      "t_struct(Member)11528_storage": {
        "encoding": "inplace",
        "label": "struct MemberRegistry.Member",
        "members": [
          {
            "astId": 11521,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11523,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "secondsActive",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11525,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "startDate",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11527,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "activityMultiplier",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Registry)11026_storage": {
        "encoding": "inplace",
        "label": "struct INetworkMemberRegistry.Registry",
        "members": [
          {
            "astId": 11021,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "domainId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11023,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "registryAddress",
            "offset": 4,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11025,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "delegate",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}