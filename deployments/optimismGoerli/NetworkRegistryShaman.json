{
  "address": "0xD29fee98db74D7A9C7685c1c3cc9d459588991bF",
  "abi": [
    {
      "inputs": [],
      "name": "ALREADY_REGISTERED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_ACTIVITY_MULTIPLIER",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "INVALID_LIST",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_MEMBER_OR_NOT_SORTED",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NOT_REGISTERED",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "UD60x18",
          "name": "x",
          "type": "uint256"
        }
      ],
      "name": "PRBMath_UD60x18_Sqrt_Overflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "START_DATE_IN_FUTURE",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_registryAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_domainId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "NetworkRegistryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "secondsActive",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "startDate",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "activityMultiplier",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct MemberRegistry.Member",
          "name": "member",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "startDate",
          "type": "uint32"
        }
      ],
      "name": "SetMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "_action",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_success",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_originDomain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_originSender",
          "type": "address"
        }
      ],
      "name": "SyncActionPerformed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes4",
          "name": "_action",
          "type": "bytes4"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_registryAddress",
          "type": "address"
        }
      ],
      "name": "SyncMessageSubmitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "date",
          "type": "uint32"
        }
      ],
      "name": "Update",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "secondsActive",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "startDate",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "activityMultiplier",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct MemberRegistry.Member",
          "name": "member",
          "type": "tuple"
        }
      ],
      "name": "UpdateMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "secondsActive",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "startDate",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "activityMultiplier",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct MemberRegistry.Member",
          "name": "member",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newSeconds",
          "type": "uint32"
        }
      ],
      "name": "UpdateMemberSeconds",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_SCALE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "acceptNetworkSplitControl",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptSplitControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baal",
      "outputs": [
        {
          "internalType": "contract IBaal",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_activityMultipliers",
          "type": "uint8[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_startDates",
          "type": "uint32[]"
        }
      ],
      "name": "batchNewMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_activityMultipliers",
          "type": "uint8[]"
        }
      ],
      "name": "batchUpdateMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burnShares",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_sortedList",
          "type": "address[]"
        }
      ],
      "name": "calculate",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_percentAllocations",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "cancelNetworkSplitControlTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelSplitControlTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connext",
      "outputs": [
        {
          "internalType": "contract IConnext",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        }
      ],
      "name": "getMember",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "secondsActive",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "startDate",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "activityMultiplier",
              "type": "uint8"
            }
          ],
          "internalType": "struct MemberRegistry.Member",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMembers",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "secondsActive",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "startDate",
              "type": "uint32"
            },
            {
              "internalType": "uint8",
              "name": "activityMultiplier",
              "type": "uint8"
            }
          ],
          "internalType": "struct MemberRegistry.Member[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_initializationParams",
          "type": "bytes"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMainRegistry",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdate",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "memberIdxs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "members",
      "outputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "secondsActive",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "startDate",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "activityMultiplier",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "networkRegistry",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "domainId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_activityMultiplier",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "_startDate",
          "type": "uint32"
        }
      ],
      "name": "setNewMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_split",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_splitDistributorFee",
          "type": "uint32"
        }
      ],
      "name": "setSplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_splitMain",
          "type": "address"
        }
      ],
      "name": "setSplitMain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_updaterDomain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_updater",
          "type": "address"
        }
      ],
      "name": "setUpdater",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharesToMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "split",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "splitDistributorFee",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "splitMain",
      "outputs": [
        {
          "internalType": "contract ISplitMain",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_activityMultipliers",
          "type": "uint8[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_startDates",
          "type": "uint32[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncBatchNewMember",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_activityMultipliers",
          "type": "uint8[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncBatchUpdateMember",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncNetworkMemberRegistry",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_activityMultiplier",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "_startDate",
          "type": "uint32"
        },
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncSetNewMember",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_sortedList",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncUpdateAll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_activityMultiplier",
          "type": "uint8"
        },
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncUpdateMember",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncUpdateSecondsActive",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_sortedList",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "syncUpdateSplits",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalMembers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "address[]",
          "name": "_newControllers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "transferNetworkSplitControl",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newController",
          "type": "address"
        }
      ],
      "name": "transferSplitControl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_sortedList",
          "type": "address[]"
        }
      ],
      "name": "updateAll",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_percentAllocations",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_sortedList",
          "type": "address[]"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_distributorAddress",
          "type": "address"
        }
      ],
      "name": "updateAllAndDistributeERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_sortedList",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_distributorAddress",
          "type": "address"
        }
      ],
      "name": "updateAllAndDistributeETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_member",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_activityMultiplier",
          "type": "uint8"
        }
      ],
      "name": "updateMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "domainId",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "registryAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "delegate",
              "type": "address"
            }
          ],
          "internalType": "struct INetworkMemberRegistry.NetworkRegistry",
          "name": "_registry",
          "type": "tuple"
        }
      ],
      "name": "updateNetworkRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "address[]",
          "name": "_splits",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_splitDistributorFees",
          "type": "uint32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "updateNetworkSplit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "_chainIds",
          "type": "uint32[]"
        },
        {
          "internalType": "address[]",
          "name": "_splitsMain",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_relayerFees",
          "type": "uint256[]"
        }
      ],
      "name": "updateNetworkSplitMain",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateSecondsActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_sortedList",
          "type": "address[]"
        }
      ],
      "name": "updateSplits",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_receivers",
          "type": "address[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_percentAllocations",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updater",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updaterDomain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_originSender",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_incomingCalldata",
          "type": "bytes"
        }
      ],
      "name": "xReceive",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xefc66071c7dae9715b185cbbf1fb5db630b70b5e8d706573dc474c3cc572e921",
  "receipt": {
    "to": null,
    "from": "0x10136Fa41B6522E4DBd068C6F7D80373aBbCFBe6",
    "contractAddress": "0xD29fee98db74D7A9C7685c1c3cc9d459588991bF",
    "transactionIndex": 2,
    "gasUsed": "4877745",
    "logsBloom": "0x
    "blockHash": "0xabaf5bf61795b86a7e1bcfb0b8e393a2e4d5e4a53f4bc3f6d9878732ca865d60",
    "transactionHash": "0xefc66071c7dae9715b185cbbf1fb5db630b70b5e8d706573dc474c3cc572e921",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 10988583,
        "transactionHash": "0xefc66071c7dae9715b185cbbf1fb5db630b70b5e8d706573dc474c3cc572e921",
        "address": "0xD29fee98db74D7A9C7685c1c3cc9d459588991bF",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 6,
        "blockHash": "0xabaf5bf61795b86a7e1bcfb0b8e393a2e4d5e4a53f4bc3f6d9878732ca865d60"
      }
    ],
    "blockNumber": 10988583,
    "cumulativeGasUsed": "5101266",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5224c5ec25dd58319938cd3b304b0404",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ALREADY_REGISTERED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_ACTIVITY_MULTIPLIER\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"INVALID_LIST\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_MEMBER_OR_NOT_SORTED\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NOT_REGISTERED\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"UD60x18\",\"name\":\"x\",\"type\":\"uint256\"}],\"name\":\"PRBMath_UD60x18_Sqrt_Overflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"START_DATE_IN_FUTURE\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_domainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"NetworkRegistryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"secondsActive\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"activityMultiplier\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct MemberRegistry.Member\",\"name\":\"member\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"}],\"name\":\"SetMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"_action\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_originDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_originSender\",\"type\":\"address\"}],\"name\":\"SyncActionPerformed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes4\",\"name\":\"_action\",\"type\":\"bytes4\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_registryAddress\",\"type\":\"address\"}],\"name\":\"SyncMessageSubmitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"date\",\"type\":\"uint32\"}],\"name\":\"Update\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"secondsActive\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"activityMultiplier\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct MemberRegistry.Member\",\"name\":\"member\",\"type\":\"tuple\"}],\"name\":\"UpdateMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"secondsActive\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"activityMultiplier\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct MemberRegistry.Member\",\"name\":\"member\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newSeconds\",\"type\":\"uint32\"}],\"name\":\"UpdateMemberSeconds\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERCENTAGE_SCALE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"acceptNetworkSplitControl\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptSplitControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baal\",\"outputs\":[{\"internalType\":\"contract IBaal\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_activityMultipliers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_startDates\",\"type\":\"uint32[]\"}],\"name\":\"batchNewMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_activityMultipliers\",\"type\":\"uint8[]\"}],\"name\":\"batchUpdateMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnShares\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_sortedList\",\"type\":\"address[]\"}],\"name\":\"calculate\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_percentAllocations\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"cancelNetworkSplitControlTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelSplitControlTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connext\",\"outputs\":[{\"internalType\":\"contract IConnext\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"getMember\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"secondsActive\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"activityMultiplier\",\"type\":\"uint8\"}],\"internalType\":\"struct MemberRegistry.Member\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMembers\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"secondsActive\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"activityMultiplier\",\"type\":\"uint8\"}],\"internalType\":\"struct MemberRegistry.Member[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_initializationParams\",\"type\":\"bytes\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMainRegistry\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"memberIdxs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"members\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"secondsActive\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"activityMultiplier\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"networkRegistry\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"domainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_activityMultiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_startDate\",\"type\":\"uint32\"}],\"name\":\"setNewMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_split\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_splitDistributorFee\",\"type\":\"uint32\"}],\"name\":\"setSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_splitMain\",\"type\":\"address\"}],\"name\":\"setSplitMain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_updaterDomain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_updater\",\"type\":\"address\"}],\"name\":\"setUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesToMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"split\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitDistributorFee\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"splitMain\",\"outputs\":[{\"internalType\":\"contract ISplitMain\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_activityMultipliers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_startDates\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncBatchNewMember\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_activityMultipliers\",\"type\":\"uint8[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncBatchUpdateMember\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncNetworkMemberRegistry\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_activityMultiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_startDate\",\"type\":\"uint32\"},{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncSetNewMember\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_sortedList\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncUpdateAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_activityMultiplier\",\"type\":\"uint8\"},{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncUpdateMember\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncUpdateSecondsActive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_sortedList\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"syncUpdateSplits\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMembers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"address[]\",\"name\":\"_newControllers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"transferNetworkSplitControl\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"transferSplitControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_sortedList\",\"type\":\"address[]\"}],\"name\":\"updateAll\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_percentAllocations\",\"type\":\"uint32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_sortedList\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributorAddress\",\"type\":\"address\"}],\"name\":\"updateAllAndDistributeERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_sortedList\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_distributorAddress\",\"type\":\"address\"}],\"name\":\"updateAllAndDistributeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_activityMultiplier\",\"type\":\"uint8\"}],\"name\":\"updateMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"domainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"internalType\":\"struct INetworkMemberRegistry.NetworkRegistry\",\"name\":\"_registry\",\"type\":\"tuple\"}],\"name\":\"updateNetworkRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"address[]\",\"name\":\"_splits\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_splitDistributorFees\",\"type\":\"uint32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"updateNetworkSplit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"_chainIds\",\"type\":\"uint32[]\"},{\"internalType\":\"address[]\",\"name\":\"_splitsMain\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_relayerFees\",\"type\":\"uint256[]\"}],\"name\":\"updateNetworkSplitMain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateSecondsActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_sortedList\",\"type\":\"address[]\"}],\"name\":\"updateSplits\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_receivers\",\"type\":\"address[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_percentAllocations\",\"type\":\"uint32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updaterDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_originSender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_incomingCalldata\",\"type\":\"bytes\"}],\"name\":\"xReceive\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"PRBMath_UD60x18_Sqrt_Overflow(uint256)\":[{\"notice\":\"Thrown when calculating the square root overflows UD60x18.\"}]},\"kind\":\"user\",\"methods\":{\"xReceive(bytes32,uint256,address,address,uint32,bytes)\":{\"notice\":\"The receiver function as required by the IXReceiver interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NetworkRegistryShaman.sol\":\"NetworkRegistryShaman\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@connext/interfaces/core/IConnext.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {ExecuteArgs, TransferInfo, DestinationTransferStatus} from \\\"../libraries/LibConnextStorage.sol\\\";\\nimport {TokenId} from \\\"../libraries/TokenId.sol\\\";\\n\\ninterface IConnext {\\n\\n  // ============ BRIDGE ==============\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData,\\n    uint256 _relayerFee\\n  ) external returns (bytes32);\\n\\n  function xcallIntoLocal(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n\\n  function execute(ExecuteArgs calldata _args) external returns (bytes32 transferId);\\n\\n  function forceUpdateSlippage(TransferInfo calldata _params, uint256 _slippage) external;\\n\\n  function forceReceiveLocal(TransferInfo calldata _params) external;\\n\\n  function bumpTransfer(bytes32 _transferId) external payable;\\n\\n  function routedTransfers(bytes32 _transferId) external view returns (address[] memory);\\n\\n  function transferStatus(bytes32 _transferId) external view returns (DestinationTransferStatus);\\n\\n  function remote(uint32 _domain) external view returns (address);\\n\\n  function domain() external view returns (uint256);\\n\\n  function nonce() external view returns (uint256);\\n\\n  function approvedSequencers(address _sequencer) external view returns (bool);\\n\\n  function xAppConnectionManager() external view returns (address);\\n\\n  // ============ ROUTERS ==============\\n\\n  function LIQUIDITY_FEE_NUMERATOR() external view returns (uint256);\\n\\n  function LIQUIDITY_FEE_DENOMINATOR() external view returns (uint256);\\n\\n  function getRouterApproval(address _router) external view returns (bool);\\n\\n  function getRouterRecipient(address _router) external view returns (address);\\n\\n  function getRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwner(address _router) external view returns (address);\\n\\n  function getProposedRouterOwnerTimestamp(address _router) external view returns (uint256);\\n\\n  function maxRoutersPerTransfer() external view returns (uint256);\\n\\n  function routerBalances(address _router, address _asset) external view returns (uint256);\\n\\n  function getRouterApprovalForPortal(address _router) external view returns (bool);\\n\\n  function initializeRouter(address _owner, address _recipient) external;\\n\\n  function setRouterRecipient(address _router, address _recipient) external;\\n\\n  function proposeRouterOwner(address _router, address _proposed) external;\\n\\n  function acceptProposedRouterOwner(address _router) external;\\n\\n  function addRouterLiquidityFor(\\n    uint256 _amount,\\n    address _local,\\n    address _router\\n  ) external payable;\\n\\n  function addRouterLiquidity(uint256 _amount, address _local) external payable;\\n\\n  function removeRouterLiquidityFor(\\n    TokenId memory _canonical,\\n    uint256 _amount,\\n    address payable _to,\\n    address _router\\n  ) external;\\n\\n  function removeRouterLiquidity(TokenId memory _canonical, uint256 _amount, address payable _to) external;\\n\\n  // ============ TOKEN_FACET ==============\\n  function adoptedToCanonical(address _adopted) external view returns (TokenId memory);\\n\\n  function approvedAssets(TokenId calldata _canonical) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c2f287fe81216f7060acce25747374631b94ff9a87573e1c5d36df1a3a2fdf8\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/core/IXReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IXReceiver {\\n  function xReceive(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset,\\n    address _originSender,\\n    uint32 _origin,\\n    bytes memory _callData\\n  ) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x37a35045d40f3bde688c70bb631581cbc609796514319db1361e061da8d9349b\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/libraries/LibConnextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Enum representing status of destination transfer\\n * @dev Status is only assigned on the destination domain, will always be \\\"none\\\" for the\\n * origin domains\\n * @return uint - Index of value in enum\\n */\\nenum DestinationTransferStatus {\\n  None, // 0\\n  Reconciled, // 1\\n  Executed, // 2\\n  Completed // 3 - executed + reconciled\\n}\\n\\n/**\\n * @notice These are the parameters that will remain constant between the\\n * two chains. They are supplied on `xcall` and should be asserted on `execute`\\n * @property to - The account that receives funds, in the event of a crosschain call,\\n * will receive funds if the call fails.\\n *\\n * @param originDomain - The originating domain (i.e. where `xcall` is called)\\n * @param destinationDomain - The final domain (i.e. where `execute` / `reconcile` are called)\\\\\\n * @param canonicalDomain - The canonical domain of the asset you are bridging\\n * @param to - The address you are sending funds (and potentially data) to\\n * @param delegate - An address who can execute txs on behalf of `to`, in addition to allowing relayers\\n * @param receiveLocal - If true, will use the local asset on the destination instead of adopted.\\n * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\\n * @param slippage - Slippage user is willing to accept from original amount in expressed in BPS (i.e. if\\n * a user takes 1% slippage, this is expressed as 1_000)\\n * @param originSender - The msg.sender of the xcall\\n * @param bridgedAmt - The amount sent over the bridge (after potential AMM on xcall)\\n * @param normalizedIn - The amount sent to `xcall`, normalized to 18 decimals\\n * @param nonce - The nonce on the origin domain used to ensure the transferIds are unique\\n * @param canonicalId - The unique identifier of the canonical token corresponding to bridge assets\\n */\\nstruct TransferInfo {\\n  uint32 originDomain;\\n  uint32 destinationDomain;\\n  uint32 canonicalDomain;\\n  address to;\\n  address delegate;\\n  bool receiveLocal;\\n  bytes callData;\\n  uint256 slippage;\\n  address originSender;\\n  uint256 bridgedAmt;\\n  uint256 normalizedIn;\\n  uint256 nonce;\\n  bytes32 canonicalId;\\n}\\n\\n/**\\n * @notice\\n * @param params - The TransferInfo. These are consistent across sending and receiving chains.\\n * @param routers - The routers who you are sending the funds on behalf of.\\n * @param routerSignatures - Signatures belonging to the routers indicating permission to use funds\\n * for the signed transfer ID.\\n * @param sequencer - The sequencer who assigned the router path to this transfer.\\n * @param sequencerSignature - Signature produced by the sequencer for path assignment accountability\\n * for the path that was signed.\\n */\\nstruct ExecuteArgs {\\n  TransferInfo params;\\n  address[] routers;\\n  bytes[] routerSignatures;\\n  address sequencer;\\n  bytes sequencerSignature;\\n}\",\"keccak256\":\"0xb8581253c5ebe58445c37d344fafe6126d3f7a15784337b3571637cd0068de57\",\"license\":\"UNLICENSED\"},\"@connext/interfaces/libraries/TokenId.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.0;\\n\\n// ============= Structs =============\\n\\n// Tokens are identified by a TokenId:\\n// domain - 4 byte chain ID of the chain from which the token originates\\n// id - 32 byte identifier of the token address on the origin chain, in that chain's address format\\nstruct TokenId {\\n  uint32 domain;\\n  bytes32 id;\\n}\\n\",\"keccak256\":\"0xfa4e01760604863ea105e18380c243cd2250a7553d2b852f67ecb747f9916b6d\",\"license\":\"MIT OR Apache-2.0\"},\"@daohaus/baal-contracts/contracts/interfaces/IBaal.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IBaal {\\n    function lootToken() external view returns (address);\\n    function sharesToken() external view returns (address);\\n    function votingPeriod() external view returns (uint32);\\n    function gracePeriod() external view returns (uint32);\\n    function proposalCount() external view returns (uint32);\\n    function proposalOffering() external view returns (uint256);\\n    function quorumPercent() external view returns (uint256);\\n    function sponsorThreshold() external view returns (uint256);\\n    function minRetentionPercent() external view returns (uint256);\\n    function latestSponsoredProposalId() external view returns (uint32);\\n\\n    function setUp(bytes memory initializationParams) external;\\n    function multisendLibrary() external view returns (address);\\n    // Module\\n    function avatar() external view returns (address);\\n    function target() external view returns (address);\\n    function setAvatar(address avatar) external;\\n    function setTarget(address avatar) external;\\n    // BaseRelayRecipient\\n    function trustedForwarder() external view returns (address);\\n    function setTrustedForwarder(address trustedForwarderAddress) external;\\n\\n    function mintLoot(address[] calldata to, uint256[] calldata amount) external;\\n    function burnLoot(address[] calldata from, uint256[] calldata amount) external;\\n    function mintShares(address[] calldata to, uint256[] calldata amount) external;\\n    function burnShares(address[] calldata from, uint256[] calldata amount) external;\\n    function totalLoot() external view returns (uint256);\\n    function totalShares() external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function lootPaused() external view returns (bool);\\n    function sharesPaused() external view returns (bool);\\n    \\n    function shamans(address shaman) external view returns (uint256);\\n    function setShamans(address[] calldata shamans, uint256[] calldata permissions) external;\\n    function isAdmin(address shaman) external view returns (bool);\\n    function isManager(address shaman) external view returns (bool);\\n    function isGovernor(address shaman) external view returns (bool);\\n    function lockAdmin() external;\\n    function lockManager() external;\\n    function lockGovernor() external;\\n    function adminLock() external view returns (bool);\\n    function managerLock() external view returns (bool);\\n    function governorLock() external view returns (bool);\\n    function setAdminConfig(bool pauseShares, bool pauseLoot) external;\\n    function setGovernanceConfig(bytes memory governanceConfig) external;\\n\\n    function submitProposal(\\n        bytes calldata proposalData,\\n        uint32 expiration,\\n        uint256 baalGas,\\n        string calldata details\\n    ) external payable returns (uint256);\\n    function sponsorProposal(uint32 id) external;\\n    function processProposal(uint32 id, bytes calldata proposalData) external;\\n    function cancelProposal(uint32 id) external;\\n    function getProposalStatus(uint32 id) external returns (bool[4] memory);\\n    function submitVote(uint32 id, bool approved) external;\\n    function submitVoteWithSig(\\n        address voter,\\n        uint256 expiry,\\n        uint256 nonce,\\n        uint32 id,\\n        bool approved,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function executeAsBaal(address to, uint256 value, bytes calldata data) external;\\n    function ragequit(address to, uint256 sharesToBurn, uint256 lootToBurn, address[] calldata tokens) external;\\n\\n    function hashOperation(bytes memory transactions) external pure returns (bytes32);\\n    function encodeMultisend(bytes[] memory calls, address target) external pure returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xa8e49237a041f30caf45f9999fe28fdaac6a847530f411761a9b493022622948\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@prb/math/src/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\n// Common.sol\\n//\\n// Common mathematical functions needed by both SD59x18 and UD60x18. Note that these global functions do not\\n// always operate with SD59x18 and UD60x18 numbers.\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                CUSTOM ERRORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Thrown when the resultant value in {mulDiv} overflows uint256.\\nerror PRBMath_MulDiv_Overflow(uint256 x, uint256 y, uint256 denominator);\\n\\n/// @notice Thrown when the resultant value in {mulDiv18} overflows uint256.\\nerror PRBMath_MulDiv18_Overflow(uint256 x, uint256 y);\\n\\n/// @notice Thrown when one of the inputs passed to {mulDivSigned} is `type(int256).min`.\\nerror PRBMath_MulDivSigned_InputTooSmall();\\n\\n/// @notice Thrown when the resultant value in {mulDivSigned} overflows int256.\\nerror PRBMath_MulDivSigned_Overflow(int256 x, int256 y);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CONSTANTS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev The maximum value a uint128 number can have.\\nuint128 constant MAX_UINT128 = type(uint128).max;\\n\\n/// @dev The maximum value a uint40 number can have.\\nuint40 constant MAX_UINT40 = type(uint40).max;\\n\\n/// @dev The unit number, which the decimal precision of the fixed-point types.\\nuint256 constant UNIT = 1e18;\\n\\n/// @dev The unit number inverted mod 2^256.\\nuint256 constant UNIT_INVERSE = 78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n/// @dev The the largest power of two that divides the decimal value of `UNIT`. The logarithm of this value is the least significant\\n/// bit in the binary representation of `UNIT`.\\nuint256 constant UNIT_LPOTD = 262144;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Calculates the binary exponent of x using the binary fraction method.\\n/// @dev Has to use 192.64-bit fixed-point numbers. See https://ethereum.stackexchange.com/a/96594/24693.\\n/// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n/// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp2(uint256 x) pure returns (uint256 result) {\\n    unchecked {\\n        // Start from 0.5 in the 192.64-bit fixed-point format.\\n        result = 0x800000000000000000000000000000000000000000000000;\\n\\n        // The following logic multiplies the result by $\\\\sqrt{2^{-i}}$ when the bit at position i is 1. Key points:\\n        //\\n        // 1. Intermediate results will not overflow, as the starting point is 2^191 and all magic factors are under 2^65.\\n        // 2. The rationale for organizing the if statements into groups of 8 is gas savings. If the result of performing\\n        // a bitwise AND operation between x and any value in the array [0x80; 0x40; 0x20; 0x10; 0x08; 0x04; 0x02; 0x01] is 1,\\n        // we know that `x & 0xFF` is also 1.\\n        if (x & 0xFF00000000000000 > 0) {\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF000000000000 > 0) {\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF0000000000 > 0) {\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF00000000 > 0) {\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF000000 > 0) {\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF0000 > 0) {\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF00 > 0) {\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n        }\\n\\n        if (x & 0xFF > 0) {\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n        }\\n\\n        // In the code snippet below, two operations are executed simultaneously:\\n        //\\n        // 1. The result is multiplied by $(2^n + 1)$, where $2^n$ represents the integer part, and the additional 1\\n        // accounts for the initial guess of 0.5. This is achieved by subtracting from 191 instead of 192.\\n        // 2. The result is then converted to an unsigned 60.18-decimal fixed-point format.\\n        //\\n        // The underlying logic is based on the relationship $2^{191-ip} = 2^{ip} / 2^{191}$, where $ip$ denotes the,\\n        // integer part, $2^n$.\\n        result *= UNIT;\\n        result >>= (191 - (x >> 64));\\n    }\\n}\\n\\n/// @notice Finds the zero-based index of the first 1 in the binary representation of x.\\n///\\n/// @dev See the note on \\\"msb\\\" in this Wikipedia article: https://en.wikipedia.org/wiki/Find_first_set\\n///\\n/// Each step in this implementation is equivalent to this high-level code:\\n///\\n/// ```solidity\\n/// if (x >= 2 ** 128) {\\n///     x >>= 128;\\n///     result += 128;\\n/// }\\n/// ```\\n///\\n/// Where 128 is replaced with each respective power of two factor. See the full high-level implementation here:\\n/// https://gist.github.com/PaulRBerg/f932f8693f2733e30c4d479e8e980948\\n///\\n/// The Yul instructions used below are:\\n///\\n/// - \\\"gt\\\" is \\\"greater than\\\"\\n/// - \\\"or\\\" is the OR bitwise operator\\n/// - \\\"shl\\\" is \\\"shift left\\\"\\n/// - \\\"shr\\\" is \\\"shift right\\\"\\n///\\n/// @param x The uint256 number for which to find the index of the most significant bit.\\n/// @return result The index of the most significant bit as a uint256.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction msb(uint256 x) pure returns (uint256 result) {\\n    // 2^128\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^64\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^32\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(5, gt(x, 0xFFFFFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^16\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(4, gt(x, 0xFFFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^8\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(3, gt(x, 0xFF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^4\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(2, gt(x, 0xF))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^2\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := shl(1, gt(x, 0x3))\\n        x := shr(factor, x)\\n        result := or(result, factor)\\n    }\\n    // 2^1\\n    // No need to shift x any more.\\n    assembly (\\\"memory-safe\\\") {\\n        let factor := gt(x, 0x1)\\n        result := or(result, factor)\\n    }\\n}\\n\\n/// @notice Calculates x*y\\u00f7denominator with 512-bit precision.\\n///\\n/// @dev Credits to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n///\\n/// Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - The denominator must not be zero.\\n/// - The result must fit in uint256.\\n///\\n/// @param x The multiplicand as a uint256.\\n/// @param y The multiplier as a uint256.\\n/// @param denominator The divisor as a uint256.\\n/// @return result The result as a uint256.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mulDiv(uint256 x, uint256 y, uint256 denominator) pure returns (uint256 result) {\\n    // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n    // use the Chinese Remainder Theorem to reconstruct the 512-bit result. The result is stored in two 256\\n    // variables such that product = prod1 * 2^256 + prod0.\\n    uint256 prod0; // Least significant 256 bits of the product\\n    uint256 prod1; // Most significant 256 bits of the product\\n    assembly (\\\"memory-safe\\\") {\\n        let mm := mulmod(x, y, not(0))\\n        prod0 := mul(x, y)\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    // Handle non-overflow cases, 256 by 256 division.\\n    if (prod1 == 0) {\\n        unchecked {\\n            return prod0 / denominator;\\n        }\\n    }\\n\\n    // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n    if (prod1 >= denominator) {\\n        revert PRBMath_MulDiv_Overflow(x, y, denominator);\\n    }\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    // 512 by 256 division\\n    ////////////////////////////////////////////////////////////////////////////\\n\\n    // Make division exact by subtracting the remainder from [prod1 prod0].\\n    uint256 remainder;\\n    assembly (\\\"memory-safe\\\") {\\n        // Compute remainder using the mulmod Yul instruction.\\n        remainder := mulmod(x, y, denominator)\\n\\n        // Subtract 256 bit number from 512-bit number.\\n        prod1 := sub(prod1, gt(remainder, prod0))\\n        prod0 := sub(prod0, remainder)\\n    }\\n\\n    unchecked {\\n        // Calculate the largest power of two divisor of the denominator using the unary operator ~. This operation cannot overflow\\n        // because the denominator cannot be zero at this point in the function execution. The result is always >= 1.\\n        // For more detail, see https://cs.stackexchange.com/q/138556/92363.\\n        uint256 lpotdod = denominator & (~denominator + 1);\\n        uint256 flippedLpotdod;\\n\\n        assembly (\\\"memory-safe\\\") {\\n            // Factor powers of two out of denominator.\\n            denominator := div(denominator, lpotdod)\\n\\n            // Divide [prod1 prod0] by lpotdod.\\n            prod0 := div(prod0, lpotdod)\\n\\n            // Get the flipped value `2^256 / lpotdod`. If the `lpotdod` is zero, the flipped value is one.\\n            // `sub(0, lpotdod)` produces the two's complement version of `lpotdod`, which is equivalent to flipping all the bits.\\n            // However, `div` interprets this value as an unsigned value: https://ethereum.stackexchange.com/q/147168/24693\\n            flippedLpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n        }\\n\\n        // Shift in bits from prod1 into prod0.\\n        prod0 |= prod1 * flippedLpotdod;\\n\\n        // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n        // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n        // four bits. That is, denominator * inv = 1 mod 2^4.\\n        uint256 inverse = (3 * denominator) ^ 2;\\n\\n        // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n        // in modular arithmetic, doubling the correct bits in each step.\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n        inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n        // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n        // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n        // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inverse;\\n    }\\n}\\n\\n/// @notice Calculates x*y\\u00f71e18 with 512-bit precision.\\n///\\n/// @dev A variant of {mulDiv} with constant folding, i.e. in which the denominator is hard coded to 1e18.\\n///\\n/// Notes:\\n/// - The body is purposely left uncommented; to understand how this works, see the documentation in {mulDiv}.\\n/// - The result is rounded toward zero.\\n/// - We take as an axiom that the result cannot be `MAX_UINT256` when x and y solve the following system of equations:\\n///\\n/// $$\\n/// \\\\begin{cases}\\n///     x * y = MAX\\\\_UINT256 * UNIT \\\\\\\\\\n///     (x * y) \\\\% UNIT \\\\geq \\\\frac{UNIT}{2}\\n/// \\\\end{cases}\\n/// $$\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {mulDiv}.\\n/// - The result must fit in uint256.\\n///\\n/// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n/// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n/// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mulDiv18(uint256 x, uint256 y) pure returns (uint256 result) {\\n    uint256 prod0;\\n    uint256 prod1;\\n    assembly (\\\"memory-safe\\\") {\\n        let mm := mulmod(x, y, not(0))\\n        prod0 := mul(x, y)\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n    }\\n\\n    if (prod1 == 0) {\\n        unchecked {\\n            return prod0 / UNIT;\\n        }\\n    }\\n\\n    if (prod1 >= UNIT) {\\n        revert PRBMath_MulDiv18_Overflow(x, y);\\n    }\\n\\n    uint256 remainder;\\n    assembly (\\\"memory-safe\\\") {\\n        remainder := mulmod(x, y, UNIT)\\n        result :=\\n            mul(\\n                or(\\n                    div(sub(prod0, remainder), UNIT_LPOTD),\\n                    mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, UNIT_LPOTD), UNIT_LPOTD), 1))\\n                ),\\n                UNIT_INVERSE\\n            )\\n    }\\n}\\n\\n/// @notice Calculates x*y\\u00f7denominator with 512-bit precision.\\n///\\n/// @dev This is an extension of {mulDiv} for signed numbers, which works by computing the signs and the absolute values separately.\\n///\\n/// Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {mulDiv}.\\n/// - None of the inputs can be `type(int256).min`.\\n/// - The result must fit in int256.\\n///\\n/// @param x The multiplicand as an int256.\\n/// @param y The multiplier as an int256.\\n/// @param denominator The divisor as an int256.\\n/// @return result The result as an int256.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mulDivSigned(int256 x, int256 y, int256 denominator) pure returns (int256 result) {\\n    if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n        revert PRBMath_MulDivSigned_InputTooSmall();\\n    }\\n\\n    // Get hold of the absolute values of x, y and the denominator.\\n    uint256 xAbs;\\n    uint256 yAbs;\\n    uint256 dAbs;\\n    unchecked {\\n        xAbs = x < 0 ? uint256(-x) : uint256(x);\\n        yAbs = y < 0 ? uint256(-y) : uint256(y);\\n        dAbs = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n    }\\n\\n    // Compute the absolute value of x*y\\u00f7denominator. The result must fit in int256.\\n    uint256 resultAbs = mulDiv(xAbs, yAbs, dAbs);\\n    if (resultAbs > uint256(type(int256).max)) {\\n        revert PRBMath_MulDivSigned_Overflow(x, y);\\n    }\\n\\n    // Get the signs of x, y and the denominator.\\n    uint256 sx;\\n    uint256 sy;\\n    uint256 sd;\\n    assembly (\\\"memory-safe\\\") {\\n        // \\\"sgt\\\" is the \\\"signed greater than\\\" assembly instruction and \\\"sub(0,1)\\\" is -1 in two's complement.\\n        sx := sgt(x, sub(0, 1))\\n        sy := sgt(y, sub(0, 1))\\n        sd := sgt(denominator, sub(0, 1))\\n    }\\n\\n    // XOR over sx, sy and sd. What this does is to check whether there are 1 or 3 negative signs in the inputs.\\n    // If there are, the result should be negative. Otherwise, it should be positive.\\n    unchecked {\\n        result = sx ^ sy ^ sd == 0 ? -int256(resultAbs) : int256(resultAbs);\\n    }\\n}\\n\\n/// @notice Calculates the square root of x using the Babylonian method.\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n///\\n/// Notes:\\n/// - If x is not a perfect square, the result is rounded down.\\n/// - Credits to OpenZeppelin for the explanations in comments below.\\n///\\n/// @param x The uint256 number for which to calculate the square root.\\n/// @return result The result as a uint256.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction sqrt(uint256 x) pure returns (uint256 result) {\\n    if (x == 0) {\\n        return 0;\\n    }\\n\\n    // For our first guess, we calculate the biggest power of 2 which is smaller than the square root of x.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of x is a power of 2 such that we have:\\n    //\\n    // $$\\n    // msb(x) <= x <= 2*msb(x)$\\n    // $$\\n    //\\n    // We write $msb(x)$ as $2^k$, and we get:\\n    //\\n    // $$\\n    // k = log_2(x)\\n    // $$\\n    //\\n    // Thus, we can write the initial inequality as:\\n    //\\n    // $$\\n    // 2^{log_2(x)} <= x <= 2*2^{log_2(x)+1} \\\\\\\\\\n    // sqrt(2^k) <= sqrt(x) < sqrt(2^{k+1}) \\\\\\\\\\n    // 2^{k/2} <= sqrt(x) < 2^{(k+1)/2} <= 2^{(k/2)+1}\\n    // $$\\n    //\\n    // Consequently, $2^{log_2(x) /2} is a good first approximation of sqrt(x) with at least one correct bit.\\n    uint256 xAux = uint256(x);\\n    result = 1;\\n    if (xAux >= 2 ** 128) {\\n        xAux >>= 128;\\n        result <<= 64;\\n    }\\n    if (xAux >= 2 ** 64) {\\n        xAux >>= 64;\\n        result <<= 32;\\n    }\\n    if (xAux >= 2 ** 32) {\\n        xAux >>= 32;\\n        result <<= 16;\\n    }\\n    if (xAux >= 2 ** 16) {\\n        xAux >>= 16;\\n        result <<= 8;\\n    }\\n    if (xAux >= 2 ** 8) {\\n        xAux >>= 8;\\n        result <<= 4;\\n    }\\n    if (xAux >= 2 ** 4) {\\n        xAux >>= 4;\\n        result <<= 2;\\n    }\\n    if (xAux >= 2 ** 2) {\\n        result <<= 1;\\n    }\\n\\n    // At this point, `result` is an estimation with at least one bit of precision. We know the true value has at\\n    // most 128 bits, since it is the square root of a uint256. Newton's method converges quadratically (precision\\n    // doubles at every iteration). We thus need at most 7 iteration to turn our partial result with one bit of\\n    // precision into the expected uint128 result.\\n    unchecked {\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n        result = (result + x / result) >> 1;\\n\\n        // If x is not a perfect square, round the result toward zero.\\n        uint256 roundedResult = x / result;\\n        if (result >= roundedResult) {\\n            result = roundedResult;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x70b3a76443312b2c6c500996306a18e3d91e5d56fed0d898d98ca0bfb6225053\",\"license\":\"MIT\"},\"@prb/math/src/UD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\n/*\\n\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u255a\\u2550\\u2550\\u2588\\u2588\\u2554\\u2550\\u2550\\u255d\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2588\\u2588\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u255d \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2551\\n\\u2588\\u2588\\u2551     \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551 \\u255a\\u2550\\u255d \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\n\\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u255d     \\u255a\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d   \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d\\n\\n\\u2588\\u2588\\u2557   \\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557  \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d \\u2588\\u2588\\u2554\\u2550\\u2588\\u2588\\u2588\\u2588\\u2557\\u255a\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557 \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2588\\u2588\\u2551 \\u255a\\u2588\\u2588\\u2588\\u2554\\u255d \\u255a\\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551 \\u2588\\u2588\\u2554\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2551\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\n\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2557 \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d  \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d \\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n*/\\n\\nimport \\\"./ud60x18/Casting.sol\\\";\\nimport \\\"./ud60x18/Constants.sol\\\";\\nimport \\\"./ud60x18/Conversions.sol\\\";\\nimport \\\"./ud60x18/Errors.sol\\\";\\nimport \\\"./ud60x18/Helpers.sol\\\";\\nimport \\\"./ud60x18/Math.sol\\\";\\nimport \\\"./ud60x18/ValueType.sol\\\";\\n\",\"keccak256\":\"0xb98c6f74275914d279e8af6c502c2b1f50d5f6e1ed418d3b0153f5a193206c48\",\"license\":\"MIT\"},\"@prb/math/src/sd1x18/Casting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"../Common.sol\\\" as Common;\\nimport \\\"./Errors.sol\\\" as CastingErrors;\\nimport { SD59x18 } from \\\"../sd59x18/ValueType.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"../ud60x18/ValueType.sol\\\";\\nimport { SD1x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts an SD1x18 number into SD59x18.\\n/// @dev There is no overflow check because the domain of SD1x18 is a subset of SD59x18.\\nfunction intoSD59x18(SD1x18 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(int256(SD1x18.unwrap(x)));\\n}\\n\\n/// @notice Casts an SD1x18 number into UD2x18.\\n/// - x must be positive.\\nfunction intoUD2x18(SD1x18 x) pure returns (UD2x18 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUD2x18_Underflow(x);\\n    }\\n    result = UD2x18.wrap(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into UD60x18.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUD60x18(SD1x18 x) pure returns (UD60x18 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUD60x18_Underflow(x);\\n    }\\n    result = UD60x18.wrap(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into uint256.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUint256(SD1x18 x) pure returns (uint256 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUint256_Underflow(x);\\n    }\\n    result = uint256(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into uint128.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUint128(SD1x18 x) pure returns (uint128 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUint128_Underflow(x);\\n    }\\n    result = uint128(uint64(xInt));\\n}\\n\\n/// @notice Casts an SD1x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(SD1x18 x) pure returns (uint40 result) {\\n    int64 xInt = SD1x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUint40_Underflow(x);\\n    }\\n    if (xInt > int64(uint64(Common.MAX_UINT40))) {\\n        revert CastingErrors.PRBMath_SD1x18_ToUint40_Overflow(x);\\n    }\\n    result = uint40(uint64(xInt));\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction sd1x18(int64 x) pure returns (SD1x18 result) {\\n    result = SD1x18.wrap(x);\\n}\\n\\n/// @notice Unwraps an SD1x18 number into int64.\\nfunction unwrap(SD1x18 x) pure returns (int64 result) {\\n    result = SD1x18.unwrap(x);\\n}\\n\\n/// @notice Wraps an int64 number into SD1x18.\\nfunction wrap(int64 x) pure returns (SD1x18 result) {\\n    result = SD1x18.wrap(x);\\n}\\n\",\"keccak256\":\"0x9e49e2b37c1bb845861740805edaaef3fe951a7b96eef16ce84fbf76e8278670\",\"license\":\"MIT\"},\"@prb/math/src/sd1x18/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { SD1x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @dev Euler's number as an SD1x18 number.\\nSD1x18 constant E = SD1x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum value an SD1x18 number can have.\\nint64 constant uMAX_SD1x18 = 9_223372036854775807;\\nSD1x18 constant MAX_SD1x18 = SD1x18.wrap(uMAX_SD1x18);\\n\\n/// @dev The maximum value an SD1x18 number can have.\\nint64 constant uMIN_SD1x18 = -9_223372036854775808;\\nSD1x18 constant MIN_SD1x18 = SD1x18.wrap(uMIN_SD1x18);\\n\\n/// @dev PI as an SD1x18 number.\\nSD1x18 constant PI = SD1x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit number, which gives the decimal precision of SD1x18.\\nSD1x18 constant UNIT = SD1x18.wrap(1e18);\\nint256 constant uUNIT = 1e18;\\n\",\"keccak256\":\"0xb51aab4a2ea76f530dccbf3b7d4af24c8f3ceef67f3c574b58650466ea924a3f\",\"license\":\"MIT\"},\"@prb/math/src/sd1x18/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { SD1x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in UD2x18.\\nerror PRBMath_SD1x18_ToUD2x18_Underflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in UD60x18.\\nerror PRBMath_SD1x18_ToUD60x18_Underflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in uint128.\\nerror PRBMath_SD1x18_ToUint128_Underflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in uint256.\\nerror PRBMath_SD1x18_ToUint256_Underflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in uint40.\\nerror PRBMath_SD1x18_ToUint40_Overflow(SD1x18 x);\\n\\n/// @notice Thrown when trying to cast a SD1x18 number that doesn't fit in uint40.\\nerror PRBMath_SD1x18_ToUint40_Underflow(SD1x18 x);\\n\",\"keccak256\":\"0x836cb42ba619ca369fd4765bc47fefc3c3621369c5861882af14660aca5057ee\",\"license\":\"MIT\"},\"@prb/math/src/sd1x18/ValueType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Casting.sol\\\" as Casting;\\n\\n/// @notice The signed 1.18-decimal fixed-point number representation, which can have up to 1 digit and up to 18\\n/// decimals. The values of this are bound by the minimum and the maximum values permitted by the underlying Solidity\\n/// type int64. This is useful when end users want to use int64 to save gas, e.g. with tight variable packing in contract\\n/// storage.\\ntype SD1x18 is int64;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Casting.intoSD59x18,\\n    Casting.intoUD2x18,\\n    Casting.intoUD60x18,\\n    Casting.intoUint256,\\n    Casting.intoUint128,\\n    Casting.intoUint40,\\n    Casting.unwrap\\n} for SD1x18 global;\\n\",\"keccak256\":\"0x2f86f1aa9fca42f40808b51a879b406ac51817647bdb9642f8a79dd8fdb754a7\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Casting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Errors.sol\\\" as CastingErrors;\\nimport { MAX_UINT128, MAX_UINT40 } from \\\"../Common.sol\\\";\\nimport { uMAX_SD1x18, uMIN_SD1x18 } from \\\"../sd1x18/Constants.sol\\\";\\nimport { SD1x18 } from \\\"../sd1x18/ValueType.sol\\\";\\nimport { uMAX_UD2x18 } from \\\"../ud2x18/Constants.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"../ud60x18/ValueType.sol\\\";\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts an SD59x18 number into int256.\\n/// @dev This is basically a functional alias for {unwrap}.\\nfunction intoInt256(SD59x18 x) pure returns (int256 result) {\\n    result = SD59x18.unwrap(x);\\n}\\n\\n/// @notice Casts an SD59x18 number into SD1x18.\\n/// @dev Requirements:\\n/// - x must be greater than or equal to `uMIN_SD1x18`.\\n/// - x must be less than or equal to `uMAX_SD1x18`.\\nfunction intoSD1x18(SD59x18 x) pure returns (SD1x18 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < uMIN_SD1x18) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoSD1x18_Underflow(x);\\n    }\\n    if (xInt > uMAX_SD1x18) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoSD1x18_Overflow(x);\\n    }\\n    result = SD1x18.wrap(int64(xInt));\\n}\\n\\n/// @notice Casts an SD59x18 number into UD2x18.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `uMAX_UD2x18`.\\nfunction intoUD2x18(SD59x18 x) pure returns (UD2x18 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUD2x18_Underflow(x);\\n    }\\n    if (xInt > int256(uint256(uMAX_UD2x18))) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUD2x18_Overflow(x);\\n    }\\n    result = UD2x18.wrap(uint64(uint256(xInt)));\\n}\\n\\n/// @notice Casts an SD59x18 number into UD60x18.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUD60x18(SD59x18 x) pure returns (UD60x18 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUD60x18_Underflow(x);\\n    }\\n    result = UD60x18.wrap(uint256(xInt));\\n}\\n\\n/// @notice Casts an SD59x18 number into uint256.\\n/// @dev Requirements:\\n/// - x must be positive.\\nfunction intoUint256(SD59x18 x) pure returns (uint256 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint256_Underflow(x);\\n    }\\n    result = uint256(xInt);\\n}\\n\\n/// @notice Casts an SD59x18 number into uint128.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `uMAX_UINT128`.\\nfunction intoUint128(SD59x18 x) pure returns (uint128 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint128_Underflow(x);\\n    }\\n    if (xInt > int256(uint256(MAX_UINT128))) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint128_Overflow(x);\\n    }\\n    result = uint128(uint256(xInt));\\n}\\n\\n/// @notice Casts an SD59x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be positive.\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(SD59x18 x) pure returns (uint40 result) {\\n    int256 xInt = SD59x18.unwrap(x);\\n    if (xInt < 0) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint40_Underflow(x);\\n    }\\n    if (xInt > int256(uint256(MAX_UINT40))) {\\n        revert CastingErrors.PRBMath_SD59x18_IntoUint40_Overflow(x);\\n    }\\n    result = uint40(uint256(xInt));\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction sd(int256 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(x);\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction sd59x18(int256 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(x);\\n}\\n\\n/// @notice Unwraps an SD59x18 number into int256.\\nfunction unwrap(SD59x18 x) pure returns (int256 result) {\\n    result = SD59x18.unwrap(x);\\n}\\n\\n/// @notice Wraps an int256 number into SD59x18.\\nfunction wrap(int256 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(x);\\n}\\n\",\"keccak256\":\"0x3b21b60ec2998c3ae32f647412da51d3683b3f183a807198cc8d157499484f99\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n// NOTICE: the \\\"u\\\" prefix stands for \\\"unwrapped\\\".\\n\\n/// @dev Euler's number as an SD59x18 number.\\nSD59x18 constant E = SD59x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum input permitted in {exp}.\\nint256 constant uEXP_MAX_INPUT = 133_084258667509499440;\\nSD59x18 constant EXP_MAX_INPUT = SD59x18.wrap(uEXP_MAX_INPUT);\\n\\n/// @dev The maximum input permitted in {exp2}.\\nint256 constant uEXP2_MAX_INPUT = 192e18 - 1;\\nSD59x18 constant EXP2_MAX_INPUT = SD59x18.wrap(uEXP2_MAX_INPUT);\\n\\n/// @dev Half the UNIT number.\\nint256 constant uHALF_UNIT = 0.5e18;\\nSD59x18 constant HALF_UNIT = SD59x18.wrap(uHALF_UNIT);\\n\\n/// @dev $log_2(10)$ as an SD59x18 number.\\nint256 constant uLOG2_10 = 3_321928094887362347;\\nSD59x18 constant LOG2_10 = SD59x18.wrap(uLOG2_10);\\n\\n/// @dev $log_2(e)$ as an SD59x18 number.\\nint256 constant uLOG2_E = 1_442695040888963407;\\nSD59x18 constant LOG2_E = SD59x18.wrap(uLOG2_E);\\n\\n/// @dev The maximum value an SD59x18 number can have.\\nint256 constant uMAX_SD59x18 = 57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\nSD59x18 constant MAX_SD59x18 = SD59x18.wrap(uMAX_SD59x18);\\n\\n/// @dev The maximum whole value an SD59x18 number can have.\\nint256 constant uMAX_WHOLE_SD59x18 = 57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\nSD59x18 constant MAX_WHOLE_SD59x18 = SD59x18.wrap(uMAX_WHOLE_SD59x18);\\n\\n/// @dev The minimum value an SD59x18 number can have.\\nint256 constant uMIN_SD59x18 = -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\nSD59x18 constant MIN_SD59x18 = SD59x18.wrap(uMIN_SD59x18);\\n\\n/// @dev The minimum whole value an SD59x18 number can have.\\nint256 constant uMIN_WHOLE_SD59x18 = -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\nSD59x18 constant MIN_WHOLE_SD59x18 = SD59x18.wrap(uMIN_WHOLE_SD59x18);\\n\\n/// @dev PI as an SD59x18 number.\\nSD59x18 constant PI = SD59x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit number, which gives the decimal precision of SD59x18.\\nint256 constant uUNIT = 1e18;\\nSD59x18 constant UNIT = SD59x18.wrap(1e18);\\n\\n/// @dev The unit number squared.\\nint256 constant uUNIT_SQUARED = 1e36;\\nSD59x18 constant UNIT_SQUARED = SD59x18.wrap(uUNIT_SQUARED);\\n\\n/// @dev Zero as an SD59x18 number.\\nSD59x18 constant ZERO = SD59x18.wrap(0);\\n\",\"keccak256\":\"0xe0a1ca1a7b5b2d637cff83a8caa3d2e67a6a34f7ee9df58a9ca5d5fa268c474a\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Thrown when taking the absolute value of `MIN_SD59x18`.\\nerror PRBMath_SD59x18_Abs_MinSD59x18();\\n\\n/// @notice Thrown when ceiling a number overflows SD59x18.\\nerror PRBMath_SD59x18_Ceil_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMath_SD59x18_Convert_Overflow(int256 x);\\n\\n/// @notice Thrown when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMath_SD59x18_Convert_Underflow(int256 x);\\n\\n/// @notice Thrown when dividing two numbers and one of them is `MIN_SD59x18`.\\nerror PRBMath_SD59x18_Div_InputTooSmall();\\n\\n/// @notice Thrown when dividing two numbers and one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMath_SD59x18_Div_Overflow(SD59x18 x, SD59x18 y);\\n\\n/// @notice Thrown when taking the natural exponent of a base greater than 133_084258667509499441.\\nerror PRBMath_SD59x18_Exp_InputTooBig(SD59x18 x);\\n\\n/// @notice Thrown when taking the binary exponent of a base greater than 192e18.\\nerror PRBMath_SD59x18_Exp2_InputTooBig(SD59x18 x);\\n\\n/// @notice Thrown when flooring a number underflows SD59x18.\\nerror PRBMath_SD59x18_Floor_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when taking the geometric mean of two numbers and their product is negative.\\nerror PRBMath_SD59x18_Gm_NegativeProduct(SD59x18 x, SD59x18 y);\\n\\n/// @notice Thrown when taking the geometric mean of two numbers and multiplying them overflows SD59x18.\\nerror PRBMath_SD59x18_Gm_Overflow(SD59x18 x, SD59x18 y);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in SD1x18.\\nerror PRBMath_SD59x18_IntoSD1x18_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in SD1x18.\\nerror PRBMath_SD59x18_IntoSD1x18_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in UD2x18.\\nerror PRBMath_SD59x18_IntoUD2x18_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in UD2x18.\\nerror PRBMath_SD59x18_IntoUD2x18_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in UD60x18.\\nerror PRBMath_SD59x18_IntoUD60x18_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint128.\\nerror PRBMath_SD59x18_IntoUint128_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint128.\\nerror PRBMath_SD59x18_IntoUint128_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint256.\\nerror PRBMath_SD59x18_IntoUint256_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint40.\\nerror PRBMath_SD59x18_IntoUint40_Overflow(SD59x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint40.\\nerror PRBMath_SD59x18_IntoUint40_Underflow(SD59x18 x);\\n\\n/// @notice Thrown when taking the logarithm of a number less than or equal to zero.\\nerror PRBMath_SD59x18_Log_InputTooSmall(SD59x18 x);\\n\\n/// @notice Thrown when multiplying two numbers and one of the inputs is `MIN_SD59x18`.\\nerror PRBMath_SD59x18_Mul_InputTooSmall();\\n\\n/// @notice Thrown when multiplying two numbers and the intermediary absolute result overflows SD59x18.\\nerror PRBMath_SD59x18_Mul_Overflow(SD59x18 x, SD59x18 y);\\n\\n/// @notice Thrown when raising a number to a power and hte intermediary absolute result overflows SD59x18.\\nerror PRBMath_SD59x18_Powu_Overflow(SD59x18 x, uint256 y);\\n\\n/// @notice Thrown when taking the square root of a negative number.\\nerror PRBMath_SD59x18_Sqrt_NegativeInput(SD59x18 x);\\n\\n/// @notice Thrown when the calculating the square root overflows SD59x18.\\nerror PRBMath_SD59x18_Sqrt_Overflow(SD59x18 x);\\n\",\"keccak256\":\"0x83ee24e41d235bc05cb641d2c5c16c67b17fa00e4593661a8d14350435d4df04\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { wrap } from \\\"./Casting.sol\\\";\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Implements the checked addition operation (+) in the SD59x18 type.\\nfunction add(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    return wrap(x.unwrap() + y.unwrap());\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the SD59x18 type.\\nfunction and(SD59x18 x, int256 bits) pure returns (SD59x18 result) {\\n    return wrap(x.unwrap() & bits);\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the SD59x18 type.\\nfunction and2(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    return wrap(x.unwrap() & y.unwrap());\\n}\\n\\n/// @notice Implements the equal (=) operation in the SD59x18 type.\\nfunction eq(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() == y.unwrap();\\n}\\n\\n/// @notice Implements the greater than operation (>) in the SD59x18 type.\\nfunction gt(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() > y.unwrap();\\n}\\n\\n/// @notice Implements the greater than or equal to operation (>=) in the SD59x18 type.\\nfunction gte(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() >= y.unwrap();\\n}\\n\\n/// @notice Implements a zero comparison check function in the SD59x18 type.\\nfunction isZero(SD59x18 x) pure returns (bool result) {\\n    result = x.unwrap() == 0;\\n}\\n\\n/// @notice Implements the left shift operation (<<) in the SD59x18 type.\\nfunction lshift(SD59x18 x, uint256 bits) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() << bits);\\n}\\n\\n/// @notice Implements the lower than operation (<) in the SD59x18 type.\\nfunction lt(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() < y.unwrap();\\n}\\n\\n/// @notice Implements the lower than or equal to operation (<=) in the SD59x18 type.\\nfunction lte(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() <= y.unwrap();\\n}\\n\\n/// @notice Implements the unchecked modulo operation (%) in the SD59x18 type.\\nfunction mod(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() % y.unwrap());\\n}\\n\\n/// @notice Implements the not equal operation (!=) in the SD59x18 type.\\nfunction neq(SD59x18 x, SD59x18 y) pure returns (bool result) {\\n    result = x.unwrap() != y.unwrap();\\n}\\n\\n/// @notice Implements the NOT (~) bitwise operation in the SD59x18 type.\\nfunction not(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(~x.unwrap());\\n}\\n\\n/// @notice Implements the OR (|) bitwise operation in the SD59x18 type.\\nfunction or(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() | y.unwrap());\\n}\\n\\n/// @notice Implements the right shift operation (>>) in the SD59x18 type.\\nfunction rshift(SD59x18 x, uint256 bits) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() >> bits);\\n}\\n\\n/// @notice Implements the checked subtraction operation (-) in the SD59x18 type.\\nfunction sub(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() - y.unwrap());\\n}\\n\\n/// @notice Implements the checked unary minus operation (-) in the SD59x18 type.\\nfunction unary(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(-x.unwrap());\\n}\\n\\n/// @notice Implements the unchecked addition operation (+) in the SD59x18 type.\\nfunction uncheckedAdd(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    unchecked {\\n        result = wrap(x.unwrap() + y.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the unchecked subtraction operation (-) in the SD59x18 type.\\nfunction uncheckedSub(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    unchecked {\\n        result = wrap(x.unwrap() - y.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the unchecked unary minus operation (-) in the SD59x18 type.\\nfunction uncheckedUnary(SD59x18 x) pure returns (SD59x18 result) {\\n    unchecked {\\n        result = wrap(-x.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the XOR (^) bitwise operation in the SD59x18 type.\\nfunction xor(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() ^ y.unwrap());\\n}\\n\",\"keccak256\":\"0x208570f1657cf730cb6c3d81aa14030e0d45cf906cdedea5059369d7df4bb716\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"../Common.sol\\\" as Common;\\nimport \\\"./Errors.sol\\\" as Errors;\\nimport {\\n    uEXP_MAX_INPUT,\\n    uEXP2_MAX_INPUT,\\n    uHALF_UNIT,\\n    uLOG2_10,\\n    uLOG2_E,\\n    uMAX_SD59x18,\\n    uMAX_WHOLE_SD59x18,\\n    uMIN_SD59x18,\\n    uMIN_WHOLE_SD59x18,\\n    UNIT,\\n    uUNIT,\\n    uUNIT_SQUARED,\\n    ZERO\\n} from \\\"./Constants.sol\\\";\\nimport { wrap } from \\\"./Helpers.sol\\\";\\nimport { SD59x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Calculates the absolute value of x.\\n///\\n/// @dev Requirements:\\n/// - x must be greater than `MIN_SD59x18`.\\n///\\n/// @param x The SD59x18 number for which to calculate the absolute value.\\n/// @param result The absolute value of x as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction abs(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt == uMIN_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Abs_MinSD59x18();\\n    }\\n    result = xInt < 0 ? wrap(-xInt) : x;\\n}\\n\\n/// @notice Calculates the arithmetic average of x and y.\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// @param x The first operand as an SD59x18 number.\\n/// @param y The second operand as an SD59x18 number.\\n/// @return result The arithmetic average as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction avg(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n\\n    unchecked {\\n        // This operation is equivalent to `x / 2 +  y / 2`, and it can never overflow.\\n        int256 sum = (xInt >> 1) + (yInt >> 1);\\n\\n        if (sum < 0) {\\n            // If at least one of x and y is odd, add 1 to the result, because shifting negative numbers to the right\\n            // rounds toward negative infinity. The right part is equivalent to `sum + (x % 2 == 1 || y % 2 == 1)`.\\n            assembly (\\\"memory-safe\\\") {\\n                result := add(sum, and(or(xInt, yInt), 1))\\n            }\\n        } else {\\n            // Add 1 if both x and y are odd to account for the double 0.5 remainder truncated after shifting.\\n            result = wrap(sum + (xInt & yInt & 1));\\n        }\\n    }\\n}\\n\\n/// @notice Yields the smallest whole number greater than or equal to x.\\n///\\n/// @dev Optimized for fractional value inputs, because every whole value has (1e18 - 1) fractional counterparts.\\n/// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n///\\n/// Requirements:\\n/// - x must be less than or equal to `MAX_WHOLE_SD59x18`.\\n///\\n/// @param x The SD59x18 number to ceil.\\n/// @param result The smallest whole number greater than or equal to x, as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction ceil(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt > uMAX_WHOLE_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Ceil_Overflow(x);\\n    }\\n\\n    int256 remainder = xInt % uUNIT;\\n    if (remainder == 0) {\\n        result = x;\\n    } else {\\n        unchecked {\\n            // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n            int256 resultInt = xInt - remainder;\\n            if (xInt > 0) {\\n                resultInt += uUNIT;\\n            }\\n            result = wrap(resultInt);\\n        }\\n    }\\n}\\n\\n/// @notice Divides two SD59x18 numbers, returning a new SD59x18 number.\\n///\\n/// @dev This is an extension of {Common.mulDiv} for signed numbers, which works by computing the signs and the absolute\\n/// values separately.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv}.\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {Common.mulDiv}.\\n/// - None of the inputs can be `MIN_SD59x18`.\\n/// - The denominator must not be zero.\\n/// - The result must fit in SD59x18.\\n///\\n/// @param x The numerator as an SD59x18 number.\\n/// @param y The denominator as an SD59x18 number.\\n/// @param result The quotient as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction div(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n    if (xInt == uMIN_SD59x18 || yInt == uMIN_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Div_InputTooSmall();\\n    }\\n\\n    // Get hold of the absolute values of x and y.\\n    uint256 xAbs;\\n    uint256 yAbs;\\n    unchecked {\\n        xAbs = xInt < 0 ? uint256(-xInt) : uint256(xInt);\\n        yAbs = yInt < 0 ? uint256(-yInt) : uint256(yInt);\\n    }\\n\\n    // Compute the absolute value (x*UNIT\\u00f7y). The resulting value must fit in SD59x18.\\n    uint256 resultAbs = Common.mulDiv(xAbs, uint256(uUNIT), yAbs);\\n    if (resultAbs > uint256(uMAX_SD59x18)) {\\n        revert Errors.PRBMath_SD59x18_Div_Overflow(x, y);\\n    }\\n\\n    // Check if x and y have the same sign using two's complement representation. The left-most bit represents the sign (1 for\\n    // negative, 0 for positive or zero).\\n    bool sameSign = (xInt ^ yInt) > -1;\\n\\n    // If the inputs have the same sign, the result should be positive. Otherwise, it should be negative.\\n    unchecked {\\n        result = wrap(sameSign ? int256(resultAbs) : -int256(resultAbs));\\n    }\\n}\\n\\n/// @notice Calculates the natural exponent of x using the following formula:\\n///\\n/// $$\\n/// e^x = 2^{x * log_2{e}}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {exp2}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {exp2}.\\n/// - x must be less than 133_084258667509499441.\\n///\\n/// @param x The exponent as an SD59x18 number.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n\\n    // This check prevents values greater than 192e18 from being passed to {exp2}.\\n    if (xInt > uEXP_MAX_INPUT) {\\n        revert Errors.PRBMath_SD59x18_Exp_InputTooBig(x);\\n    }\\n\\n    unchecked {\\n        // Inline the fixed-point multiplication to save gas.\\n        int256 doubleUnitProduct = xInt * uLOG2_E;\\n        result = exp2(wrap(doubleUnitProduct / uUNIT));\\n    }\\n}\\n\\n/// @notice Calculates the binary exponent of x using the binary fraction method using the following formula:\\n///\\n/// $$\\n/// 2^{-x} = \\\\frac{1}{2^x}\\n/// $$\\n///\\n/// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n///\\n/// Notes:\\n/// - If x is less than -59_794705707972522261, the result is zero.\\n///\\n/// Requirements:\\n/// - x must be less than 192e18.\\n/// - The result must fit in SD59x18.\\n///\\n/// @param x The exponent as an SD59x18 number.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp2(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt < 0) {\\n        // The inverse of any number less than this is truncated to zero.\\n        if (xInt < -59_794705707972522261) {\\n            return ZERO;\\n        }\\n\\n        unchecked {\\n            // Inline the fixed-point inversion to save gas.\\n            result = wrap(uUNIT_SQUARED / exp2(wrap(-xInt)).unwrap());\\n        }\\n    } else {\\n        // Numbers greater than or equal to 192e18 don't fit in the 192.64-bit format.\\n        if (xInt > uEXP2_MAX_INPUT) {\\n            revert Errors.PRBMath_SD59x18_Exp2_InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x_192x64 = uint256((xInt << 64) / uUNIT);\\n\\n            // It is safe to cast the result to int256 due to the checks above.\\n            result = wrap(int256(Common.exp2(x_192x64)));\\n        }\\n    }\\n}\\n\\n/// @notice Yields the greatest whole number less than or equal to x.\\n///\\n/// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional\\n/// counterparts. See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n///\\n/// Requirements:\\n/// - x must be greater than or equal to `MIN_WHOLE_SD59x18`.\\n///\\n/// @param x The SD59x18 number to floor.\\n/// @param result The greatest whole number less than or equal to x, as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction floor(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt < uMIN_WHOLE_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Floor_Underflow(x);\\n    }\\n\\n    int256 remainder = xInt % uUNIT;\\n    if (remainder == 0) {\\n        result = x;\\n    } else {\\n        unchecked {\\n            // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n            int256 resultInt = xInt - remainder;\\n            if (xInt < 0) {\\n                resultInt -= uUNIT;\\n            }\\n            result = wrap(resultInt);\\n        }\\n    }\\n}\\n\\n/// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right.\\n/// of the radix point for negative numbers.\\n/// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n/// @param x The SD59x18 number to get the fractional part of.\\n/// @param result The fractional part of x as an SD59x18 number.\\nfunction frac(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(x.unwrap() % uUNIT);\\n}\\n\\n/// @notice Calculates the geometric mean of x and y, i.e. $\\\\sqrt{x * y}$.\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x * y must fit in SD59x18.\\n/// - x * y must not be negative, since complex numbers are not supported.\\n///\\n/// @param x The first operand as an SD59x18 number.\\n/// @param y The second operand as an SD59x18 number.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction gm(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n    if (xInt == 0 || yInt == 0) {\\n        return ZERO;\\n    }\\n\\n    unchecked {\\n        // Equivalent to `xy / x != y`. Checking for overflow this way is faster than letting Solidity do it.\\n        int256 xyInt = xInt * yInt;\\n        if (xyInt / xInt != yInt) {\\n            revert Errors.PRBMath_SD59x18_Gm_Overflow(x, y);\\n        }\\n\\n        // The product must not be negative, since complex numbers are not supported.\\n        if (xyInt < 0) {\\n            revert Errors.PRBMath_SD59x18_Gm_NegativeProduct(x, y);\\n        }\\n\\n        // We don't need to multiply the result by `UNIT` here because the x*y product picked up a factor of `UNIT`\\n        // during multiplication. See the comments in {Common.sqrt}.\\n        uint256 resultUint = Common.sqrt(uint256(xyInt));\\n        result = wrap(int256(resultUint));\\n    }\\n}\\n\\n/// @notice Calculates the inverse of x.\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x must not be zero.\\n///\\n/// @param x The SD59x18 number for which to calculate the inverse.\\n/// @return result The inverse as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction inv(SD59x18 x) pure returns (SD59x18 result) {\\n    result = wrap(uUNIT_SQUARED / x.unwrap());\\n}\\n\\n/// @notice Calculates the natural logarithm of x using the following formula:\\n///\\n/// $$\\n/// ln{x} = log_2{x} / log_2{e}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2}.\\n/// - The precision isn't sufficiently fine-grained to return exactly `UNIT` when the input is `E`.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {log2}.\\n///\\n/// @param x The SD59x18 number for which to calculate the natural logarithm.\\n/// @return result The natural logarithm as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction ln(SD59x18 x) pure returns (SD59x18 result) {\\n    // Inline the fixed-point multiplication to save gas. This is overflow-safe because the maximum value that\\n    // {log2} can return is ~195_205294292027477728.\\n    result = wrap(log2(x).unwrap() * uUNIT / uLOG2_E);\\n}\\n\\n/// @notice Calculates the common logarithm of x using the following formula:\\n///\\n/// $$\\n/// log_{10}{x} = log_2{x} / log_2{10}\\n/// $$\\n///\\n/// However, if x is an exact power of ten, a hard coded value is returned.\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {log2}.\\n///\\n/// @param x The SD59x18 number for which to calculate the common logarithm.\\n/// @return result The common logarithm as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction log10(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt < 0) {\\n        revert Errors.PRBMath_SD59x18_Log_InputTooSmall(x);\\n    }\\n\\n    // Note that the `mul` in this block is the standard multiplication operation, not {SD59x18.mul}.\\n    // prettier-ignore\\n    assembly (\\\"memory-safe\\\") {\\n        switch x\\n        case 1 { result := mul(uUNIT, sub(0, 18)) }\\n        case 10 { result := mul(uUNIT, sub(1, 18)) }\\n        case 100 { result := mul(uUNIT, sub(2, 18)) }\\n        case 1000 { result := mul(uUNIT, sub(3, 18)) }\\n        case 10000 { result := mul(uUNIT, sub(4, 18)) }\\n        case 100000 { result := mul(uUNIT, sub(5, 18)) }\\n        case 1000000 { result := mul(uUNIT, sub(6, 18)) }\\n        case 10000000 { result := mul(uUNIT, sub(7, 18)) }\\n        case 100000000 { result := mul(uUNIT, sub(8, 18)) }\\n        case 1000000000 { result := mul(uUNIT, sub(9, 18)) }\\n        case 10000000000 { result := mul(uUNIT, sub(10, 18)) }\\n        case 100000000000 { result := mul(uUNIT, sub(11, 18)) }\\n        case 1000000000000 { result := mul(uUNIT, sub(12, 18)) }\\n        case 10000000000000 { result := mul(uUNIT, sub(13, 18)) }\\n        case 100000000000000 { result := mul(uUNIT, sub(14, 18)) }\\n        case 1000000000000000 { result := mul(uUNIT, sub(15, 18)) }\\n        case 10000000000000000 { result := mul(uUNIT, sub(16, 18)) }\\n        case 100000000000000000 { result := mul(uUNIT, sub(17, 18)) }\\n        case 1000000000000000000 { result := 0 }\\n        case 10000000000000000000 { result := uUNIT }\\n        case 100000000000000000000 { result := mul(uUNIT, 2) }\\n        case 1000000000000000000000 { result := mul(uUNIT, 3) }\\n        case 10000000000000000000000 { result := mul(uUNIT, 4) }\\n        case 100000000000000000000000 { result := mul(uUNIT, 5) }\\n        case 1000000000000000000000000 { result := mul(uUNIT, 6) }\\n        case 10000000000000000000000000 { result := mul(uUNIT, 7) }\\n        case 100000000000000000000000000 { result := mul(uUNIT, 8) }\\n        case 1000000000000000000000000000 { result := mul(uUNIT, 9) }\\n        case 10000000000000000000000000000 { result := mul(uUNIT, 10) }\\n        case 100000000000000000000000000000 { result := mul(uUNIT, 11) }\\n        case 1000000000000000000000000000000 { result := mul(uUNIT, 12) }\\n        case 10000000000000000000000000000000 { result := mul(uUNIT, 13) }\\n        case 100000000000000000000000000000000 { result := mul(uUNIT, 14) }\\n        case 1000000000000000000000000000000000 { result := mul(uUNIT, 15) }\\n        case 10000000000000000000000000000000000 { result := mul(uUNIT, 16) }\\n        case 100000000000000000000000000000000000 { result := mul(uUNIT, 17) }\\n        case 1000000000000000000000000000000000000 { result := mul(uUNIT, 18) }\\n        case 10000000000000000000000000000000000000 { result := mul(uUNIT, 19) }\\n        case 100000000000000000000000000000000000000 { result := mul(uUNIT, 20) }\\n        case 1000000000000000000000000000000000000000 { result := mul(uUNIT, 21) }\\n        case 10000000000000000000000000000000000000000 { result := mul(uUNIT, 22) }\\n        case 100000000000000000000000000000000000000000 { result := mul(uUNIT, 23) }\\n        case 1000000000000000000000000000000000000000000 { result := mul(uUNIT, 24) }\\n        case 10000000000000000000000000000000000000000000 { result := mul(uUNIT, 25) }\\n        case 100000000000000000000000000000000000000000000 { result := mul(uUNIT, 26) }\\n        case 1000000000000000000000000000000000000000000000 { result := mul(uUNIT, 27) }\\n        case 10000000000000000000000000000000000000000000000 { result := mul(uUNIT, 28) }\\n        case 100000000000000000000000000000000000000000000000 { result := mul(uUNIT, 29) }\\n        case 1000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 30) }\\n        case 10000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 31) }\\n        case 100000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 32) }\\n        case 1000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 33) }\\n        case 10000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 34) }\\n        case 100000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 35) }\\n        case 1000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 36) }\\n        case 10000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 37) }\\n        case 100000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 38) }\\n        case 1000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 39) }\\n        case 10000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 40) }\\n        case 100000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 41) }\\n        case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 42) }\\n        case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 43) }\\n        case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 44) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 45) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 46) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 47) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 48) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 49) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 50) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 51) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 52) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 53) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 54) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 55) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 56) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 57) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 58) }\\n        default { result := uMAX_SD59x18 }\\n    }\\n\\n    if (result.unwrap() == uMAX_SD59x18) {\\n        unchecked {\\n            // Inline the fixed-point division to save gas.\\n            result = wrap(log2(x).unwrap() * uUNIT / uLOG2_10);\\n        }\\n    }\\n}\\n\\n/// @notice Calculates the binary logarithm of x using the iterative approximation algorithm:\\n///\\n/// $$\\n/// log_2{x} = n + log_2{y}, \\\\text{ where } y = x*2^{-n}, \\\\ y \\\\in [1, 2)\\n/// $$\\n///\\n/// For $0 \\\\leq x \\\\lt 1$, the input is inverted:\\n///\\n/// $$\\n/// log_2{x} = -log_2{\\\\frac{1}{x}}\\n/// $$\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation.\\n///\\n/// Notes:\\n/// - Due to the lossy precision of the iterative approximation, the results are not perfectly accurate to the last decimal.\\n///\\n/// Requirements:\\n/// - x must be greater than zero.\\n///\\n/// @param x The SD59x18 number for which to calculate the binary logarithm.\\n/// @return result The binary logarithm as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction log2(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt <= 0) {\\n        revert Errors.PRBMath_SD59x18_Log_InputTooSmall(x);\\n    }\\n\\n    unchecked {\\n        int256 sign;\\n        if (xInt >= uUNIT) {\\n            sign = 1;\\n        } else {\\n            sign = -1;\\n            // Inline the fixed-point inversion to save gas.\\n            xInt = uUNIT_SQUARED / xInt;\\n        }\\n\\n        // Calculate the integer part of the logarithm.\\n        uint256 n = Common.msb(uint256(xInt / uUNIT));\\n\\n        // This is the integer part of the logarithm as an SD59x18 number. The operation can't overflow\\n        // because n is at most 255, `UNIT` is 1e18, and the sign is either 1 or -1.\\n        int256 resultInt = int256(n) * uUNIT;\\n\\n        // Calculate $y = x * 2^{-n}$.\\n        int256 y = xInt >> n;\\n\\n        // If y is the unit number, the fractional part is zero.\\n        if (y == uUNIT) {\\n            return wrap(resultInt * sign);\\n        }\\n\\n        // Calculate the fractional part via the iterative approximation.\\n        // The `delta >>= 1` part is equivalent to `delta /= 2`, but shifting bits is more gas efficient.\\n        int256 DOUBLE_UNIT = 2e18;\\n        for (int256 delta = uHALF_UNIT; delta > 0; delta >>= 1) {\\n            y = (y * y) / uUNIT;\\n\\n            // Is y^2 >= 2e18 and so in the range [2e18, 4e18)?\\n            if (y >= DOUBLE_UNIT) {\\n                // Add the 2^{-m} factor to the logarithm.\\n                resultInt = resultInt + delta;\\n\\n                // Halve y, which corresponds to z/2 in the Wikipedia article.\\n                y >>= 1;\\n            }\\n        }\\n        resultInt *= sign;\\n        result = wrap(resultInt);\\n    }\\n}\\n\\n/// @notice Multiplies two SD59x18 numbers together, returning a new SD59x18 number.\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {Common.mulDiv18}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {Common.mulDiv18}.\\n/// - None of the inputs can be `MIN_SD59x18`.\\n/// - The result must fit in SD59x18.\\n///\\n/// @param x The multiplicand as an SD59x18 number.\\n/// @param y The multiplier as an SD59x18 number.\\n/// @return result The product as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mul(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n    if (xInt == uMIN_SD59x18 || yInt == uMIN_SD59x18) {\\n        revert Errors.PRBMath_SD59x18_Mul_InputTooSmall();\\n    }\\n\\n    // Get hold of the absolute values of x and y.\\n    uint256 xAbs;\\n    uint256 yAbs;\\n    unchecked {\\n        xAbs = xInt < 0 ? uint256(-xInt) : uint256(xInt);\\n        yAbs = yInt < 0 ? uint256(-yInt) : uint256(yInt);\\n    }\\n\\n    // Compute the absolute value (x*y\\u00f7UNIT). The resulting value must fit in SD59x18.\\n    uint256 resultAbs = Common.mulDiv18(xAbs, yAbs);\\n    if (resultAbs > uint256(uMAX_SD59x18)) {\\n        revert Errors.PRBMath_SD59x18_Mul_Overflow(x, y);\\n    }\\n\\n    // Check if x and y have the same sign using two's complement representation. The left-most bit represents the sign (1 for\\n    // negative, 0 for positive or zero).\\n    bool sameSign = (xInt ^ yInt) > -1;\\n\\n    // If the inputs have the same sign, the result should be positive. Otherwise, it should be negative.\\n    unchecked {\\n        result = wrap(sameSign ? int256(resultAbs) : -int256(resultAbs));\\n    }\\n}\\n\\n/// @notice Raises x to the power of y using the following formula:\\n///\\n/// $$\\n/// x^y = 2^{log_2{x} * y}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {exp2}, {log2}, and {mul}.\\n/// - Returns `UNIT` for 0^0.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {exp2}, {log2}, and {mul}.\\n///\\n/// @param x The base as an SD59x18 number.\\n/// @param y Exponent to raise x to, as an SD59x18 number\\n/// @return result x raised to power y, as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction pow(SD59x18 x, SD59x18 y) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    int256 yInt = y.unwrap();\\n\\n    // If both x and y are zero, the result is `UNIT`. If just x is zero, the result is always zero.\\n    if (xInt == 0) {\\n        return yInt == 0 ? UNIT : ZERO;\\n    }\\n    // If x is `UNIT`, the result is always `UNIT`.\\n    else if (xInt == uUNIT) {\\n        return UNIT;\\n    }\\n\\n    // If y is zero, the result is always `UNIT`.\\n    if (yInt == 0) {\\n        return UNIT;\\n    }\\n    // If y is `UNIT`, the result is always x.\\n    else if (yInt == uUNIT) {\\n        return x;\\n    }\\n\\n    // Calculate the result using the formula.\\n    result = exp2(mul(log2(x), y));\\n}\\n\\n/// @notice Raises x (an SD59x18 number) to the power y (an unsigned basic integer) using the well-known\\n/// algorithm \\\"exponentiation by squaring\\\".\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv18}.\\n/// - Returns `UNIT` for 0^0.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {abs} and {Common.mulDiv18}.\\n/// - The result must fit in SD59x18.\\n///\\n/// @param x The base as an SD59x18 number.\\n/// @param y The exponent as a uint256.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction powu(SD59x18 x, uint256 y) pure returns (SD59x18 result) {\\n    uint256 xAbs = uint256(abs(x).unwrap());\\n\\n    // Calculate the first iteration of the loop in advance.\\n    uint256 resultAbs = y & 1 > 0 ? xAbs : uint256(uUNIT);\\n\\n    // Equivalent to `for(y /= 2; y > 0; y /= 2)`.\\n    uint256 yAux = y;\\n    for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n        xAbs = Common.mulDiv18(xAbs, xAbs);\\n\\n        // Equivalent to `y % 2 == 1`.\\n        if (yAux & 1 > 0) {\\n            resultAbs = Common.mulDiv18(resultAbs, xAbs);\\n        }\\n    }\\n\\n    // The result must fit in SD59x18.\\n    if (resultAbs > uint256(uMAX_SD59x18)) {\\n        revert Errors.PRBMath_SD59x18_Powu_Overflow(x, y);\\n    }\\n\\n    unchecked {\\n        // Is the base negative and the exponent odd? If yes, the result should be negative.\\n        int256 resultInt = int256(resultAbs);\\n        bool isNegative = x.unwrap() < 0 && y & 1 == 1;\\n        if (isNegative) {\\n            resultInt = -resultInt;\\n        }\\n        result = wrap(resultInt);\\n    }\\n}\\n\\n/// @notice Calculates the square root of x using the Babylonian method.\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n///\\n/// Notes:\\n/// - Only the positive root is returned.\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x cannot be negative, since complex numbers are not supported.\\n/// - x must be less than `MAX_SD59x18 / UNIT`.\\n///\\n/// @param x The SD59x18 number for which to calculate the square root.\\n/// @return result The result as an SD59x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction sqrt(SD59x18 x) pure returns (SD59x18 result) {\\n    int256 xInt = x.unwrap();\\n    if (xInt < 0) {\\n        revert Errors.PRBMath_SD59x18_Sqrt_NegativeInput(x);\\n    }\\n    if (xInt > uMAX_SD59x18 / uUNIT) {\\n        revert Errors.PRBMath_SD59x18_Sqrt_Overflow(x);\\n    }\\n\\n    unchecked {\\n        // Multiply x by `UNIT` to account for the factor of `UNIT` picked up when multiplying two SD59x18 numbers.\\n        // In this case, the two numbers are both the square root.\\n        uint256 resultUint = Common.sqrt(uint256(xInt * uUNIT));\\n        result = wrap(int256(resultUint));\\n    }\\n}\\n\",\"keccak256\":\"0xedd0635769176ab99878a91ce267cee2ca107b30e6b0db10736573ff4d102868\",\"license\":\"MIT\"},\"@prb/math/src/sd59x18/ValueType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Casting.sol\\\" as Casting;\\nimport \\\"./Helpers.sol\\\" as Helpers;\\nimport \\\"./Math.sol\\\" as Math;\\n\\n/// @notice The signed 59.18-decimal fixed-point number representation, which can have up to 59 digits and up to 18\\n/// decimals. The values of this are bound by the minimum and the maximum values permitted by the underlying Solidity\\n/// type int256.\\ntype SD59x18 is int256;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Casting.intoInt256,\\n    Casting.intoSD1x18,\\n    Casting.intoUD2x18,\\n    Casting.intoUD60x18,\\n    Casting.intoUint256,\\n    Casting.intoUint128,\\n    Casting.intoUint40,\\n    Casting.unwrap\\n} for SD59x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            MATHEMATICAL FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Math.abs,\\n    Math.avg,\\n    Math.ceil,\\n    Math.div,\\n    Math.exp,\\n    Math.exp2,\\n    Math.floor,\\n    Math.frac,\\n    Math.gm,\\n    Math.inv,\\n    Math.log10,\\n    Math.log2,\\n    Math.ln,\\n    Math.mul,\\n    Math.pow,\\n    Math.powu,\\n    Math.sqrt\\n} for SD59x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                HELPER FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Helpers.add,\\n    Helpers.and,\\n    Helpers.eq,\\n    Helpers.gt,\\n    Helpers.gte,\\n    Helpers.isZero,\\n    Helpers.lshift,\\n    Helpers.lt,\\n    Helpers.lte,\\n    Helpers.mod,\\n    Helpers.neq,\\n    Helpers.not,\\n    Helpers.or,\\n    Helpers.rshift,\\n    Helpers.sub,\\n    Helpers.uncheckedAdd,\\n    Helpers.uncheckedSub,\\n    Helpers.uncheckedUnary,\\n    Helpers.xor\\n} for SD59x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    OPERATORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// The global \\\"using for\\\" directive makes it possible to use these operators on the SD59x18 type.\\nusing {\\n    Helpers.add as +,\\n    Helpers.and2 as &,\\n    Math.div as /,\\n    Helpers.eq as ==,\\n    Helpers.gt as >,\\n    Helpers.gte as >=,\\n    Helpers.lt as <,\\n    Helpers.lte as <=,\\n    Helpers.mod as %,\\n    Math.mul as *,\\n    Helpers.neq as !=,\\n    Helpers.not as ~,\\n    Helpers.or as |,\\n    Helpers.sub as -,\\n    Helpers.unary as -,\\n    Helpers.xor as ^\\n} for SD59x18 global;\\n\",\"keccak256\":\"0xe03112d145dcd5863aff24e5f381debaae29d446acd5666f3d640e3d9af738d7\",\"license\":\"MIT\"},\"@prb/math/src/ud2x18/Casting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"../Common.sol\\\" as Common;\\nimport \\\"./Errors.sol\\\" as Errors;\\nimport { uMAX_SD1x18 } from \\\"../sd1x18/Constants.sol\\\";\\nimport { SD1x18 } from \\\"../sd1x18/ValueType.sol\\\";\\nimport { SD59x18 } from \\\"../sd59x18/ValueType.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"../ud60x18/ValueType.sol\\\";\\nimport { UD2x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts a UD2x18 number into SD1x18.\\n/// - x must be less than or equal to `uMAX_SD1x18`.\\nfunction intoSD1x18(UD2x18 x) pure returns (SD1x18 result) {\\n    uint64 xUint = UD2x18.unwrap(x);\\n    if (xUint > uint64(uMAX_SD1x18)) {\\n        revert Errors.PRBMath_UD2x18_IntoSD1x18_Overflow(x);\\n    }\\n    result = SD1x18.wrap(int64(xUint));\\n}\\n\\n/// @notice Casts a UD2x18 number into SD59x18.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of SD59x18.\\nfunction intoSD59x18(UD2x18 x) pure returns (SD59x18 result) {\\n    result = SD59x18.wrap(int256(uint256(UD2x18.unwrap(x))));\\n}\\n\\n/// @notice Casts a UD2x18 number into UD60x18.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of UD60x18.\\nfunction intoUD60x18(UD2x18 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(UD2x18.unwrap(x));\\n}\\n\\n/// @notice Casts a UD2x18 number into uint128.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of uint128.\\nfunction intoUint128(UD2x18 x) pure returns (uint128 result) {\\n    result = uint128(UD2x18.unwrap(x));\\n}\\n\\n/// @notice Casts a UD2x18 number into uint256.\\n/// @dev There is no overflow check because the domain of UD2x18 is a subset of uint256.\\nfunction intoUint256(UD2x18 x) pure returns (uint256 result) {\\n    result = uint256(UD2x18.unwrap(x));\\n}\\n\\n/// @notice Casts a UD2x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(UD2x18 x) pure returns (uint40 result) {\\n    uint64 xUint = UD2x18.unwrap(x);\\n    if (xUint > uint64(Common.MAX_UINT40)) {\\n        revert Errors.PRBMath_UD2x18_IntoUint40_Overflow(x);\\n    }\\n    result = uint40(xUint);\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction ud2x18(uint64 x) pure returns (UD2x18 result) {\\n    result = UD2x18.wrap(x);\\n}\\n\\n/// @notice Unwrap a UD2x18 number into uint64.\\nfunction unwrap(UD2x18 x) pure returns (uint64 result) {\\n    result = UD2x18.unwrap(x);\\n}\\n\\n/// @notice Wraps a uint64 number into UD2x18.\\nfunction wrap(uint64 x) pure returns (UD2x18 result) {\\n    result = UD2x18.wrap(x);\\n}\\n\",\"keccak256\":\"0x07ec9a8adddfe6bf37f0d9ce7702c5620a6215340889701da0525ed190ccc099\",\"license\":\"MIT\"},\"@prb/math/src/ud2x18/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { UD2x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @dev Euler's number as a UD2x18 number.\\nUD2x18 constant E = UD2x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum value a UD2x18 number can have.\\nuint64 constant uMAX_UD2x18 = 18_446744073709551615;\\nUD2x18 constant MAX_UD2x18 = UD2x18.wrap(uMAX_UD2x18);\\n\\n/// @dev PI as a UD2x18 number.\\nUD2x18 constant PI = UD2x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit number, which gives the decimal precision of UD2x18.\\nuint256 constant uUNIT = 1e18;\\nUD2x18 constant UNIT = UD2x18.wrap(1e18);\\n\",\"keccak256\":\"0xbd11da8ad79ffc8b7b8244c82632b0ca31970e190a8877ba1a69b4b8065dcea5\",\"license\":\"MIT\"},\"@prb/math/src/ud2x18/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { UD2x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Thrown when trying to cast a UD2x18 number that doesn't fit in SD1x18.\\nerror PRBMath_UD2x18_IntoSD1x18_Overflow(UD2x18 x);\\n\\n/// @notice Thrown when trying to cast a UD2x18 number that doesn't fit in uint40.\\nerror PRBMath_UD2x18_IntoUint40_Overflow(UD2x18 x);\\n\",\"keccak256\":\"0xdf1e22f0b4c8032bcc8b7f63fe3984e1387f3dc7b2e9ab381822249f75376d33\",\"license\":\"MIT\"},\"@prb/math/src/ud2x18/ValueType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Casting.sol\\\" as Casting;\\n\\n/// @notice The unsigned 2.18-decimal fixed-point number representation, which can have up to 2 digits and up to 18\\n/// decimals. The values of this are bound by the minimum and the maximum values permitted by the underlying Solidity\\n/// type uint64. This is useful when end users want to use uint64 to save gas, e.g. with tight variable packing in contract\\n/// storage.\\ntype UD2x18 is uint64;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Casting.intoSD1x18,\\n    Casting.intoSD59x18,\\n    Casting.intoUD60x18,\\n    Casting.intoUint256,\\n    Casting.intoUint128,\\n    Casting.intoUint40,\\n    Casting.unwrap\\n} for UD2x18 global;\\n\",\"keccak256\":\"0x2802edc9869db116a0b5c490cc5f8554742f747183fa30ac5e9c80bb967e61a1\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Casting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Errors.sol\\\" as CastingErrors;\\nimport { MAX_UINT128, MAX_UINT40 } from \\\"../Common.sol\\\";\\nimport { uMAX_SD1x18 } from \\\"../sd1x18/Constants.sol\\\";\\nimport { SD1x18 } from \\\"../sd1x18/ValueType.sol\\\";\\nimport { uMAX_SD59x18 } from \\\"../sd59x18/Constants.sol\\\";\\nimport { SD59x18 } from \\\"../sd59x18/ValueType.sol\\\";\\nimport { uMAX_UD2x18 } from \\\"../ud2x18/Constants.sol\\\";\\nimport { UD2x18 } from \\\"../ud2x18/ValueType.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Casts a UD60x18 number into SD1x18.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `uMAX_SD1x18`.\\nfunction intoSD1x18(UD60x18 x) pure returns (SD1x18 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > uint256(int256(uMAX_SD1x18))) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoSD1x18_Overflow(x);\\n    }\\n    result = SD1x18.wrap(int64(uint64(xUint)));\\n}\\n\\n/// @notice Casts a UD60x18 number into UD2x18.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `uMAX_UD2x18`.\\nfunction intoUD2x18(UD60x18 x) pure returns (UD2x18 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > uMAX_UD2x18) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoUD2x18_Overflow(x);\\n    }\\n    result = UD2x18.wrap(uint64(xUint));\\n}\\n\\n/// @notice Casts a UD60x18 number into SD59x18.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `uMAX_SD59x18`.\\nfunction intoSD59x18(UD60x18 x) pure returns (SD59x18 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > uint256(uMAX_SD59x18)) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoSD59x18_Overflow(x);\\n    }\\n    result = SD59x18.wrap(int256(xUint));\\n}\\n\\n/// @notice Casts a UD60x18 number into uint128.\\n/// @dev This is basically an alias for {unwrap}.\\nfunction intoUint256(UD60x18 x) pure returns (uint256 result) {\\n    result = UD60x18.unwrap(x);\\n}\\n\\n/// @notice Casts a UD60x18 number into uint128.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UINT128`.\\nfunction intoUint128(UD60x18 x) pure returns (uint128 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > MAX_UINT128) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoUint128_Overflow(x);\\n    }\\n    result = uint128(xUint);\\n}\\n\\n/// @notice Casts a UD60x18 number into uint40.\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UINT40`.\\nfunction intoUint40(UD60x18 x) pure returns (uint40 result) {\\n    uint256 xUint = UD60x18.unwrap(x);\\n    if (xUint > MAX_UINT40) {\\n        revert CastingErrors.PRBMath_UD60x18_IntoUint40_Overflow(x);\\n    }\\n    result = uint40(xUint);\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction ud(uint256 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(x);\\n}\\n\\n/// @notice Alias for {wrap}.\\nfunction ud60x18(uint256 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(x);\\n}\\n\\n/// @notice Unwraps a UD60x18 number into uint256.\\nfunction unwrap(UD60x18 x) pure returns (uint256 result) {\\n    result = UD60x18.unwrap(x);\\n}\\n\\n/// @notice Wraps a uint256 number into the UD60x18 value type.\\nfunction wrap(uint256 x) pure returns (UD60x18 result) {\\n    result = UD60x18.wrap(x);\\n}\\n\",\"keccak256\":\"0x5bb532da36921cbdac64d1f16de5d366ef1f664502e3b7c07d0ad06917551f85\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n// NOTICE: the \\\"u\\\" prefix stands for \\\"unwrapped\\\".\\n\\n/// @dev Euler's number as a UD60x18 number.\\nUD60x18 constant E = UD60x18.wrap(2_718281828459045235);\\n\\n/// @dev The maximum input permitted in {exp}.\\nuint256 constant uEXP_MAX_INPUT = 133_084258667509499440;\\nUD60x18 constant EXP_MAX_INPUT = UD60x18.wrap(uEXP_MAX_INPUT);\\n\\n/// @dev The maximum input permitted in {exp2}.\\nuint256 constant uEXP2_MAX_INPUT = 192e18 - 1;\\nUD60x18 constant EXP2_MAX_INPUT = UD60x18.wrap(uEXP2_MAX_INPUT);\\n\\n/// @dev Half the UNIT number.\\nuint256 constant uHALF_UNIT = 0.5e18;\\nUD60x18 constant HALF_UNIT = UD60x18.wrap(uHALF_UNIT);\\n\\n/// @dev $log_2(10)$ as a UD60x18 number.\\nuint256 constant uLOG2_10 = 3_321928094887362347;\\nUD60x18 constant LOG2_10 = UD60x18.wrap(uLOG2_10);\\n\\n/// @dev $log_2(e)$ as a UD60x18 number.\\nuint256 constant uLOG2_E = 1_442695040888963407;\\nUD60x18 constant LOG2_E = UD60x18.wrap(uLOG2_E);\\n\\n/// @dev The maximum value a UD60x18 number can have.\\nuint256 constant uMAX_UD60x18 = 115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\nUD60x18 constant MAX_UD60x18 = UD60x18.wrap(uMAX_UD60x18);\\n\\n/// @dev The maximum whole value a UD60x18 number can have.\\nuint256 constant uMAX_WHOLE_UD60x18 = 115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\nUD60x18 constant MAX_WHOLE_UD60x18 = UD60x18.wrap(uMAX_WHOLE_UD60x18);\\n\\n/// @dev PI as a UD60x18 number.\\nUD60x18 constant PI = UD60x18.wrap(3_141592653589793238);\\n\\n/// @dev The unit number, which gives the decimal precision of UD60x18.\\nuint256 constant uUNIT = 1e18;\\nUD60x18 constant UNIT = UD60x18.wrap(uUNIT);\\n\\n/// @dev The unit number squared.\\nuint256 constant uUNIT_SQUARED = 1e36;\\nUD60x18 constant UNIT_SQUARED = UD60x18.wrap(uUNIT_SQUARED);\\n\\n/// @dev Zero as a UD60x18 number.\\nUD60x18 constant ZERO = UD60x18.wrap(0);\\n\",\"keccak256\":\"0x2b80d26153d3fdcfb3a9ca772d9309d31ed1275f5b8b54c3ffb54d3652b37d90\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Conversions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { uMAX_UD60x18, uUNIT } from \\\"./Constants.sol\\\";\\nimport { PRBMath_UD60x18_Convert_Overflow } from \\\"./Errors.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Converts a UD60x18 number to a simple integer by dividing it by `UNIT`.\\n/// @dev The result is rounded toward zero.\\n/// @param x The UD60x18 number to convert.\\n/// @return result The same number in basic integer form.\\nfunction convert(UD60x18 x) pure returns (uint256 result) {\\n    result = UD60x18.unwrap(x) / uUNIT;\\n}\\n\\n/// @notice Converts a simple integer to UD60x18 by multiplying it by `UNIT`.\\n///\\n/// @dev Requirements:\\n/// - x must be less than or equal to `MAX_UD60x18 / UNIT`.\\n///\\n/// @param x The basic integer to convert.\\n/// @param result The same number converted to UD60x18.\\nfunction convert(uint256 x) pure returns (UD60x18 result) {\\n    if (x > uMAX_UD60x18 / uUNIT) {\\n        revert PRBMath_UD60x18_Convert_Overflow(x);\\n    }\\n    unchecked {\\n        result = UD60x18.wrap(x * uUNIT);\\n    }\\n}\\n\",\"keccak256\":\"0xaf7fc2523413822de3b66ba339fe2884fb3b8c6f6cf38ec90a2c3e3aae71df6b\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Thrown when ceiling a number overflows UD60x18.\\nerror PRBMath_UD60x18_Ceil_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when converting a basic integer to the fixed-point format overflows UD60x18.\\nerror PRBMath_UD60x18_Convert_Overflow(uint256 x);\\n\\n/// @notice Thrown when taking the natural exponent of a base greater than 133_084258667509499441.\\nerror PRBMath_UD60x18_Exp_InputTooBig(UD60x18 x);\\n\\n/// @notice Thrown when taking the binary exponent of a base greater than 192e18.\\nerror PRBMath_UD60x18_Exp2_InputTooBig(UD60x18 x);\\n\\n/// @notice Thrown when taking the geometric mean of two numbers and multiplying them overflows UD60x18.\\nerror PRBMath_UD60x18_Gm_Overflow(UD60x18 x, UD60x18 y);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in SD1x18.\\nerror PRBMath_UD60x18_IntoSD1x18_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in SD59x18.\\nerror PRBMath_UD60x18_IntoSD59x18_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in UD2x18.\\nerror PRBMath_UD60x18_IntoUD2x18_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint128.\\nerror PRBMath_UD60x18_IntoUint128_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when trying to cast a UD60x18 number that doesn't fit in uint40.\\nerror PRBMath_UD60x18_IntoUint40_Overflow(UD60x18 x);\\n\\n/// @notice Thrown when taking the logarithm of a number less than 1.\\nerror PRBMath_UD60x18_Log_InputTooSmall(UD60x18 x);\\n\\n/// @notice Thrown when calculating the square root overflows UD60x18.\\nerror PRBMath_UD60x18_Sqrt_Overflow(UD60x18 x);\\n\",\"keccak256\":\"0xa8c60d4066248df22c49c882873efbc017344107edabc48c52209abbc39cb1e3\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport { wrap } from \\\"./Casting.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/// @notice Implements the checked addition operation (+) in the UD60x18 type.\\nfunction add(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() + y.unwrap());\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the UD60x18 type.\\nfunction and(UD60x18 x, uint256 bits) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() & bits);\\n}\\n\\n/// @notice Implements the AND (&) bitwise operation in the UD60x18 type.\\nfunction and2(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() & y.unwrap());\\n}\\n\\n/// @notice Implements the equal operation (==) in the UD60x18 type.\\nfunction eq(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() == y.unwrap();\\n}\\n\\n/// @notice Implements the greater than operation (>) in the UD60x18 type.\\nfunction gt(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() > y.unwrap();\\n}\\n\\n/// @notice Implements the greater than or equal to operation (>=) in the UD60x18 type.\\nfunction gte(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() >= y.unwrap();\\n}\\n\\n/// @notice Implements a zero comparison check function in the UD60x18 type.\\nfunction isZero(UD60x18 x) pure returns (bool result) {\\n    // This wouldn't work if x could be negative.\\n    result = x.unwrap() == 0;\\n}\\n\\n/// @notice Implements the left shift operation (<<) in the UD60x18 type.\\nfunction lshift(UD60x18 x, uint256 bits) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() << bits);\\n}\\n\\n/// @notice Implements the lower than operation (<) in the UD60x18 type.\\nfunction lt(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() < y.unwrap();\\n}\\n\\n/// @notice Implements the lower than or equal to operation (<=) in the UD60x18 type.\\nfunction lte(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() <= y.unwrap();\\n}\\n\\n/// @notice Implements the checked modulo operation (%) in the UD60x18 type.\\nfunction mod(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() % y.unwrap());\\n}\\n\\n/// @notice Implements the not equal operation (!=) in the UD60x18 type.\\nfunction neq(UD60x18 x, UD60x18 y) pure returns (bool result) {\\n    result = x.unwrap() != y.unwrap();\\n}\\n\\n/// @notice Implements the NOT (~) bitwise operation in the UD60x18 type.\\nfunction not(UD60x18 x) pure returns (UD60x18 result) {\\n    result = wrap(~x.unwrap());\\n}\\n\\n/// @notice Implements the OR (|) bitwise operation in the UD60x18 type.\\nfunction or(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() | y.unwrap());\\n}\\n\\n/// @notice Implements the right shift operation (>>) in the UD60x18 type.\\nfunction rshift(UD60x18 x, uint256 bits) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() >> bits);\\n}\\n\\n/// @notice Implements the checked subtraction operation (-) in the UD60x18 type.\\nfunction sub(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() - y.unwrap());\\n}\\n\\n/// @notice Implements the unchecked addition operation (+) in the UD60x18 type.\\nfunction uncheckedAdd(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    unchecked {\\n        result = wrap(x.unwrap() + y.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the unchecked subtraction operation (-) in the UD60x18 type.\\nfunction uncheckedSub(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    unchecked {\\n        result = wrap(x.unwrap() - y.unwrap());\\n    }\\n}\\n\\n/// @notice Implements the XOR (^) bitwise operation in the UD60x18 type.\\nfunction xor(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(x.unwrap() ^ y.unwrap());\\n}\\n\",\"keccak256\":\"0xf5faff881391d2c060029499a666cc5f0bea90a213150bb476fae8f02a5df268\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"../Common.sol\\\" as Common;\\nimport \\\"./Errors.sol\\\" as Errors;\\nimport { wrap } from \\\"./Casting.sol\\\";\\nimport {\\n    uEXP_MAX_INPUT,\\n    uEXP2_MAX_INPUT,\\n    uHALF_UNIT,\\n    uLOG2_10,\\n    uLOG2_E,\\n    uMAX_UD60x18,\\n    uMAX_WHOLE_UD60x18,\\n    UNIT,\\n    uUNIT,\\n    uUNIT_SQUARED,\\n    ZERO\\n} from \\\"./Constants.sol\\\";\\nimport { UD60x18 } from \\\"./ValueType.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            MATHEMATICAL FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Calculates the arithmetic average of x and y using the following formula:\\n///\\n/// $$\\n/// avg(x, y) = (x & y) + ((xUint ^ yUint) / 2)\\n/// $$\\n//\\n/// In English, this is what this formula does:\\n///\\n/// 1. AND x and y.\\n/// 2. Calculate half of XOR x and y.\\n/// 3. Add the two results together.\\n///\\n/// This technique is known as SWAR, which stands for \\\"SIMD within a register\\\". You can read more about it here:\\n/// https://devblogs.microsoft.com/oldnewthing/20220207-00/?p=106223\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// @param x The first operand as a UD60x18 number.\\n/// @param y The second operand as a UD60x18 number.\\n/// @return result The arithmetic average as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction avg(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    uint256 yUint = y.unwrap();\\n    unchecked {\\n        result = wrap((xUint & yUint) + ((xUint ^ yUint) >> 1));\\n    }\\n}\\n\\n/// @notice Yields the smallest whole number greater than or equal to x.\\n///\\n/// @dev This is optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional\\n/// counterparts. See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n///\\n/// Requirements:\\n/// - x must be less than or equal to `MAX_WHOLE_UD60x18`.\\n///\\n/// @param x The UD60x18 number to ceil.\\n/// @param result The smallest whole number greater than or equal to x, as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction ceil(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    if (xUint > uMAX_WHOLE_UD60x18) {\\n        revert Errors.PRBMath_UD60x18_Ceil_Overflow(x);\\n    }\\n\\n    assembly (\\\"memory-safe\\\") {\\n        // Equivalent to `x % UNIT`.\\n        let remainder := mod(x, uUNIT)\\n\\n        // Equivalent to `UNIT - remainder`.\\n        let delta := sub(uUNIT, remainder)\\n\\n        // Equivalent to `x + remainder > 0 ? delta : 0`.\\n        result := add(x, mul(delta, gt(remainder, 0)))\\n    }\\n}\\n\\n/// @notice Divides two UD60x18 numbers, returning a new UD60x18 number.\\n///\\n/// @dev Uses {Common.mulDiv} to enable overflow-safe multiplication and division.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {Common.mulDiv}.\\n///\\n/// @param x The numerator as a UD60x18 number.\\n/// @param y The denominator as a UD60x18 number.\\n/// @param result The quotient as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction div(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(Common.mulDiv(x.unwrap(), uUNIT, y.unwrap()));\\n}\\n\\n/// @notice Calculates the natural exponent of x using the following formula:\\n///\\n/// $$\\n/// e^x = 2^{x * log_2{e}}\\n/// $$\\n///\\n/// @dev Requirements:\\n/// - x must be less than 133_084258667509499441.\\n///\\n/// @param x The exponent as a UD60x18 number.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n\\n    // This check prevents values greater than 192e18 from being passed to {exp2}.\\n    if (xUint > uEXP_MAX_INPUT) {\\n        revert Errors.PRBMath_UD60x18_Exp_InputTooBig(x);\\n    }\\n\\n    unchecked {\\n        // Inline the fixed-point multiplication to save gas.\\n        uint256 doubleUnitProduct = xUint * uLOG2_E;\\n        result = exp2(wrap(doubleUnitProduct / uUNIT));\\n    }\\n}\\n\\n/// @notice Calculates the binary exponent of x using the binary fraction method.\\n///\\n/// @dev See https://ethereum.stackexchange.com/q/79903/24693\\n///\\n/// Requirements:\\n/// - x must be less than 192e18.\\n/// - The result must fit in UD60x18.\\n///\\n/// @param x The exponent as a UD60x18 number.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction exp2(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n\\n    // Numbers greater than or equal to 192e18 don't fit in the 192.64-bit format.\\n    if (xUint > uEXP2_MAX_INPUT) {\\n        revert Errors.PRBMath_UD60x18_Exp2_InputTooBig(x);\\n    }\\n\\n    // Convert x to the 192.64-bit fixed-point format.\\n    uint256 x_192x64 = (xUint << 64) / uUNIT;\\n\\n    // Pass x to the {Common.exp2} function, which uses the 192.64-bit fixed-point number representation.\\n    result = wrap(Common.exp2(x_192x64));\\n}\\n\\n/// @notice Yields the greatest whole number less than or equal to x.\\n/// @dev Optimized for fractional value inputs, because every whole value has (1e18 - 1) fractional counterparts.\\n/// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n/// @param x The UD60x18 number to floor.\\n/// @param result The greatest whole number less than or equal to x, as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction floor(UD60x18 x) pure returns (UD60x18 result) {\\n    assembly (\\\"memory-safe\\\") {\\n        // Equivalent to `x % UNIT`.\\n        let remainder := mod(x, uUNIT)\\n\\n        // Equivalent to `x - remainder > 0 ? remainder : 0)`.\\n        result := sub(x, mul(remainder, gt(remainder, 0)))\\n    }\\n}\\n\\n/// @notice Yields the excess beyond the floor of x using the odd function definition.\\n/// @dev See https://en.wikipedia.org/wiki/Fractional_part.\\n/// @param x The UD60x18 number to get the fractional part of.\\n/// @param result The fractional part of x as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction frac(UD60x18 x) pure returns (UD60x18 result) {\\n    assembly (\\\"memory-safe\\\") {\\n        result := mod(x, uUNIT)\\n    }\\n}\\n\\n/// @notice Calculates the geometric mean of x and y, i.e. $\\\\sqrt{x * y}$, rounding down.\\n///\\n/// @dev Requirements:\\n/// - x * y must fit in UD60x18.\\n///\\n/// @param x The first operand as a UD60x18 number.\\n/// @param y The second operand as a UD60x18 number.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction gm(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    uint256 yUint = y.unwrap();\\n    if (xUint == 0 || yUint == 0) {\\n        return ZERO;\\n    }\\n\\n    unchecked {\\n        // Checking for overflow this way is faster than letting Solidity do it.\\n        uint256 xyUint = xUint * yUint;\\n        if (xyUint / xUint != yUint) {\\n            revert Errors.PRBMath_UD60x18_Gm_Overflow(x, y);\\n        }\\n\\n        // We don't need to multiply the result by `UNIT` here because the x*y product picked up a factor of `UNIT`\\n        // during multiplication. See the comments in {Common.sqrt}.\\n        result = wrap(Common.sqrt(xyUint));\\n    }\\n}\\n\\n/// @notice Calculates the inverse of x.\\n///\\n/// @dev Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x must not be zero.\\n///\\n/// @param x The UD60x18 number for which to calculate the inverse.\\n/// @return result The inverse as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction inv(UD60x18 x) pure returns (UD60x18 result) {\\n    unchecked {\\n        result = wrap(uUNIT_SQUARED / x.unwrap());\\n    }\\n}\\n\\n/// @notice Calculates the natural logarithm of x using the following formula:\\n///\\n/// $$\\n/// ln{x} = log_2{x} / log_2{e}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2}.\\n/// - The precision isn't sufficiently fine-grained to return exactly `UNIT` when the input is `E`.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {log2}.\\n///\\n/// @param x The UD60x18 number for which to calculate the natural logarithm.\\n/// @return result The natural logarithm as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction ln(UD60x18 x) pure returns (UD60x18 result) {\\n    unchecked {\\n        // Inline the fixed-point multiplication to save gas. This is overflow-safe because the maximum value that\\n        // {log2} can return is ~196_205294292027477728.\\n        result = wrap(log2(x).unwrap() * uUNIT / uLOG2_E);\\n    }\\n}\\n\\n/// @notice Calculates the common logarithm of x using the following formula:\\n///\\n/// $$\\n/// log_{10}{x} = log_2{x} / log_2{10}\\n/// $$\\n///\\n/// However, if x is an exact power of ten, a hard coded value is returned.\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {log2}.\\n///\\n/// @param x The UD60x18 number for which to calculate the common logarithm.\\n/// @return result The common logarithm as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction log10(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    if (xUint < uUNIT) {\\n        revert Errors.PRBMath_UD60x18_Log_InputTooSmall(x);\\n    }\\n\\n    // Note that the `mul` in this assembly block is the standard multiplication operation, not {UD60x18.mul}.\\n    // prettier-ignore\\n    assembly (\\\"memory-safe\\\") {\\n        switch x\\n        case 1 { result := mul(uUNIT, sub(0, 18)) }\\n        case 10 { result := mul(uUNIT, sub(1, 18)) }\\n        case 100 { result := mul(uUNIT, sub(2, 18)) }\\n        case 1000 { result := mul(uUNIT, sub(3, 18)) }\\n        case 10000 { result := mul(uUNIT, sub(4, 18)) }\\n        case 100000 { result := mul(uUNIT, sub(5, 18)) }\\n        case 1000000 { result := mul(uUNIT, sub(6, 18)) }\\n        case 10000000 { result := mul(uUNIT, sub(7, 18)) }\\n        case 100000000 { result := mul(uUNIT, sub(8, 18)) }\\n        case 1000000000 { result := mul(uUNIT, sub(9, 18)) }\\n        case 10000000000 { result := mul(uUNIT, sub(10, 18)) }\\n        case 100000000000 { result := mul(uUNIT, sub(11, 18)) }\\n        case 1000000000000 { result := mul(uUNIT, sub(12, 18)) }\\n        case 10000000000000 { result := mul(uUNIT, sub(13, 18)) }\\n        case 100000000000000 { result := mul(uUNIT, sub(14, 18)) }\\n        case 1000000000000000 { result := mul(uUNIT, sub(15, 18)) }\\n        case 10000000000000000 { result := mul(uUNIT, sub(16, 18)) }\\n        case 100000000000000000 { result := mul(uUNIT, sub(17, 18)) }\\n        case 1000000000000000000 { result := 0 }\\n        case 10000000000000000000 { result := uUNIT }\\n        case 100000000000000000000 { result := mul(uUNIT, 2) }\\n        case 1000000000000000000000 { result := mul(uUNIT, 3) }\\n        case 10000000000000000000000 { result := mul(uUNIT, 4) }\\n        case 100000000000000000000000 { result := mul(uUNIT, 5) }\\n        case 1000000000000000000000000 { result := mul(uUNIT, 6) }\\n        case 10000000000000000000000000 { result := mul(uUNIT, 7) }\\n        case 100000000000000000000000000 { result := mul(uUNIT, 8) }\\n        case 1000000000000000000000000000 { result := mul(uUNIT, 9) }\\n        case 10000000000000000000000000000 { result := mul(uUNIT, 10) }\\n        case 100000000000000000000000000000 { result := mul(uUNIT, 11) }\\n        case 1000000000000000000000000000000 { result := mul(uUNIT, 12) }\\n        case 10000000000000000000000000000000 { result := mul(uUNIT, 13) }\\n        case 100000000000000000000000000000000 { result := mul(uUNIT, 14) }\\n        case 1000000000000000000000000000000000 { result := mul(uUNIT, 15) }\\n        case 10000000000000000000000000000000000 { result := mul(uUNIT, 16) }\\n        case 100000000000000000000000000000000000 { result := mul(uUNIT, 17) }\\n        case 1000000000000000000000000000000000000 { result := mul(uUNIT, 18) }\\n        case 10000000000000000000000000000000000000 { result := mul(uUNIT, 19) }\\n        case 100000000000000000000000000000000000000 { result := mul(uUNIT, 20) }\\n        case 1000000000000000000000000000000000000000 { result := mul(uUNIT, 21) }\\n        case 10000000000000000000000000000000000000000 { result := mul(uUNIT, 22) }\\n        case 100000000000000000000000000000000000000000 { result := mul(uUNIT, 23) }\\n        case 1000000000000000000000000000000000000000000 { result := mul(uUNIT, 24) }\\n        case 10000000000000000000000000000000000000000000 { result := mul(uUNIT, 25) }\\n        case 100000000000000000000000000000000000000000000 { result := mul(uUNIT, 26) }\\n        case 1000000000000000000000000000000000000000000000 { result := mul(uUNIT, 27) }\\n        case 10000000000000000000000000000000000000000000000 { result := mul(uUNIT, 28) }\\n        case 100000000000000000000000000000000000000000000000 { result := mul(uUNIT, 29) }\\n        case 1000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 30) }\\n        case 10000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 31) }\\n        case 100000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 32) }\\n        case 1000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 33) }\\n        case 10000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 34) }\\n        case 100000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 35) }\\n        case 1000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 36) }\\n        case 10000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 37) }\\n        case 100000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 38) }\\n        case 1000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 39) }\\n        case 10000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 40) }\\n        case 100000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 41) }\\n        case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 42) }\\n        case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 43) }\\n        case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 44) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 45) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 46) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 47) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 48) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 49) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 50) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 51) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 52) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 53) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 54) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 55) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 56) }\\n        case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 57) }\\n        case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 58) }\\n        case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(uUNIT, 59) }\\n        default { result := uMAX_UD60x18 }\\n    }\\n\\n    if (result.unwrap() == uMAX_UD60x18) {\\n        unchecked {\\n            // Inline the fixed-point division to save gas.\\n            result = wrap(log2(x).unwrap() * uUNIT / uLOG2_10);\\n        }\\n    }\\n}\\n\\n/// @notice Calculates the binary logarithm of x using the iterative approximation algorithm:\\n///\\n/// $$\\n/// log_2{x} = n + log_2{y}, \\\\text{ where } y = x*2^{-n}, \\\\ y \\\\in [1, 2)\\n/// $$\\n///\\n/// For $0 \\\\leq x \\\\lt 1$, the input is inverted:\\n///\\n/// $$\\n/// log_2{x} = -log_2{\\\\frac{1}{x}}\\n/// $$\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n///\\n/// Notes:\\n/// - Due to the lossy precision of the iterative approximation, the results are not perfectly accurate to the last decimal.\\n///\\n/// Requirements:\\n/// - x must be greater than zero.\\n///\\n/// @param x The UD60x18 number for which to calculate the binary logarithm.\\n/// @return result The binary logarithm as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction log2(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n\\n    if (xUint < uUNIT) {\\n        revert Errors.PRBMath_UD60x18_Log_InputTooSmall(x);\\n    }\\n\\n    unchecked {\\n        // Calculate the integer part of the logarithm.\\n        uint256 n = Common.msb(xUint / uUNIT);\\n\\n        // This is the integer part of the logarithm as a UD60x18 number. The operation can't overflow because n\\n        // n is at most 255 and UNIT is 1e18.\\n        uint256 resultUint = n * uUNIT;\\n\\n        // Calculate $y = x * 2^{-n}$.\\n        uint256 y = xUint >> n;\\n\\n        // If y is the unit number, the fractional part is zero.\\n        if (y == uUNIT) {\\n            return wrap(resultUint);\\n        }\\n\\n        // Calculate the fractional part via the iterative approximation.\\n        // The `delta >>= 1` part is equivalent to `delta /= 2`, but shifting bits is more gas efficient.\\n        uint256 DOUBLE_UNIT = 2e18;\\n        for (uint256 delta = uHALF_UNIT; delta > 0; delta >>= 1) {\\n            y = (y * y) / uUNIT;\\n\\n            // Is y^2 >= 2e18 and so in the range [2e18, 4e18)?\\n            if (y >= DOUBLE_UNIT) {\\n                // Add the 2^{-m} factor to the logarithm.\\n                resultUint += delta;\\n\\n                // Halve y, which corresponds to z/2 in the Wikipedia article.\\n                y >>= 1;\\n            }\\n        }\\n        result = wrap(resultUint);\\n    }\\n}\\n\\n/// @notice Multiplies two UD60x18 numbers together, returning a new UD60x18 number.\\n///\\n/// @dev Uses {Common.mulDiv} to enable overflow-safe multiplication and division.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv}.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {Common.mulDiv}.\\n///\\n/// @dev See the documentation in {Common.mulDiv18}.\\n/// @param x The multiplicand as a UD60x18 number.\\n/// @param y The multiplier as a UD60x18 number.\\n/// @return result The product as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction mul(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    result = wrap(Common.mulDiv18(x.unwrap(), y.unwrap()));\\n}\\n\\n/// @notice Raises x to the power of y.\\n///\\n/// For $1 \\\\leq x \\\\leq \\\\infty$, the following standard formula is used:\\n///\\n/// $$\\n/// x^y = 2^{log_2{x} * y}\\n/// $$\\n///\\n/// For $0 \\\\leq x \\\\lt 1$, since the unsigned {log2} is undefined, an equivalent formula is used:\\n///\\n/// $$\\n/// i = \\\\frac{1}{x}\\n/// w = 2^{log_2{i} * y}\\n/// x^y = \\\\frac{1}{w}\\n/// $$\\n///\\n/// @dev Notes:\\n/// - Refer to the notes in {log2} and {mul}.\\n/// - Returns `UNIT` for 0^0.\\n/// - It may not perform well with very small values of x. Consider using SD59x18 as an alternative.\\n///\\n/// Requirements:\\n/// - Refer to the requirements in {exp2}, {log2}, and {mul}.\\n///\\n/// @param x The base as a UD60x18 number.\\n/// @param y The exponent as a UD60x18 number.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction pow(UD60x18 x, UD60x18 y) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n    uint256 yUint = y.unwrap();\\n\\n    // If both x and y are zero, the result is `UNIT`. If just x is zero, the result is always zero.\\n    if (xUint == 0) {\\n        return yUint == 0 ? UNIT : ZERO;\\n    }\\n    // If x is `UNIT`, the result is always `UNIT`.\\n    else if (xUint == uUNIT) {\\n        return UNIT;\\n    }\\n\\n    // If y is zero, the result is always `UNIT`.\\n    if (yUint == 0) {\\n        return UNIT;\\n    }\\n    // If y is `UNIT`, the result is always x.\\n    else if (yUint == uUNIT) {\\n        return x;\\n    }\\n\\n    // If x is greater than `UNIT`, use the standard formula.\\n    if (xUint > uUNIT) {\\n        result = exp2(mul(log2(x), y));\\n    }\\n    // Conversely, if x is less than `UNIT`, use the equivalent formula.\\n    else {\\n        UD60x18 i = wrap(uUNIT_SQUARED / xUint);\\n        UD60x18 w = exp2(mul(log2(i), y));\\n        result = wrap(uUNIT_SQUARED / w.unwrap());\\n    }\\n}\\n\\n/// @notice Raises x (a UD60x18 number) to the power y (an unsigned basic integer) using the well-known\\n/// algorithm \\\"exponentiation by squaring\\\".\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring.\\n///\\n/// Notes:\\n/// - Refer to the notes in {Common.mulDiv18}.\\n/// - Returns `UNIT` for 0^0.\\n///\\n/// Requirements:\\n/// - The result must fit in UD60x18.\\n///\\n/// @param x The base as a UD60x18 number.\\n/// @param y The exponent as a uint256.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction powu(UD60x18 x, uint256 y) pure returns (UD60x18 result) {\\n    // Calculate the first iteration of the loop in advance.\\n    uint256 xUint = x.unwrap();\\n    uint256 resultUint = y & 1 > 0 ? xUint : uUNIT;\\n\\n    // Equivalent to `for(y /= 2; y > 0; y /= 2)`.\\n    for (y >>= 1; y > 0; y >>= 1) {\\n        xUint = Common.mulDiv18(xUint, xUint);\\n\\n        // Equivalent to `y % 2 == 1`.\\n        if (y & 1 > 0) {\\n            resultUint = Common.mulDiv18(resultUint, xUint);\\n        }\\n    }\\n    result = wrap(resultUint);\\n}\\n\\n/// @notice Calculates the square root of x using the Babylonian method.\\n///\\n/// @dev See https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n///\\n/// Notes:\\n/// - The result is rounded toward zero.\\n///\\n/// Requirements:\\n/// - x must be less than `MAX_UD60x18 / UNIT`.\\n///\\n/// @param x The UD60x18 number for which to calculate the square root.\\n/// @return result The result as a UD60x18 number.\\n/// @custom:smtchecker abstract-function-nondet\\nfunction sqrt(UD60x18 x) pure returns (UD60x18 result) {\\n    uint256 xUint = x.unwrap();\\n\\n    unchecked {\\n        if (xUint > uMAX_UD60x18 / uUNIT) {\\n            revert Errors.PRBMath_UD60x18_Sqrt_Overflow(x);\\n        }\\n        // Multiply x by `UNIT` to account for the factor of `UNIT` picked up when multiplying two UD60x18 numbers.\\n        // In this case, the two numbers are both the square root.\\n        result = wrap(Common.sqrt(xUint * uUNIT));\\n    }\\n}\\n\",\"keccak256\":\"0xafe12d658b5bb495226df1841cbfbcb25e9fc443c6d41a85b5ac6aa7ec79ea29\",\"license\":\"MIT\"},\"@prb/math/src/ud60x18/ValueType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\nimport \\\"./Casting.sol\\\" as Casting;\\nimport \\\"./Helpers.sol\\\" as Helpers;\\nimport \\\"./Math.sol\\\" as Math;\\n\\n/// @notice The unsigned 60.18-decimal fixed-point number representation, which can have up to 60 digits and up to 18\\n/// decimals. The values of this are bound by the minimum and the maximum values permitted by the Solidity type uint256.\\n/// @dev The value type is defined here so it can be imported in all other files.\\ntype UD60x18 is uint256;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CASTING\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing {\\n    Casting.intoSD1x18,\\n    Casting.intoUD2x18,\\n    Casting.intoSD59x18,\\n    Casting.intoUint128,\\n    Casting.intoUint256,\\n    Casting.intoUint40,\\n    Casting.unwrap\\n} for UD60x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            MATHEMATICAL FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// The global \\\"using for\\\" directive makes the functions in this library callable on the UD60x18 type.\\nusing {\\n    Math.avg,\\n    Math.ceil,\\n    Math.div,\\n    Math.exp,\\n    Math.exp2,\\n    Math.floor,\\n    Math.frac,\\n    Math.gm,\\n    Math.inv,\\n    Math.ln,\\n    Math.log10,\\n    Math.log2,\\n    Math.mul,\\n    Math.pow,\\n    Math.powu,\\n    Math.sqrt\\n} for UD60x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                HELPER FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// The global \\\"using for\\\" directive makes the functions in this library callable on the UD60x18 type.\\nusing {\\n    Helpers.add,\\n    Helpers.and,\\n    Helpers.eq,\\n    Helpers.gt,\\n    Helpers.gte,\\n    Helpers.isZero,\\n    Helpers.lshift,\\n    Helpers.lt,\\n    Helpers.lte,\\n    Helpers.mod,\\n    Helpers.neq,\\n    Helpers.not,\\n    Helpers.or,\\n    Helpers.rshift,\\n    Helpers.sub,\\n    Helpers.uncheckedAdd,\\n    Helpers.uncheckedSub,\\n    Helpers.xor\\n} for UD60x18 global;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    OPERATORS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// The global \\\"using for\\\" directive makes it possible to use these operators on the UD60x18 type.\\nusing {\\n    Helpers.add as +,\\n    Helpers.and2 as &,\\n    Math.div as /,\\n    Helpers.eq as ==,\\n    Helpers.gt as >,\\n    Helpers.gte as >=,\\n    Helpers.lt as <,\\n    Helpers.lte as <=,\\n    Helpers.or as |,\\n    Helpers.mod as %,\\n    Math.mul as *,\\n    Helpers.neq as !=,\\n    Helpers.not as ~,\\n    Helpers.sub as -,\\n    Helpers.xor as ^\\n} for UD60x18 global;\\n\",\"keccak256\":\"0xdd873b5124180d9b71498b3a7fe93b1c08c368bec741f7d5f8e17f78a0b70f31\",\"license\":\"MIT\"},\"contracts/NetworkRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { IConnext } from \\\"@connext/interfaces/core/IConnext.sol\\\";\\nimport { IXReceiver } from \\\"@connext/interfaces/core/IXReceiver.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"@prb/math/src/UD60x18.sol\\\";\\n\\nimport { IMemberRegistry, INetworkMemberRegistry, ISplitManager } from \\\"./interfaces/INetworkMemberRegistry.sol\\\";\\nimport { ISplitMain } from \\\"./interfaces/ISplitMain.sol\\\";\\nimport { MemberRegistry } from \\\"./registry/MemberRegistry.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n//*********************************************************************//\\n// --------------------------- custom errors ------------------------- //\\n//*********************************************************************//\\nerror INVALID_LIST();\\nerror NOT_MEMBER_OR_NOT_SORTED();\\n\\n// DAO member registry\\n//  - keeps track of members\\n//  - keeps track of member part/full time activity (activity multiplier)\\n//  - keeps track of member start date\\n//  - keeps track of member total seconds active\\n\\ncontract NetworkRegistry is OwnableUpgradeable, IXReceiver, INetworkMemberRegistry, MemberRegistry {\\n    // Connext contract in the current domain\\n    IConnext public connext;\\n    // The domain ID where the source updater contract is deployed\\n    uint32 public updaterDomain;\\n    // The address of the source updater contract\\n    address public updater;\\n\\n    // NetworkRegistry[] public networkRegistry;\\n    // chainId => NetworkRegistry\\n    mapping (uint32 => NetworkRegistry) public networkRegistry;\\n\\n    ISplitMain public splitMain;\\n    address public split;\\n    uint32 public splitDistributorFee;\\n\\n    uint32 public constant PERCENTAGE_SCALE = 1e6;\\n\\n    struct Split {\\n        address receiver;\\n        uint32 percentAllocations;\\n    }\\n\\n    /** @notice A modifier for authenticated calls.\\n     * This is an important security consideration. If the target contract\\n     * function should be authenticated, it must check three things:\\n     *    1) The originating call comes from the expected origin domain.\\n     *    2) The originating call comes from the expected source contract.\\n     *    3) The call to this contract comes from Connext.\\n     */\\n    modifier onlyUpdater(address _originSender, uint32 _origin) {\\n        // console.log(\\\"onlyUpdater: %s %s %s\\\", _origin, _originSender, _msgSender());\\n        require(\\n        _origin == updaterDomain &&\\n            _originSender == updater &&\\n            _msgSender() == address(connext),\\n        \\\"NetworkRegistry: Expected original caller to be source contract on origin domain and this to be called by Connext\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrUpdater() {\\n        // console.log(\\\"address(this) %s\\\", address(this));\\n        // console.log(\\\"onlyOwnerOrUpdater %s %s %s %s\\\", updater, _msgSender(), address(connext));\\n        require(\\n            owner() == _msgSender() ||\\n            (updater != address(0) && _msgSender() == address(this)),\\n            // (updater != address(0) && _msgSender() == address(connext)),\\n            \\\"NetworkRegistry: caller is not foreign updater or owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier validNetworkParams(uint32[] memory _chainIds, uint256[] memory _relayerFees) {\\n        require(_chainIds.length == _relayerFees.length, \\\"NetworkRegistry: Wrong network params\\\");\\n        uint256 totalRelayerFees = 0;\\n        for (uint8 i = 0; i < _relayerFees.length; i++) {\\n            totalRelayerFees += _relayerFees[i];\\n        }\\n        require(\\n            msg.value == totalRelayerFees,\\n            \\\"NetworkRegistry: Value sent not enough to cover relayer fees\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier validNetworkRegistry(NetworkRegistry storage _registry) {\\n        require(_registry.domainId != 0, \\\"NetworkRegistry: Not Supported Network\\\");\\n        require(_registry.registryAddress != (address(0)), \\\"NetworkRegistry:Not Supported Network\\\");\\n        // require(_registry.delegate != (address(0)), \\\"NetworkRegistry: Missing delegate\\\"); // TODO: really need a delegate in case of failed tx?\\n        _;\\n    }\\n\\n    event NetworkRegistryUpdated(address indexed _registryAddress, uint32 indexed _chainId, uint32 _domainId, address _delegate);\\n    event SyncMessageSubmitted(bytes4 indexed _action, uint32 indexed _chainId, bytes32 indexed _transferId, address _registryAddress);\\n    event SyncActionPerformed(bytes32 _transferId, bytes4 indexed _action, bool indexed _success, uint32 _originDomain, address _originSender);\\n\\n    constructor() {\\n        // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/utils/Initializable.sol#L45\\n        _disableInitializers();\\n    }\\n\\n    function __NetworkRegistry_init_unchained(\\n        address _connext,\\n        uint32 _updaterDomain,\\n        address _updater,\\n        address _splitMain,\\n        address _split,\\n        uint32 _splitDistributorFee\\n    ) internal onlyInitializing {\\n        connext = IConnext(_connext);\\n        updaterDomain = _updaterDomain;\\n        updater = _updater;\\n        splitMain = ISplitMain(_splitMain);\\n        split = _split;\\n        splitDistributorFee = _splitDistributorFee;\\n    }\\n\\n    function __NetworkRegistry_init(\\n        address _connext,\\n        uint32 _updaterDomain,\\n        address _updater,\\n        address _splitMain,\\n        address _split,\\n        uint32 _splitDistributorFee,\\n        address _owner\\n    ) internal onlyInitializing {\\n        __Ownable_init();\\n        __NetworkRegistry_init_unchained(\\n            _connext,\\n            _updaterDomain,\\n            _updater,\\n            _splitMain,\\n            _split,\\n            _splitDistributorFee\\n        );\\n        if (_owner == address(0)) renounceOwnership();\\n        else transferOwnership(_owner);\\n    }\\n\\n    function initialize(bytes memory _initializationParams) external virtual initializer {\\n        (\\n            address _connext,\\n            uint32 _updaterDomain,\\n            address _updater,\\n            address _splitMain,\\n            address _split,\\n            uint32 _splitDistributorFee,\\n            address _owner\\n        ) = abi.decode(_initializationParams, (address, uint32, address, address, address, uint32, address));\\n        __NetworkRegistry_init(\\n            _connext,\\n            _updaterDomain,\\n            _updater,\\n            _splitMain,\\n            _split,\\n            _splitDistributorFee,\\n            _owner\\n        );\\n    }\\n\\n    function isMainRegistry() public view returns (bool) {\\n        return updaterDomain == 0 && updater == address(0);\\n    }\\n\\n    // Connext Config\\n    function setUpdater(uint32 _updaterDomain, address _updater) external onlyOwner {\\n        updaterDomain = _updaterDomain;\\n        updater = _updater;\\n    }\\n\\n    function updateNetworkRegistry(uint32 _chainId, NetworkRegistry memory _registry) external onlyOwner {\\n        require(_registry.registryAddress != address(0), \\\"Invalid registry address\\\");\\n        networkRegistry[_chainId] = _registry;\\n        emit NetworkRegistryUpdated(_registry.registryAddress, _chainId, _registry.domainId, _registry.delegate);\\n    }\\n\\n    function _executeXCall(\\n        uint32 _chainId,\\n        bytes memory _callData,\\n        uint256 _relayerFee\\n    ) internal validNetworkRegistry(networkRegistry[_chainId]) returns (bytes32 transferId) {\\n        transferId = connext.xcall{value: _relayerFee}(\\n            networkRegistry[_chainId].domainId, // _destination: domain ID of the destination chain\\n            networkRegistry[_chainId].registryAddress,            // _to: address of the target contract (Pong)\\n            address(0),        // _asset: use address zero for 0-value transfers\\n            networkRegistry[_chainId].delegate,        // _delegate: address that can revert or forceLocal on destination\\n            0,                 // _amount: 0 because no funds are being transferred\\n            0,                 // _slippage: can be anything between 0-10000 because no funds are being transferred\\n            _callData           // _callData: the encoded calldata to send\\n        );\\n    }\\n\\n    function _execSyncAction(bytes4 action, bytes memory _callData, uint32 _chainId, uint256 _relayerFee) internal {\\n        bytes32 transferId = _executeXCall(_chainId, _callData, _relayerFee);\\n        emit SyncMessageSubmitted(action, _chainId, transferId, networkRegistry[_chainId].registryAddress);\\n    }\\n\\n    function _syncRegistries(bytes4 action , bytes memory _callData, uint32[] memory _chainIds, uint256[] memory _relayerFees) internal {\\n        for (uint8 i = 0; i < _chainIds.length; i++) {\\n            _execSyncAction(action, _callData, _chainIds[i], _relayerFees[i]);\\n        }\\n    }\\n\\n    // add member to registry\\n    function setNewMember(\\n        address _member,\\n        uint8 _activityMultiplier,\\n        uint32 _startDate\\n    ) public virtual onlyOwnerOrUpdater {\\n        _setNewMember(_member, _activityMultiplier, _startDate);  \\n    }\\n\\n    function syncSetNewMember(\\n        address _member,\\n        uint8 _activityMultiplier,\\n        uint32 _startDate,\\n        uint32[] memory _chainIds,\\n        uint256[] memory _relayerFees\\n    ) external payable onlyOwner validNetworkParams(_chainIds, _relayerFees) {\\n        setNewMember(_member, _activityMultiplier, _startDate);\\n        bytes4 action = IMemberRegistry.setNewMember.selector;\\n        bytes memory callData = abi.encode(action, _member, _activityMultiplier, _startDate);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    // update member activity multiplier\\n    function updateMember(address _member, uint8 _activityMultiplier)\\n        public virtual\\n        onlyOwnerOrUpdater\\n    {\\n        _updateMember(_member, _activityMultiplier);\\n    }\\n\\n    function syncUpdateMember(\\n        address _member,\\n        uint8 _activityMultiplier,\\n        uint32[] memory _chainIds,\\n        uint256[] memory _relayerFees\\n    ) external payable onlyOwner validNetworkParams(_chainIds, _relayerFees) {\\n        updateMember(_member, _activityMultiplier);\\n        bytes4 action = IMemberRegistry.updateMember.selector;\\n        bytes memory callData = abi.encode(action, _member, _activityMultiplier);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    // BATCH OPERATIONS\\n\\n    function batchNewMember(\\n        address[] memory _members,\\n        uint8[] memory _activityMultipliers,\\n        uint32[] memory _startDates\\n    ) public onlyOwnerOrUpdater {\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            setNewMember(_members[i], _activityMultipliers[i], _startDates[i]);\\n        }\\n    }\\n\\n    // TODO: should we cover edge cases when we want to sync a replica registry from scratch?\\n    function syncBatchNewMember(\\n        address[] memory _members,\\n        uint8[] memory _activityMultipliers,\\n        uint32[] memory _startDates,\\n        uint32[] memory _chainIds,\\n        uint256[] memory _relayerFees\\n    ) external payable onlyOwner validNetworkParams(_chainIds, _relayerFees) {\\n        batchNewMember(_members, _activityMultipliers, _startDates);\\n        bytes4 action = IMemberRegistry.batchNewMember.selector;\\n        bytes memory callData = abi.encode(action, _members, _activityMultipliers, _startDates);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    function syncNetworkMemberRegistry(\\n        uint32[] memory _chainIds,\\n        uint256[] memory _relayerFees\\n    ) external payable onlyOwner validNetworkParams(_chainIds, _relayerFees) {\\n        address[] memory _members = new address[](members.length);\\n        uint8[] memory _activityMultipliers = new uint8[](members.length);\\n        uint32[] memory _startDates = new uint32[](members.length);\\n        for (uint256 i = 0; i < members.length; i++) {\\n            _members[i] = members[i].account;\\n            _activityMultipliers[i] = members[i].activityMultiplier;\\n            _startDates[i] = members[i].startDate;\\n        }\\n        bytes4 action = IMemberRegistry.batchNewMember.selector;\\n        bytes memory callData = abi.encode(action, _members, _activityMultipliers, _startDates);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    function batchUpdateMember(\\n        address[] memory _members,\\n        uint8[] memory _activityMultipliers\\n    ) public onlyOwnerOrUpdater {\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            updateMember(_members[i], _activityMultipliers[i]);\\n        } \\n    }\\n\\n    function syncBatchUpdateMember(\\n        address[] memory _members,\\n        uint8[] memory _activityMultipliers,\\n        uint32[] memory _chainIds,\\n        uint256[] memory _relayerFees\\n    ) external payable onlyOwner validNetworkParams(_chainIds, _relayerFees) {\\n        batchUpdateMember(_members, _activityMultipliers);\\n        bytes4 action = IMemberRegistry.batchUpdateMember.selector;\\n        bytes memory callData = abi.encode(action, _members, _activityMultipliers);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    // UPDATE ACTIONS\\n\\n    // update member total seconds and seconds in last period\\n    // TODO: do we want to make it permissionless in case of a replica registry?\\n    function updateSecondsActive() public {\\n        _updateSecondsActive();\\n    }\\n\\n    function syncUpdateSecondsActive(\\n        uint32[] memory _chainIds,\\n        uint256[] memory _relayerFees\\n    ) external payable validNetworkParams(_chainIds, _relayerFees) {\\n        updateSecondsActive();\\n        bytes4 action = IMemberRegistry.updateSecondsActive.selector;\\n        bytes memory callData = abi.encode(action);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    // takes a sorted (offchain) list of addresses from the member array\\n    // send update to 0xsplits\\n    function updateSplits(address[] memory _sortedList)\\n        public\\n        returns (\\n            address[] memory _receivers,\\n            uint32[] memory _percentAllocations\\n        )\\n    {\\n        (_receivers, _percentAllocations) = calculate(_sortedList);\\n\\n        // run splits update\\n        splitMain.updateSplit(\\n            split,\\n            _receivers,\\n            _percentAllocations,\\n            splitDistributorFee\\n        );\\n    }\\n\\n    function syncUpdateSplits(\\n        address[] memory _sortedList,\\n        uint32[] memory _chainIds,\\n        uint256[] memory _relayerFees\\n    ) external payable validNetworkParams(_chainIds, _relayerFees) {\\n        updateSplits(_sortedList);\\n        bytes4 action = ISplitManager.updateSplits.selector;\\n        bytes memory callData = abi.encode(action, _sortedList);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    // update member registry and update splits\\n    function updateAll(address[] memory _sortedList)\\n        public\\n        returns (\\n            address[] memory _receivers,\\n            uint32[] memory _percentAllocations\\n        )\\n    {\\n        updateSecondsActive();\\n        (_receivers, _percentAllocations) = updateSplits(_sortedList);\\n        \\n    }\\n\\n    function syncUpdateAll(\\n        address[] memory _sortedList,\\n        uint32[] memory _chainIds,\\n        uint256[] memory _relayerFees\\n    ) external payable validNetworkParams(_chainIds, _relayerFees) {\\n        updateAll(_sortedList);\\n        bytes4 action = ISplitManager.updateAll.selector;\\n        bytes memory callData = abi.encode(action, _sortedList);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    // update member registry, update splits, and distribute ETH\\n    // wraps 0xsplits distributeETH\\n    function updateAllAndDistributeETH(address[] memory _sortedList, address _distributorAddress) external {\\n        (\\n            address[] memory _receivers,\\n            uint32[] memory _percentAllocations\\n        ) = updateAll(_sortedList);\\n        splitMain.distributeETH(\\n            split,\\n            _receivers,\\n            _percentAllocations,\\n            splitDistributorFee,\\n            _distributorAddress\\n        );   \\n    }\\n\\n    // update member registry, update splits, and distribute ERC20\\n    // wraps 0xsplits distributeERC20\\n    function updateAllAndDistributeERC20(\\n        address[] memory _sortedList,\\n        IERC20 _token,\\n        address _distributorAddress\\n    ) external {\\n        (\\n            address[] memory _receivers,\\n            uint32[] memory _percentAllocations\\n        ) = updateAll(_sortedList);\\n        splitMain.distributeERC20(\\n            split,\\n            _token,\\n            _receivers,\\n            _percentAllocations,\\n            splitDistributorFee,\\n            _distributorAddress\\n        );\\n        \\n    }\\n\\n    // calculate the split allocations\\n    // verifys the address list is sorted, has no dups, and is valid\\n    // gets the total seconds from all members square rooted for % calc\\n    // set up arrays and parameters for 0xsplits contract call\\n    //  addresses sorted, only non zero allocations\\n    //  keep track of running total of allocations because it must equal PERCENTAGE_SCALE\\n    function calculate(address[] memory _sortedList)\\n        public\\n        view\\n        returns (\\n            address[] memory _receivers,\\n            uint32[] memory _percentAllocations\\n        )\\n    {\\n        uint256 nonZeroCount;\\n        uint256 total;\\n        address previous;\\n\\n        // verify list is current members and is sorted\\n        if (_sortedList.length != members.length) revert INVALID_LIST();\\n        for (uint256 i = 0; i < _sortedList.length; i++) {\\n            address listAddr = _sortedList[i];\\n            if (memberIdxs[listAddr] == 0 && listAddr >= previous)\\n                revert NOT_MEMBER_OR_NOT_SORTED();\\n            previous = listAddr;\\n\\n            // get the total seconds in the last period\\n            // ignore inactive members\\n            if (members[i].activityMultiplier > 0) {\\n                total = total + unwrap(wrap(members[i].secondsActive).sqrt());\\n                nonZeroCount++;\\n            }\\n        }\\n\\n        // define variables for split params\\n        _receivers = new address[](nonZeroCount);\\n        _percentAllocations = new uint32[](nonZeroCount);\\n\\n        // define variables for second loop\\n        uint32 runningTotal;\\n        uint256 nonZeroIndex; // index counter for non zero allocations\\n        // fill 0xsplits arrays with sorted list\\n        for (uint256 i = 0; i < _sortedList.length; i++) {\\n            uint256 memberIdx = memberIdxs[_sortedList[i]];\\n            Member memory _member = members[memberIdx - 1];\\n            if (_member.activityMultiplier > 0) {\\n                _receivers[nonZeroIndex] = _member.account;\\n\\n                _percentAllocations[nonZeroIndex] = uint32(\\n                    (unwrap(wrap(_member.secondsActive).sqrt()) *\\n                        PERCENTAGE_SCALE) / total\\n                );\\n\\n                runningTotal += _percentAllocations[nonZeroIndex];\\n                nonZeroIndex++;\\n            }\\n        }\\n\\n        // if there was any loss add it to the first account.\\n        if (runningTotal != PERCENTAGE_SCALE) {\\n            _percentAllocations[0] += uint32(PERCENTAGE_SCALE - runningTotal);\\n        }\\n    }\\n\\n    // Split CONFIG\\n\\n    function setSplitMain(address _splitMain) public onlyOwnerOrUpdater {\\n        splitMain = ISplitMain(_splitMain);\\n    }\\n\\n    function updateNetworkSplitMain(\\n        uint32[] memory _chainIds,\\n        address[] memory _splitsMain,\\n        uint256[] memory _relayerFees\\n    ) external payable onlyOwner validNetworkParams(_chainIds, _relayerFees) {\\n        require(_splitsMain.length == _chainIds.length, \\\"NetworkRegistry: network params length does not match\\\");\\n        bytes4 action = ISplitManager.setSplitMain.selector;\\n        for(uint8 i = 0; i < _chainIds.length; i++) {\\n            bytes memory callData = abi.encode(action, _splitsMain[i]);\\n            _execSyncAction(action, callData, _chainIds[i], _relayerFees[i]);\\n        }\\n    }\\n\\n    function setSplit(address _split, uint32 _splitDistributorFee) public onlyOwnerOrUpdater {\\n        split = _split;\\n        splitDistributorFee = _splitDistributorFee;\\n    }\\n\\n    function updateNetworkSplit(\\n        uint32[] memory _chainIds,\\n        address[] memory _splits,\\n        uint32[] memory _splitDistributorFees,\\n        uint256[] memory _relayerFees\\n    ) external payable onlyOwner validNetworkParams(_chainIds, _relayerFees) {\\n        require(\\n            _splits.length == _chainIds.length && _splitDistributorFees.length == _chainIds.length,\\n            \\\"NetworkRegistry: network params length does not match\\\"\\n        );\\n        bytes4 action = ISplitManager.setSplit.selector;\\n        for(uint8 i = 0; i < _chainIds.length; i++) {\\n            bytes memory callData = abi.encode(action, _splits[i], _splitDistributorFees[i]);\\n            _execSyncAction(action, callData, _chainIds[i], _relayerFees[i]);\\n        }\\n    }\\n\\n    // 0xSplits OWNERSHIP INTERFCE WRAPPERS\\n\\n    function transferSplitControl(address _newController) public onlyOwnerOrUpdater {\\n        splitMain.transferControl(split, _newController);\\n    }\\n\\n    function transferNetworkSplitControl(\\n        uint32[] memory _chainIds,\\n        address[] memory _newControllers,\\n        uint256[] memory _relayerFees\\n    ) external payable onlyOwner validNetworkParams(_chainIds, _relayerFees) {\\n        require(_newControllers.length == _chainIds.length, \\\"NetworkRegistry: network params length does not match\\\");\\n        bytes4 action = ISplitManager.transferSplitControl.selector;\\n        for(uint8 i = 0; i < _chainIds.length; i++) {\\n            bytes memory callData = abi.encode(action, _newControllers[i]);\\n            _execSyncAction(action, callData, _chainIds[i], _relayerFees[i]);\\n        }\\n    }\\n\\n    function acceptSplitControl() public onlyOwnerOrUpdater {\\n        splitMain.acceptControl(split);\\n    }\\n\\n    function acceptNetworkSplitControl(\\n        uint32[] memory _chainIds,\\n        uint256[] memory _relayerFees\\n    ) external payable onlyOwner validNetworkParams(_chainIds, _relayerFees) {\\n        bytes4 action = ISplitManager.acceptSplitControl.selector;\\n        bytes memory callData = abi.encode(action);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    function cancelSplitControlTransfer() public onlyOwnerOrUpdater {\\n        splitMain.cancelControlTransfer(split);\\n    }\\n\\n    function cancelNetworkSplitControlTransfer(\\n        uint32[] memory _chainIds,\\n        uint256[] memory _relayerFees\\n    ) external payable onlyOwner validNetworkParams(_chainIds, _relayerFees) {\\n        bytes4 action = ISplitManager.cancelSplitControlTransfer.selector;\\n        bytes memory callData = abi.encode(action);\\n        _syncRegistries(action, callData, _chainIds, _relayerFees);\\n    }\\n\\n    /** @notice The receiver function as required by the IXReceiver interface.\\n     * @dev \\n     */\\n    function xReceive(\\n        bytes32 _transferId,\\n        uint256 /* _amount */,\\n        address /* _asset */,\\n        address _originSender,\\n        uint32 _origin,\\n        bytes memory _incomingCalldata\\n    ) external onlyUpdater(_originSender, _origin) returns (bytes memory) {\\n        bytes4 action = abi.decode(_incomingCalldata, (bytes4));\\n        bytes memory callData;\\n        if (action == IMemberRegistry.setNewMember.selector) {\\n            (\\n                ,\\n                address _member,\\n                uint8 _activityMultiplier,\\n                uint32 _startDate\\n            ) = abi.decode(_incomingCalldata, (bytes4, address, uint8, uint32));\\n            callData = abi.encodeWithSelector(IMemberRegistry.setNewMember.selector, _member, _activityMultiplier, _startDate);\\n        } else if (action == IMemberRegistry.updateMember.selector) {\\n            (, address _member, uint8 _activityMultiplier) = abi.decode(_incomingCalldata, (bytes4, address, uint8));\\n            callData = abi.encodeWithSelector(action, _member, _activityMultiplier);\\n        } else if (action == IMemberRegistry.batchNewMember.selector) {\\n            (\\n                ,\\n                address[] memory _members,\\n                uint8[] memory _activityMultipliers,\\n                uint32[] memory _startDates\\n            ) = abi.decode(_incomingCalldata, (bytes4, address[], uint8[], uint32[]));\\n            callData = abi.encodeWithSelector(action, _members, _activityMultipliers, _startDates);\\n        } else if (action == IMemberRegistry.batchUpdateMember.selector) {\\n            (\\n                ,\\n                address[] memory _members,\\n                uint8[] memory _activityMultipliers\\n            ) = abi.decode(_incomingCalldata, (bytes4, address[], uint8[]));\\n            callData = abi.encodeWithSelector(action, _members, _activityMultipliers);\\n        } else if (action == IMemberRegistry.updateSecondsActive.selector) {\\n            callData = abi.encodeWithSelector(action);\\n        } else if (action == ISplitManager.updateSplits.selector) {\\n            (, address[] memory _sortedList) = abi.decode(_incomingCalldata, (bytes4, address[]));\\n            callData = abi.encodeWithSelector(action, _sortedList);\\n        } else if (action == ISplitManager.updateAll.selector) {\\n            (, address[] memory _sortedList) = abi.decode(_incomingCalldata, (bytes4, address[]));\\n            callData = abi.encodeWithSelector(action, _sortedList);\\n        } else if (action == ISplitManager.setSplitMain.selector) {\\n            (, address _splitMain) = abi.decode(_incomingCalldata, (bytes4, address));\\n            callData = abi.encodeWithSelector(action, _splitMain);\\n        } else if (action == ISplitManager.setSplit.selector) {\\n            (, address _split, uint32 _splitDistributorFee) = abi.decode(_incomingCalldata, (bytes4, address, uint32));\\n            callData = abi.encodeWithSelector(action, _split, _splitDistributorFee);\\n        } else if (action == ISplitManager.transferSplitControl.selector) {\\n            (, address _newController) = abi.decode(_incomingCalldata, (bytes4, address));\\n            callData = abi.encodeWithSelector(action, _newController);\\n        } else if (action == ISplitManager.acceptSplitControl.selector) {\\n            callData = abi.encodeWithSelector(action);\\n        } else if (action == ISplitManager.cancelSplitControlTransfer.selector) {\\n            callData = abi.encodeWithSelector(action);\\n        }\\n\\n        (bool success, bytes memory data) = address(this).call(callData);\\n        // console.log(\\\"xReceive success? %s\\\", success);\\n        emit SyncActionPerformed(_transferId, action, success, _origin, _originSender);\\n        return data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x3eb66d07f257a86733c0283464b95eee1ad21b84a4b57b24478e94f0854f5d0e\",\"license\":\"MIT\"},\"contracts/NetworkRegistryShaman.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { IBaal } from \\\"@daohaus/baal-contracts/contracts/interfaces/IBaal.sol\\\";\\n\\nimport { NetworkRegistry } from \\\"./NetworkRegistry.sol\\\";\\n\\ncontract NetworkRegistryShaman is NetworkRegistry {\\n\\n    // string public name;\\n\\n    IBaal public baal;\\n    uint256 public sharesToMint;\\n    bool public burnShares;\\n\\n    modifier isManagerShaman() {\\n        require(address(baal) != address(0), \\\"PGNetworkRegistryShaman: !init\\\");\\n        require(baal.isManager(address(this)), \\\"PGNetworkRegistryShaman: Shaman is not manager\\\");\\n        _;\\n    }\\n\\n    function initialize(bytes memory _initializationParams) external override initializer {\\n        (\\n            address _connext,\\n            uint32 _updaterDomain,\\n            address _updater,\\n            address _splitMain,\\n            address _split,\\n            uint32 _splitDistributorFee,\\n            address _baal,\\n            uint256 _sharesToMint,\\n            bool _burnShares\\n        ) = abi.decode(_initializationParams, (address, uint32, address, address, address, uint32, address, uint256, bool));\\n        __NetworkRegistry_init(\\n            _connext,\\n            _updaterDomain,\\n            _updater,\\n            _splitMain,\\n            _split,\\n            _splitDistributorFee,\\n            _baal\\n        );\\n        baal = IBaal(_baal);\\n        sharesToMint = _sharesToMint;\\n        burnShares = _burnShares;\\n    }\\n\\n    function setNewMember(\\n        address _member,\\n        uint8 _activityMultiplier,\\n        uint32 _startDate\\n    ) public override onlyOwnerOrUpdater isManagerShaman {\\n        super.setNewMember(_member, _activityMultiplier, _startDate);\\n        if (isMainRegistry()) {\\n            require(address(baal) != address(0), \\\"PGNetworkRegistryShaman: !init\\\");\\n            require(baal.isManager(address(this)), \\\"PGNetworkRegistryShaman: Shaman is not manager\\\");\\n            address[] memory _receivers = new address[](1);\\n            _receivers[0] = _member;\\n            uint256[] memory _amounts = new uint256[](1);\\n            _amounts[0] = sharesToMint;\\n            baal.mintShares(_receivers, _amounts);\\n        }\\n    }\\n\\n    function updateMember(\\n        address _member,\\n        uint8 _activityMultiplier\\n    ) public override onlyOwnerOrUpdater isManagerShaman\\n    {\\n        super.updateMember(_member, _activityMultiplier);\\n        if (isMainRegistry() && burnShares) {\\n            require(address(baal) != address(0), \\\"PGNetworkRegistryShaman: !init\\\");\\n            require(baal.isManager(address(this)), \\\"PGNetworkRegistryShaman: Shaman is not manager\\\");\\n            address[] memory _from = new address[](1);\\n            _from[0] = _member;\\n            uint256[] memory _amounts = new uint256[](1);\\n            _amounts[0] = sharesToMint;\\n            baal.burnShares(_from, _amounts);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x17a9a734c549da644b124b6a322b2037c9c54e467281f522fb1166ebe7e35b59\",\"license\":\"MIT\"},\"contracts/interfaces/IMemberRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\ninterface IMemberRegistry {\\n    function setNewMember(address _member, uint8 _activityMultiplier, uint32 _startDate) external;\\n    function updateMember(address _member, uint8 _activityMultiplier) external;\\n    function batchNewMember(address[] memory _members, uint8[] memory _activityMultipliers, uint32[] memory _startDates) external;\\n    function batchUpdateMember(address[] memory _members, uint8[] memory _activityMultipliers) external;\\n\\n    function updateSecondsActive() external;\\n}\\n\",\"keccak256\":\"0x395c5609899b364bf03b09beabc08d5729a6c0eaa5b4353f22953fde51c85cff\",\"license\":\"MIT\"},\"contracts/interfaces/INetworkMemberRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { IMemberRegistry } from \\\"./IMemberRegistry.sol\\\";\\nimport { ISplitManager } from \\\"./ISplitManager.sol\\\";\\n\\ninterface INetworkMemberRegistry is IMemberRegistry, ISplitManager {\\n\\n    struct NetworkRegistry {\\n        uint32 domainId;\\n        address registryAddress; // registryAddress: PGNetworkRegistry on destination\\n        address delegate; // delegate: address that can revert or forceLocal on destination\\n    }\\n\\n    function initialize(bytes memory _initializationParams) external;\\n\\n    function isMainRegistry() external view returns (bool);\\n\\n    function setUpdater(uint32 _updaterDomain, address _updater) external;\\n    function updateNetworkRegistry(uint32 _chainId, NetworkRegistry memory _registry) external;\\n\\n    function syncSetNewMember(\\n        address _member,\\n        uint8 _activityMultiplier,\\n        uint32 _startDate,\\n        uint32[] memory _chainIds,\\n        uint256[] memory _relayerFees\\n    ) external payable;\\n\\n    function syncUpdateMember(\\n        address _member,\\n        uint8 _activityMultiplier,\\n        uint32[] memory chainIds,\\n        uint256[] memory relayerFees\\n    ) external payable;\\n\\n    function syncBatchNewMember(\\n        address[] memory _members,\\n        uint8[] memory _activityMultipliers,\\n        uint32[] memory _startDates,\\n        uint32[] memory _chainIds,\\n        uint256[] memory _relayerFees\\n    ) external payable;\\n\\n    function syncBatchUpdateMember(\\n        address[] memory _members,\\n        uint8[] memory _activityMultipliers,\\n        uint32[] memory _chainIds,\\n        uint256[] memory _relayerFees\\n    ) external payable;\\n\\n    function syncUpdateSecondsActive(\\n        uint32[] memory _chainIds,\\n        uint256[] memory _relayerFees\\n    ) external payable;\\n\\n    function syncUpdateSplits(\\n        address[] memory _sortedList,\\n        uint32[] memory _chainIds,\\n        uint256[] memory _relayerFees\\n    ) external payable;\\n\\n    function syncUpdateAll(\\n        address[] memory _sortedList,\\n        uint32[] memory _chainIds,\\n        uint256[] memory _relayerFees\\n    ) external payable;\\n\\n    function updateNetworkSplitMain(\\n        uint32[] memory _chainIds,\\n        address[] memory _splitsMain,\\n        uint256[] memory _relayerFees\\n    ) external payable;\\n\\n    function updateNetworkSplit(\\n        uint32[] memory _chainIds,\\n        address[] memory _splits,\\n        uint32[] memory _splitDistributorFees,\\n        uint256[] memory _relayerFees\\n    ) external payable;\\n\\n    function transferNetworkSplitControl(\\n        uint32[] memory _chainIds,\\n        address[] memory _newControllers,\\n        uint256[] memory _relayerFees\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x2118d488d8caf9d15252d7226cf45178e58128d7049f09213d44251c88983ba6\",\"license\":\"MIT\"},\"contracts/interfaces/ISplitMain.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISplitMain {\\n  /**\\n   * FUNCTIONS\\n   */\\n\\n  function walletImplementation() external returns (address);\\n\\n  function createSplit(\\n    address[] calldata accounts,\\n    uint32[] calldata percentAllocations,\\n    uint32 distributorFee,\\n    address controller\\n  ) external returns (address);\\n\\n  function predictImmutableSplitAddress(\\n    address[] calldata accounts,\\n    uint32[] calldata percentAllocations,\\n    uint32 distributorFee\\n  ) external view returns (address);\\n\\n  function updateSplit(\\n    address split,\\n    address[] calldata accounts,\\n    uint32[] calldata percentAllocations,\\n    uint32 distributorFee\\n  ) external;\\n\\n  function transferControl(address split, address newController) external;\\n\\n  function cancelControlTransfer(address split) external;\\n\\n  function acceptControl(address split) external;\\n\\n  function makeSplitImmutable(address split) external;\\n\\n  function distributeETH(\\n    address split,\\n    address[] calldata accounts,\\n    uint32[] calldata percentAllocations,\\n    uint32 distributorFee,\\n    address distributorAddress\\n  ) external;\\n\\n  function updateAndDistributeETH(\\n    address split,\\n    address[] calldata accounts,\\n    uint32[] calldata percentAllocations,\\n    uint32 distributorFee,\\n    address distributorAddress\\n  ) external;\\n\\n  function distributeERC20(\\n    address split,\\n    IERC20 token,\\n    address[] calldata accounts,\\n    uint32[] calldata percentAllocations,\\n    uint32 distributorFee,\\n    address distributorAddress\\n  ) external;\\n\\n  function updateAndDistributeERC20(\\n    address split,\\n    IERC20 token,\\n    address[] calldata accounts,\\n    uint32[] calldata percentAllocations,\\n    uint32 distributorFee,\\n    address distributorAddress\\n  ) external;\\n\\n  function withdraw(\\n    address account,\\n    uint256 withdrawETH,\\n    IERC20[] calldata tokens\\n  ) external;\\n\\n  /**\\n   * EVENTS\\n   */\\n\\n  /** @notice emitted after each successful split creation\\n   *  @param split Address of the created split\\n   */\\n  event CreateSplit(address indexed split);\\n\\n  /** @notice emitted after each successful split update\\n   *  @param split Address of the updated split\\n   */\\n  event UpdateSplit(address indexed split);\\n\\n  /** @notice emitted after each initiated split control transfer\\n   *  @param split Address of the split control transfer was initiated for\\n   *  @param newPotentialController Address of the split's new potential controller\\n   */\\n  event InitiateControlTransfer(\\n    address indexed split,\\n    address indexed newPotentialController\\n  );\\n\\n  /** @notice emitted after each canceled split control transfer\\n   *  @param split Address of the split control transfer was canceled for\\n   */\\n  event CancelControlTransfer(address indexed split);\\n\\n  /** @notice emitted after each successful split control transfer\\n   *  @param split Address of the split control was transferred for\\n   *  @param previousController Address of the split's previous controller\\n   *  @param newController Address of the split's new controller\\n   */\\n  event ControlTransfer(\\n    address indexed split,\\n    address indexed previousController,\\n    address indexed newController\\n  );\\n\\n  /** @notice emitted after each successful ETH balance split\\n   *  @param split Address of the split that distributed its balance\\n   *  @param amount Amount of ETH distributed\\n   *  @param distributorAddress Address to credit distributor fee to\\n   */\\n  event DistributeETH(\\n    address indexed split,\\n    uint256 amount,\\n    address indexed distributorAddress\\n  );\\n\\n  /** @notice emitted after each successful ERC20 balance split\\n   *  @param split Address of the split that distributed its balance\\n   *  @param token Address of ERC20 distributed\\n   *  @param amount Amount of ERC20 distributed\\n   *  @param distributorAddress Address to credit distributor fee to\\n   */\\n  event DistributeERC20(\\n    address indexed split,\\n    IERC20 indexed token,\\n    uint256 amount,\\n    address indexed distributorAddress\\n  );\\n\\n  /** @notice emitted after each successful withdrawal\\n   *  @param account Address that funds were withdrawn to\\n   *  @param ethAmount Amount of ETH withdrawn\\n   *  @param tokens Addresses of ERC20s withdrawn\\n   *  @param tokenAmounts Amounts of corresponding ERC20s withdrawn\\n   */\\n  event Withdrawal(\\n    address indexed account,\\n    uint256 ethAmount,\\n    IERC20[] tokens,\\n    uint256[] tokenAmounts\\n  );\\n\\n}\\n\",\"keccak256\":\"0x50c1891ed199522307f89f8299f9a964d0420bacdb39d88994b3291ad1e2ad8a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ISplitManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISplitManager {\\n    function calculate(address[] memory _sortedList) external view returns (address[] memory, uint32[] memory);\\n    function updateSplits(address[] memory _sortedList) external returns (address[] memory, uint32[] memory);\\n    function updateAll(address[] memory _sortedList) external returns (address[] memory, uint32[] memory);\\n\\n    function updateAllAndDistributeETH(address[] memory _sortedList, address _distributorAddress) external;\\n    function updateAllAndDistributeERC20(address[] memory _sortedList, IERC20 _token, address _distributorAddress) external;\\n    \\n    function setSplitMain(address _splitMain) external;\\n    function setSplit(address _split, uint32 _splitDistributorFee) external;\\n    function transferSplitControl(address _newController) external;\\n    function acceptSplitControl() external;\\n    function cancelSplitControlTransfer() external;\\n}\\n\",\"keccak256\":\"0xb6f855962f3a1f7f414949f4abe8dfa6dedb7f4621702c49fd03611eed5c7176\",\"license\":\"MIT\"},\"contracts/registry/MemberRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n//*********************************************************************//\\n// --------------------------- custom errors ------------------------- //\\n//*********************************************************************//\\nerror ALREADY_REGISTERED();\\nerror NOT_REGISTERED();\\nerror START_DATE_IN_FUTURE();\\nerror INVALID_ACTIVITY_MULTIPLIER();\\n\\nabstract contract MemberRegistry {\\n    struct Member {\\n        address account;\\n        uint32 secondsActive;\\n        uint32 startDate;\\n        uint8 activityMultiplier;\\n    }\\n\\n    // store when a update happens\\n    uint32 public lastUpdate;\\n    // iterable\\n    Member[] public members;\\n    uint256 internal count = 0;\\n    mapping(address => uint256) public memberIdxs;\\n\\n    // EVENTS\\n    event SetMember(Member member, uint32 startDate);\\n    event UpdateMemberSeconds(Member member, uint32 newSeconds);\\n    event UpdateMember(Member member);\\n    event Update(uint32 date);\\n\\n    // REGISTERY MODIFIERS\\n\\n    // add member to registry\\n    // if member already exists, update their activity multiplier\\n    // if member does not exist, add them to the registry\\n    function _setNewMember(\\n        address _member,\\n        uint8 _activityMultiplier,\\n        uint32 _startDate\\n    ) internal {\\n        if(memberIdxs[_member] != 0) revert ALREADY_REGISTERED();\\n        if(_startDate > uint32(block.timestamp)) revert START_DATE_IN_FUTURE();\\n        if(_activityMultiplier > 100) revert INVALID_ACTIVITY_MULTIPLIER();\\n\\n        // set to 0, will be updated in next update\\n        uint32 secsActive = 0;\\n        members.push(\\n            Member(_member, secsActive, _startDate, _activityMultiplier)\\n        );\\n        count += 1;\\n        memberIdxs[_member] = count;\\n        emit SetMember(members[count - 1], uint32(block.timestamp)); // index is minus 1 for 0 index array\\n    }\\n\\n    function _updateMember(\\n        address _member,\\n        uint8 _activityMultiplier // 0-100 %\\n    ) internal {\\n        if(memberIdxs[_member] == 0) revert NOT_REGISTERED();\\n        if(_activityMultiplier > 100) revert INVALID_ACTIVITY_MULTIPLIER();\\n\\n        members[memberIdxs[_member] - 1]\\n            .activityMultiplier = _activityMultiplier;\\n        emit UpdateMember(members[memberIdxs[_member] - 1]);\\n    }\\n\\n    // add seconds active to member from last update\\n    // for brand new members it will be an update from their start date\\n    // todo: this could be more generic, use a controller contract to update\\n    function _updateSecondsActive() internal virtual {\\n        uint32 currentUpdate = uint32(block.timestamp);\\n        // update struct with total seconds active and seconds in last claim\\n        for (uint256 i = 0; i < members.length; i++) {\\n            Member storage _member = members[i];\\n\\n            uint32 newSeconds = 0;\\n            if (_member.secondsActive == 0) {\\n                // new member will be 0 and should get seconds from start date\\n                newSeconds = (currentUpdate - _member.startDate);\\n            } else {\\n                newSeconds = (currentUpdate - lastUpdate);\\n            }\\n            // multiple by modifier and divide by 100 to get modifier % of seconds\\n            uint32 newSecondsActive = (newSeconds *\\n                _member.activityMultiplier) / 100;\\n            _member.secondsActive += newSecondsActive;\\n            emit UpdateMemberSeconds(_member, newSecondsActive);\\n        }\\n        lastUpdate = currentUpdate;\\n        emit Update(currentUpdate);\\n    }\\n\\n    function getMembers() public view returns (Member[] memory) {\\n        return members;\\n    }\\n\\n    function getMember(address _member) public view returns (Member memory) {\\n        if(memberIdxs[_member] == 0) revert NOT_REGISTERED();\\n        return members[memberIdxs[_member] - 1];\\n    }\\n\\n    function totalMembers() public view returns (uint256) {\\n        return members.length;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x84cc12cbd97d7b62b6cda2306b95aabdcdcb4281ef9e3af6c14b13efd3e3f6fd\",\"license\":\"GPL-3.0-or-later\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006067553480156200001657600080fd5b506200002162000027565b620000e9565b600054610100900460ff1615620000945760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161015620000e7576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6156bd80620000f96000396000f3fe60806040526004361061031a5760003560e01c8063831d74ef116101ab578063cb30af6e116100f7578063f2fde38b11610095578063fa6062e01161006f578063fa6062e014610968578063fc1468dc1461097b578063fd614f411461099b578063fdf4bd29146109c857600080fd5b8063f2fde38b14610904578063f765417614610924578063f98cc7c91461094457600080fd5b8063de4b0548116100d1578063de4b05481461088f578063df034cd0146108af578063e4a7c603146108cf578063e5a2a2a5146108e457600080fd5b8063cb30af6e1461082f578063d173ba061461084f578063d863d18d1461086f57600080fd5b80639eab525311610164578063b0affdf71161013e578063b0affdf7146107ae578063bf59b488146107ce578063c0463711146107f2578063c57576c41461080f57600080fd5b80639eab525314610764578063a084b6c014610786578063b044631c1461079b57600080fd5b8063831d74ef146106635780638da5cb5b146106765780638ddc5f3514610694578063979bc155146107115780639cc96363146107315780639d7b85451461074457600080fd5b8063479d0a0d1161026a57806364c6d00a1161022357806375491512116101fd57806375491512146106035780637698a8331461061957806376e925591461063957806380e038bc1461064e57600080fd5b806364c6d00a146105c85780636bda59da146105db578063715018a6146105ee57600080fd5b8063479d0a0d146104ea57806349be1b921461051857806356c0e9921461052b5780635daf08ca1461053e578063610498d91461059557806361bc3111146105a857600080fd5b80631eee592e116102d757806334e2fc65116102b157806334e2fc651461044e578063371b52e3146104895780633f26479e1461049e578063439fab91146104ca57600080fd5b80631eee592e146103ee5780632ada259614610401578063339c34f71461042e57600080fd5b806301dabadc1461031f57806306a53350146103415780630971ee81146103615780630bddc56b146103745780630e769b2b146103a35780631049d736146103db575b600080fd5b34801561032b57600080fd5b5061033f61033a36600461407a565b6109db565b005b34801561034d57600080fd5b5061033f61035c366004614101565b610aa7565b61033f61036f3660046141bf565b610b3c565b34801561038057600080fd5b50609d5461038e9060ff1681565b60405190151581526020015b60405180910390f35b3480156103af57600080fd5b50606c546103c3906001600160a01b031681565b6040516001600160a01b03909116815260200161039a565b61033f6103e9366004614290565b610c29565b61033f6103fc3660046142f3565b610f07565b34801561040d57600080fd5b5061042161041c366004614352565b610fed565b60405161039a91906143ac565b34801561043a57600080fd5b5061033f6104493660046143c0565b6110dd565b34801561045a57600080fd5b5061047b610469366004614352565b60686020526000908152604090205481565b60405190815260200161039a565b34801561049557600080fd5b5061033f611170565b3480156104aa57600080fd5b506104b5620f424081565b60405163ffffffff909116815260200161039a565b3480156104d657600080fd5b5061033f6104e5366004614480565b611217565b3480156104f657600080fd5b5061050a6105053660046144bc565b6113a2565b60405161039a92919061456a565b61033f61052636600461458f565b611432565b61033f610539366004614290565b6115f1565b34801561054a57600080fd5b5061055e61055936600461463b565b6116c7565b604080516001600160a01b0395909516855263ffffffff9384166020860152919092169083015260ff16606082015260800161039a565b61033f6105a3366004614654565b611717565b3480156105b457600080fd5b5061033f6105c33660046146d1565b6117ed565b61033f6105d6366004614290565b61183d565b61033f6105e93660046146ff565b6118f1565b3480156105fa57600080fd5b5061033f611a2f565b34801561060f57600080fd5b5061047b609c5481565b34801561062557600080fd5b5061033f610634366004614759565b611a43565b34801561064557600080fd5b5060665461047b565b34801561065a57600080fd5b5061033f611b4c565b61033f6106713660046146ff565b611bc9565b34801561068257600080fd5b506033546001600160a01b03166103c3565b3480156106a057600080fd5b506106e56106af3660046147f3565b606b602052600090815260409020805460019091015463ffffffff8216916001600160a01b036401000000009091048116911683565b6040805163ffffffff90941684526001600160a01b03928316602085015291169082015260600161039a565b34801561071d57600080fd5b5061033f61072c366004614810565b611d07565b61033f61073f366004614850565b611f93565b34801561075057600080fd5b5061033f61075f366004614352565b612072565b34801561077057600080fd5b50610779612127565b60405161039a91906148ab565b34801561079257600080fd5b5061038e6121c0565b61033f6107a9366004614290565b6121ee565b3480156107ba57600080fd5b5061050a6107c93660046144bc565b6122a2565b3480156107da57600080fd5b506069546104b590600160a01b900463ffffffff1681565b3480156107fe57600080fd5b506065546104b59063ffffffff1681565b34801561081b57600080fd5b5061033f61082a3660046148f9565b61268e565b34801561083b57600080fd5b5061033f61084a366004614352565b612922565b34801561085b57600080fd5b5061033f61086a366004614927565b61298d565b34801561087b57600080fd5b5061050a61088a3660046144bc565b612a08565b34801561089b57600080fd5b506069546103c3906001600160a01b031681565b3480156108bb57600080fd5b50606a546103c3906001600160a01b031681565b3480156108db57600080fd5b5061033f612a26565b3480156108f057600080fd5b50609b546103c3906001600160a01b031681565b34801561091057600080fd5b5061033f61091f366004614352565b612a2e565b34801561093057600080fd5b50606d546103c3906001600160a01b031681565b34801561095057600080fd5b50606d546104b590600160a01b900463ffffffff1681565b61033f610976366004614955565b612aa7565b34801561098757600080fd5b5061033f6109963660046149a2565b612b80565b3480156109a757600080fd5b506109bb6109b63660046149fb565b612c23565b60405161039a9190614ad1565b61033f6109d6366004614654565b61324f565b6033546001600160a01b0316331480610a085750606a546001600160a01b031615801590610a0857503330145b610a2d5760405162461bcd60e51b8152600401610a2490614ae4565b60405180910390fd5b60005b8351811015610aa157610a8f848281518110610a4e57610a4e614b41565b6020026020010151848381518110610a6857610a68614b41565b6020026020010151848481518110610a8257610a82614b41565b6020026020010151611d07565b80610a9981614b6d565b915050610a30565b50505050565b600080610ab385612a08565b606c54606d54604051630ac0898160e11b81529395509193506001600160a01b0390811692631581130292610b0392811691899188918891600160a01b900463ffffffff16908b90600401614b86565b600060405180830381600087803b158015610b1d57600080fd5b505af1158015610b31573d6000803e3d6000fd5b505050505050505050565b610b44613308565b81818051825114610b675760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff161015610bb357828160ff1681518110610b8c57610b8c614b41565b602002602001015182610b9f9190614c29565b915080610bab81614c3c565b915050610b6b565b50803414610bd35760405162461bcd60e51b8152600401610a2490614c5b565b610bde8888886109db565b6040516276aeb760e21b90600090610c009083908c908c908c90602001614ceb565b6040516020818303038152906040529050610c1d82828989613362565b50505050505050505050565b610c31613308565b81818051825114610c545760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff161015610ca057828160ff1681518110610c7957610c79614b41565b602002602001015182610c8c9190614c29565b915080610c9881614c3c565b915050610c58565b50803414610cc05760405162461bcd60e51b8152600401610a2490614c5b565b6066546000906001600160401b03811115610cdd57610cdd613e9f565b604051908082528060200260200182016040528015610d06578160200160208202803683370190505b506066549091506000906001600160401b03811115610d2757610d27613e9f565b604051908082528060200260200182016040528015610d50578160200160208202803683370190505b506066549091506000906001600160401b03811115610d7157610d71613e9f565b604051908082528060200260200182016040528015610d9a578160200160208202803683370190505b50905060005b606654811015610ec75760668181548110610dbd57610dbd614b41565b60009182526020909120015484516001600160a01b0390911690859083908110610de957610de9614b41565b60200260200101906001600160a01b031690816001600160a01b03168152505060668181548110610e1c57610e1c614b41565b90600052602060002001600001601c9054906101000a900460ff16838281518110610e4957610e49614b41565b602002602001019060ff16908160ff168152505060668181548110610e7057610e70614b41565b9060005260206000200160000160189054906101000a900463ffffffff16828281518110610ea057610ea0614b41565b63ffffffff9092166020928302919091019091015280610ebf81614b6d565b915050610da0565b506040516276aeb760e21b90600090610eea908390879087908790602001614ceb565b6040516020818303038152906040529050610c1d82828c8c613362565b610f0f613308565b81818051825114610f325760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff161015610f7e57828160ff1681518110610f5757610f57614b41565b602002602001015182610f6a9190614c29565b915080610f7681614c3c565b915050610f36565b50803414610f9e5760405162461bcd60e51b8152600401610a2490614c5b565b610fa9888888611d07565b6040805163979bc15560e01b602082018190526001600160a01b038b169282019290925260ff8916606082015263ffffffff8816608082015260009060a001610c00565b6040805160808101825260008082526020808301829052828401829052606083018290526001600160a01b03851682526068905291822054909103611045576040516360f4985360e01b815260040160405180910390fd5b6001600160a01b03821660009081526068602052604090205460669061106d90600190614d3e565b8154811061107d5761107d614b41565b60009182526020918290206040805160808101825292909101546001600160a01b0381168352600160a01b810463ffffffff90811694840194909452600160c01b810490931690820152600160e01b90910460ff16606082015292915050565b6000806110e984612a08565b606c54606d5460405163730e582f60e11b81529395509193506001600160a01b039081169263e61cb05e926111389281169187918791600160a01b90910463ffffffff16908a90600401614d51565b600060405180830381600087803b15801561115257600080fd5b505af1158015611166573d6000803e3d6000fd5b5050505050505050565b6033546001600160a01b031633148061119d5750606a546001600160a01b03161580159061119d57503330145b6111b95760405162461bcd60e51b8152600401610a2490614ae4565b606c54606d54604051630933e36d60e11b81526001600160a01b039182166004820152911690631267c6da906024015b600060405180830381600087803b15801561120357600080fd5b505af1158015610aa1573d6000803e3d6000fd5b600054610100900460ff16158080156112375750600054600160ff909116105b806112515750303b158015611251575060005460ff166001145b6112b45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a24565b6000805460ff1916600117905580156112d7576000805461ff0019166101001790555b60008060008060008060008060008a8060200190518101906112f99190614dbb565b98509850985098509850985098509850985061131a898989898989896133ba565b609b80546001600160a01b0319166001600160a01b039490941693909317909255609c55609d805460ff191691151591909117905550508415935061139e92505050576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b5050565b6060806113ae836122a2565b606c54606d54604051637677856760e11b81529395509193506001600160a01b039081169263ecef0ace926113fb9281169187918791600160a01b90910463ffffffff1690600401614e71565b600060405180830381600087803b15801561141557600080fd5b505af1158015611429573d6000803e3d6000fd5b50505050915091565b61143a613308565b8381805182511461145d5760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff1610156114a957828160ff168151811061148257611482614b41565b6020026020010151826114959190614c29565b9150806114a181614c3c565b915050611461565b508034146114c95760405162461bcd60e51b8152600401610a2490614c5b565b865186511480156114db575086518551145b6114f75760405162461bcd60e51b8152600401610a2490614ebf565b6368b9dd0360e11b60005b88518160ff161015610b3157600082898360ff168151811061152657611526614b41565b6020026020010151898460ff168151811061154357611543614b41565b6020026020010151604051602001611589939291906001600160e01b03199390931683526001600160a01b0391909116602083015263ffffffff16604082015260600190565b60405160208183030381529060405290506115de83828c8560ff16815181106115b4576115b4614b41565b60200260200101518a8660ff16815181106115d1576115d1614b41565b602002602001015161341b565b50806115e981614c3c565b915050611502565b6115f9613308565b8181805182511461161c5760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff16101561166857828160ff168151811061164157611641614b41565b6020026020010151826116549190614c29565b91508061166081614c3c565b915050611620565b508034146116885760405162461bcd60e51b8152600401610a2490614c5b565b604080516320380e2f60e21b6020820181905291600091015b60405160208183030381529060405290506116be82828989613362565b50505050505050565b606681815481106116d757600080fd5b6000918252602090912001546001600160a01b038116915063ffffffff600160a01b8204811691600160c01b81049091169060ff600160e01b9091041684565b8181805182511461173a5760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff16101561178657828160ff168151811061175f5761175f614b41565b6020026020010151826117729190614c29565b91508061177e81614c3c565b91505061173e565b508034146117a65760405162461bcd60e51b8152600401610a2490614c5b565b6117af86612a08565b505060405163d863d18d60e01b906000906117d09083908a90602001614f14565b604051602081830303815290604052905061116682828989613362565b6117f5613308565b6069805463ffffffff909316600160a01b0263ffffffff60a01b1990931692909217909155606a80546001600160a01b039092166001600160a01b0319909216919091179055565b611845613308565b818180518251146118685760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff1610156118b457828160ff168151811061188d5761188d614b41565b6020026020010151826118a09190614c29565b9150806118ac81614c3c565b91505061186c565b508034146118d45760405162461bcd60e51b8152600401610a2490614c5b565b6040805163371b52e360e01b6020820181905291600091016116a1565b6118f9613308565b8281805182511461191c5760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff16101561196857828160ff168151811061194157611941614b41565b6020026020010151826119549190614c29565b91508061196081614c3c565b915050611920565b508034146119885760405162461bcd60e51b8152600401610a2490614c5b565b85518551146119a95760405162461bcd60e51b8152600401610a2490614ebf565b639d7b854560e01b60005b87518160ff16101561116657600082888360ff16815181106119d8576119d8614b41565b60200260200101516040516020016119f1929190614f36565b6040516020818303038152906040529050611a1c83828b8560ff16815181106115b4576115b4614b41565b5080611a2781614c3c565b9150506119b4565b611a37613308565b611a41600061349b565b565b611a4b613308565b60208101516001600160a01b0316611aa55760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964207265676973747279206164647265737300000000000000006044820152606401610a24565b63ffffffff8281166000818152606b60209081526040918290208551815487840151919096166001600160c01b031990961686176401000000006001600160a01b0392831690810291909117835587850151600190930180546001600160a01b0319169390921692831790915583519586529185015291927f1352db1150d62c03f88cdd76a3690564b2ee64659da5f7b7fa0750188cf95aa3910160405180910390a35050565b6033546001600160a01b0316331480611b795750606a546001600160a01b031615801590611b7957503330145b611b955760405162461bcd60e51b8152600401610a2490614ae4565b606c54606d5460405163031f799160e61b81526001600160a01b03918216600482015291169063c7de6440906024016111e9565b611bd1613308565b82818051825114611bf45760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff161015611c4057828160ff1681518110611c1957611c19614b41565b602002602001015182611c2c9190614c29565b915080611c3881614c3c565b915050611bf8565b50803414611c605760405162461bcd60e51b8152600401610a2490614c5b565b8551855114611c815760405162461bcd60e51b8152600401610a2490614ebf565b63659857b760e11b60005b87518160ff16101561116657600082888360ff1681518110611cb057611cb0614b41565b6020026020010151604051602001611cc9929190614f36565b6040516020818303038152906040529050611cf483828b8560ff16815181106115b4576115b4614b41565b5080611cff81614c3c565b915050611c8c565b6033546001600160a01b0316331480611d345750606a546001600160a01b031615801590611d3457503330145b611d505760405162461bcd60e51b8152600401610a2490614ae4565b609b546001600160a01b0316611d785760405162461bcd60e51b8152600401610a2490614f59565b609b5460405163f3ae241560e01b81523060048201526001600160a01b039091169063f3ae241590602401602060405180830381865afa158015611dc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de49190614f90565b611e005760405162461bcd60e51b8152600401610a2490614fab565b611e0b8383836134ed565b611e136121c0565b15611f8e57609b546001600160a01b0316611e405760405162461bcd60e51b8152600401610a2490614f59565b609b5460405163f3ae241560e01b81523060048201526001600160a01b039091169063f3ae241590602401602060405180830381865afa158015611e88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eac9190614f90565b611ec85760405162461bcd60e51b8152600401610a2490614fab565b604080516001808252818301909252600091602080830190803683370190505090508381600081518110611efe57611efe614b41565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050609c5481600081518110611f5157611f51614b41565b6020908102919091010152609b54604051632c78fd0360e21b81526001600160a01b039091169063b1e3f40c90610b039085908590600401614ff9565b505050565b611f9b613308565b81818051825114611fbe5760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff16101561200a57828160ff1681518110611fe357611fe3614b41565b602002602001015182611ff69190614c29565b91508061200281614c3c565b915050611fc2565b5080341461202a5760405162461bcd60e51b8152600401610a2490614c5b565b6120348787612b80565b604051633f051a3760e21b906000906120559083908b908b90602001615050565b6040516020818303038152906040529050610b3182828989613362565b6033546001600160a01b031633148061209f5750606a546001600160a01b03161580159061209f57503330145b6120bb5760405162461bcd60e51b8152600401610a2490614ae4565b606c54606d546040516334392cbd60e21b81526001600160a01b039182166004820152838216602482015291169063d0e4b2f490604401600060405180830381600087803b15801561210c57600080fd5b505af1158015612120573d6000803e3d6000fd5b5050505050565b60606066805480602002602001604051908101604052809291908181526020016000905b828210156121b757600084815260209081902060408051608081018252918501546001600160a01b038116835263ffffffff600160a01b8204811684860152600160c01b8204169183019190915260ff600160e01b90910416606082015282526001909201910161214b565b50505050905090565b606954600090600160a01b900463ffffffff161580156121e95750606a546001600160a01b0316155b905090565b818180518251146122115760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff16101561225d57828160ff168151811061223657612236614b41565b6020026020010151826122499190614c29565b91508061225581614c3c565b915050612215565b5080341461227d5760405162461bcd60e51b8152600401610a2490614c5b565b612285612a26565b6040805163e4a7c60360e01b6020820181905291600091016116a1565b60608060008060006066805490508651146122d0576040516307c7182360e11b815260040160405180910390fd5b60005b86518110156124005760008782815181106122f0576122f0614b41565b6020026020010151905060686000826001600160a01b03166001600160a01b031681526020019081526020016000205460001480156123415750826001600160a01b0316816001600160a01b031610155b1561235f57604051632056648360e01b815260040160405180910390fd5b80925060006066838154811061237757612377614b41565b600091825260209091200154600160e01b900460ff1611156123ed576123d36123d06123cb606685815481106123af576123af614b41565b600091825260209091200154600160a01b900463ffffffff1690565b613541565b90565b6123dd9085614c29565b9350846123e981614b6d565b9550505b50806123f881614b6d565b9150506122d3565b50826001600160401b0381111561241957612419613e9f565b604051908082528060200260200182016040528015612442578160200160208202803683370190505b509450826001600160401b0381111561245d5761245d613e9f565b604051908082528060200260200182016040528015612486578160200160208202803683370190505b50935060008060005b8851811015612635576000606860008b84815181106124b0576124b0614b41565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020549050600060666001836124ec9190614d3e565b815481106124fc576124fc614b41565b60009182526020918290206040805160808101825292909101546001600160a01b0381168352600160a01b810463ffffffff90811694840194909452600160c01b810490931690820152600160e01b90910460ff1660608201819052909150156126205780600001518a858151811061257757612577614b41565b6001600160a01b039092166020928302919091018201528101518790620f4240906125ab906123d09063ffffffff16613541565b6125b5919061508e565b6125bf91906150bb565b8985815181106125d1576125d1614b41565b602002602001019063ffffffff16908163ffffffff16815250508884815181106125fd576125fd614b41565b60200260200101518561261091906150cf565b94508361261c81614b6d565b9450505b5050808061262d90614b6d565b91505061248f565b5063ffffffff8216620f4240146126845761265382620f42406150f3565b8660008151811061266657612666614b41565b6020026020010181815161267a91906150cf565b63ffffffff169052505b5050505050915091565b6033546001600160a01b03163314806126bb5750606a546001600160a01b0316158015906126bb57503330145b6126d75760405162461bcd60e51b8152600401610a2490614ae4565b609b546001600160a01b03166126ff5760405162461bcd60e51b8152600401610a2490614f59565b609b5460405163f3ae241560e01b81523060048201526001600160a01b039091169063f3ae241590602401602060405180830381865afa158015612747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276b9190614f90565b6127875760405162461bcd60e51b8152600401610a2490614fab565b612791828261359e565b6127996121c0565b80156127a75750609d5460ff165b1561139e57609b546001600160a01b03166127d45760405162461bcd60e51b8152600401610a2490614f59565b609b5460405163f3ae241560e01b81523060048201526001600160a01b039091169063f3ae241590602401602060405180830381865afa15801561281c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128409190614f90565b61285c5760405162461bcd60e51b8152600401610a2490614fab565b60408051600180825281830190925260009160208083019080368337019050509050828160008151811061289257612892614b41565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050609c54816000815181106128e5576128e5614b41565b6020908102919091010152609b5460405163262949f360e21b81526001600160a01b03909116906398a527cc906111389085908590600401614ff9565b6033546001600160a01b031633148061294f5750606a546001600160a01b03161580159061294f57503330145b61296b5760405162461bcd60e51b8152600401610a2490614ae4565b606c80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314806129ba5750606a546001600160a01b0316158015906129ba57503330145b6129d65760405162461bcd60e51b8152600401610a2490614ae4565b606d805463ffffffff909216600160a01b026001600160c01b03199092166001600160a01b0390931692909217179055565b606080612a13612a26565b612a1c836113a2565b9094909350915050565b611a416135f1565b612a36613308565b6001600160a01b038116612a9b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a24565b612aa48161349b565b50565b612aaf613308565b81818051825114612ad25760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff161015612b1e57828160ff1681518110612af757612af7614b41565b602002602001015182612b0a9190614c29565b915080612b1681614c3c565b915050612ad6565b50803414612b3e5760405162461bcd60e51b8152600401610a2490614c5b565b612b48878761268e565b6040805163315d5db160e21b602082018190526001600160a01b038a169282019290925260ff88166060820152600090608001612055565b6033546001600160a01b0316331480612bad5750606a546001600160a01b031615801590612bad57503330145b612bc95760405162461bcd60e51b8152600401610a2490614ae4565b60005b8251811015611f8e57612c11838281518110612bea57612bea614b41565b6020026020010151838381518110612c0457612c04614b41565b602002602001015161268e565b80612c1b81614b6d565b915050612bcc565b6069546060908490849063ffffffff808316600160a01b90920416148015612c585750606a546001600160a01b038381169116145b8015612c7757506069546001600160a01b0316336001600160a01b0316145b612d295760405162461bcd60e51b815260206004820152607160248201527f4e6574776f726b52656769737472793a204578706563746564206f726967696e60448201527f616c2063616c6c657220746f20626520736f7572636520636f6e74726163742060648201527f6f6e206f726967696e20646f6d61696e20616e64207468697320746f2062652060848201527018d85b1b195908189e4810dbdb9b995e1d607a1b60a482015260c401610a24565b600084806020019051810190612d3f9190615128565b905060606368643eab60e01b6001600160e01b0319831601612dee57600080600088806020019051810190612d749190615143565b6040516001600160a01b038416602482015260ff8316604482015263ffffffff82166064820152929650909450925063979bc15560e01b91506084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152935061317492505050565b630ea2a24f60e21b6001600160e01b0319831601612e805760008087806020019051810190612e1d919061519f565b6040516001600160a01b038316602482015260ff8216604482015291945092508591506064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529250613174915050565b633f89514960e21b6001600160e01b0319831601612ece57600080600088806020019051810190612eb191906152a6565b9350935093505084838383604051602401612db19392919061539b565b62fae5c960e21b6001600160e01b0319831601612f155760008087806020019051810190612efc91906153d4565b9250925050838282604051602401612e4492919061543d565b631b5839fd60e01b6001600160e01b0319831601612f5f57506040805160048152602481019091526020810180516001600160e01b03166001600160e01b03198416179052613174565b63b862f5f360e01b6001600160e01b0319831601612fdd57600086806020019051810190612f8d9190615462565b9150508281604051602401612fa291906154a5565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915291506131749050565b63279c2e7360e01b6001600160e01b031983160161300b57600086806020019051810190612f8d9190615462565b631a67a84960e11b6001600160e01b03198316016130595760008680602001905181019061303991906154b8565b6040516001600160a01b0382166024820152909250849150604401612fa2565b63174622fd60e11b6001600160e01b03198316016130b6576000808780602001905181019061308891906154e4565b6040516001600160a01b038316602482015263ffffffff821660448201529194509250859150606401612e44565b6362847abb60e01b6001600160e01b03198316016130e45760008680602001905181019061303991906154b8565b631fc7f1d160e21b6001600160e01b031983160161312e57506040805160048152602481019091526020810180516001600160e01b03166001600160e01b03198416179052613174565b63c8e4ad1d60e01b6001600160e01b031983160161317457506040805160048152602481019091526020810180516001600160e01b03166001600160e01b031984161790525b600080306001600160a01b03168360405161318f9190615523565b6000604051808303816000865af19150503d80600081146131cc576040519150601f19603f3d011682016040523d82523d6000602084013e6131d1565b606091505b5091509150811515846001600160e01b0319167f1c3c9d979bd19ded3647c9c371dd9005c98dd77d9655655b3ac1b0c174dcbf098f8c8e6040516132379392919092835263ffffffff9190911660208301526001600160a01b0316604082015260600190565b60405180910390a39c9b505050505050505050505050565b818180518251146132725760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff1610156132be57828160ff168151811061329757613297614b41565b6020026020010151826132aa9190614c29565b9150806132b681614c3c565b915050613276565b508034146132de5760405162461bcd60e51b8152600401610a2490614c5b565b6132e7866113a2565b505060405163479d0a0d60e01b906000906117d09083908a90602001614f14565b6033546001600160a01b03163314611a415760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a24565b60005b82518160ff161015612120576133a88585858460ff168151811061338b5761338b614b41565b6020026020010151858560ff16815181106115d1576115d1614b41565b806133b281614c3c565b915050613365565b600054610100900460ff166133e15760405162461bcd60e51b8152600401610a249061553f565b6133e9613772565b6133f78787878787876137a1565b6001600160a01b0381166134125761340d611a2f565b6116be565b6116be81612a2e565b6000613428838584613839565b63ffffffff84166000818152606b60209081526040918290205491516401000000009092046001600160a01b0316825292935083926001600160e01b03198916917f08ccbfaba6869ea4aad2d3c80728aecf60570163a9f7ab0b292fdea62e211e37910160405180910390a45050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6033546001600160a01b031633148061351a5750606a546001600160a01b03161580159061351a57503330145b6135365760405162461bcd60e51b8152600401610a2490614ae4565b611f8e8383836139d5565b6000817812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f218111156135815760405163edc236ad60e01b815260048101849052602401610a24565b6135976123d0670de0b6b3a76400008302613bc7565b9392505050565b6033546001600160a01b03163314806135cb5750606a546001600160a01b0316158015906135cb57503330145b6135e75760405162461bcd60e51b8152600401610a2490614ae4565b61139e8282613d3f565b4260005b6066548110156137235760006066828154811061361457613614614b41565b600091825260208220018054909250600160a01b900463ffffffff16810361365657815461364f90600160c01b900463ffffffff16856150f3565b905061366c565b6065546136699063ffffffff16856150f3565b90505b815460009060649061368890600160e01b900460ff168461558a565b61369291906155b2565b8354909150819084906014906136b6908490600160a01b900463ffffffff166150cf565b92506101000a81548163ffffffff021916908363ffffffff1602179055507f393ca387760e64235f59b8fb5a7e7736887380bcacd89855f4e170abdf7aebbe838260405161370592919061560d565b60405180910390a1505050808061371b90614b6d565b9150506135f5565b506065805463ffffffff191663ffffffff83169081179091556040519081527f5624889e22dfb82f30d92d6882aecff897f9f67a4a4d224257d424d2420ee8c09060200160405180910390a150565b600054610100900460ff166137995760405162461bcd60e51b8152600401610a249061553f565b611a41613e6f565b600054610100900460ff166137c85760405162461bcd60e51b8152600401610a249061553f565b606980546001600160a01b039788166001600160c01b031991821617600160a01b63ffffffff988916810291909117909255606a80546001600160a01b0319908116978a16979097179055606c805490961694881694909417909455606d8054929096169190921617921602179055565b63ffffffff8084166000908152606b602052604081208054919290911682036138b35760405162461bcd60e51b815260206004820152602660248201527f4e6574776f726b52656769737472793a204e6f7420537570706f72746564204e6044820152656574776f726b60d01b6064820152608401610a24565b805464010000000090046001600160a01b03166139205760405162461bcd60e51b815260206004820152602560248201527f4e6574776f726b52656769737472793a4e6f7420537570706f72746564204e6560448201526474776f726b60d81b6064820152608401610a24565b60695463ffffffff8681166000908152606b6020526040808220805460019091015491516345560b5d60e11b81526001600160a01b0395861695638aac16ba958a9561398995918516946401000000009004831693909290911690829081908e9060040161562e565b60206040518083038185885af11580156139a7573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906139cc9190615689565b95945050505050565b6001600160a01b03831660009081526068602052604090205415613a0c576040516303d5de1560e61b815260040160405180910390fd5b4263ffffffff168163ffffffff161115613a395760405163d1bea8fb60e01b815260040160405180910390fd5b60648260ff161115613a5e5760405163119ea8ab60e31b815260040160405180910390fd5b604080516080810182526001600160a01b03858116825260006020830181815263ffffffff86811695850195865260ff88811660608701908152606680546001808201835591875297517f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e943549098018054955199519251989097166001600160c01b031990951694909417600160a01b988416989098029790971764ffffffffff60c01b1916600160c01b979092169690960260ff60e01b191617600160e01b9490951693909302939093179055606780548390613b3c908490614c29565b90915550506067546001600160a01b03851660009081526068602052604090208190557f2c74090ef4cdee53f53beda1798302946833f0af081f221c5730357eb2fdd76a90606690613b9090600190614d3e565b81548110613ba057613ba0614b41565b9060005260206000200142604051613bb992919061560d565b60405180910390a150505050565b600081600003613bd957506000919050565b50600181600160801b8110613bf35760409190911b9060801c5b680100000000000000008110613c0e5760209190911b9060401c5b6401000000008110613c255760109190911b9060201c5b620100008110613c3a5760089190911b9060101c5b6101008110613c4e5760049190911b9060081c5b60108110613c615760029190911b9060041c5b60048110613c7157600182901b91505b6001828481613c8257613c826150a5565b048301901c91506001828481613c9a57613c9a6150a5565b048301901c91506001828481613cb257613cb26150a5565b048301901c91506001828481613cca57613cca6150a5565b048301901c91506001828481613ce257613ce26150a5565b048301901c91506001828481613cfa57613cfa6150a5565b048301901c91506001828481613d1257613d126150a5565b048301901c91506000828481613d2a57613d2a6150a5565b049050808310613d38578092505b5050919050565b6001600160a01b0382166000908152606860205260408120549003613d77576040516360f4985360e01b815260040160405180910390fd5b60648160ff161115613d9c5760405163119ea8ab60e31b815260040160405180910390fd5b6001600160a01b0382166000908152606860205260409020548190606690613dc690600190614d3e565b81548110613dd657613dd6614b41565b60009182526020808320909101805460ff94909416600160e01b0260ff60e01b19909416939093179092556001600160a01b0384168152606890915260409020547f29d12e74a55b3d297952b1d6eb3495d231fccb524ee0afc91cfbb3ed790e660790606690613e4890600190614d3e565b81548110613e5857613e58614b41565b9060005260206000200160405161139591906156a2565b600054610100900460ff16613e965760405162461bcd60e51b8152600401610a249061553f565b611a413361349b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613edd57613edd613e9f565b604052919050565b60006001600160401b03821115613efe57613efe613e9f565b5060051b60200190565b6001600160a01b0381168114612aa457600080fd5b600082601f830112613f2e57600080fd5b81356020613f43613f3e83613ee5565b613eb5565b82815260059290921b84018101918181019086841115613f6257600080fd5b8286015b84811015613f86578035613f7981613f08565b8352918301918301613f66565b509695505050505050565b60ff81168114612aa457600080fd5b600082601f830112613fb157600080fd5b81356020613fc1613f3e83613ee5565b82815260059290921b84018101918181019086841115613fe057600080fd5b8286015b84811015613f86578035613ff781613f91565b8352918301918301613fe4565b63ffffffff81168114612aa457600080fd5b600082601f83011261402757600080fd5b81356020614037613f3e83613ee5565b82815260059290921b8401810191818101908684111561405657600080fd5b8286015b84811015613f8657803561406d81614004565b835291830191830161405a565b60008060006060848603121561408f57600080fd5b83356001600160401b03808211156140a657600080fd5b6140b287838801613f1d565b945060208601359150808211156140c857600080fd5b6140d487838801613fa0565b935060408601359150808211156140ea57600080fd5b506140f786828701614016565b9150509250925092565b60008060006060848603121561411657600080fd5b83356001600160401b0381111561412c57600080fd5b61413886828701613f1d565b935050602084013561414981613f08565b9150604084013561415981613f08565b809150509250925092565b600082601f83011261417557600080fd5b81356020614185613f3e83613ee5565b82815260059290921b840181019181810190868411156141a457600080fd5b8286015b84811015613f8657803583529183019183016141a8565b600080600080600060a086880312156141d757600080fd5b85356001600160401b03808211156141ee57600080fd5b6141fa89838a01613f1d565b9650602088013591508082111561421057600080fd5b61421c89838a01613fa0565b9550604088013591508082111561423257600080fd5b61423e89838a01614016565b9450606088013591508082111561425457600080fd5b61426089838a01614016565b9350608088013591508082111561427657600080fd5b5061428388828901614164565b9150509295509295909350565b600080604083850312156142a357600080fd5b82356001600160401b03808211156142ba57600080fd5b6142c686838701614016565b935060208501359150808211156142dc57600080fd5b506142e985828601614164565b9150509250929050565b600080600080600060a0868803121561430b57600080fd5b853561431681613f08565b9450602086013561432681613f91565b9350604086013561433681614004565b925060608601356001600160401b038082111561425457600080fd5b60006020828403121561436457600080fd5b813561359781613f08565b80516001600160a01b0316825260208082015163ffffffff908116918401919091526040808301519091169083015260609081015160ff16910152565b608081016143ba828461436f565b92915050565b600080604083850312156143d357600080fd5b82356001600160401b038111156143e957600080fd5b6143f585828601613f1d565b925050602083013561440681613f08565b809150509250929050565b600082601f83011261442257600080fd5b81356001600160401b0381111561443b5761443b613e9f565b61444e601f8201601f1916602001613eb5565b81815284602083860101111561446357600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561449257600080fd5b81356001600160401b038111156144a857600080fd5b6144b484828501614411565b949350505050565b6000602082840312156144ce57600080fd5b81356001600160401b038111156144e457600080fd5b6144b484828501613f1d565b600081518084526020808501945080840160005b838110156145295781516001600160a01b031687529582019590820190600101614504565b509495945050505050565b600081518084526020808501945080840160005b8381101561452957815163ffffffff1687529582019590820190600101614548565b60408152600061457d60408301856144f0565b82810360208401526139cc8185614534565b600080600080608085870312156145a557600080fd5b84356001600160401b03808211156145bc57600080fd5b6145c888838901614016565b955060208701359150808211156145de57600080fd5b6145ea88838901613f1d565b9450604087013591508082111561460057600080fd5b61460c88838901614016565b9350606087013591508082111561462257600080fd5b5061462f87828801614164565b91505092959194509250565b60006020828403121561464d57600080fd5b5035919050565b60008060006060848603121561466957600080fd5b83356001600160401b038082111561468057600080fd5b61468c87838801613f1d565b945060208601359150808211156146a257600080fd5b6146ae87838801614016565b935060408601359150808211156146c457600080fd5b506140f786828701614164565b600080604083850312156146e457600080fd5b82356146ef81614004565b9150602083013561440681613f08565b60008060006060848603121561471457600080fd5b83356001600160401b038082111561472b57600080fd5b61473787838801614016565b9450602086013591508082111561474d57600080fd5b6146ae87838801613f1d565b600080828403608081121561476d57600080fd5b833561477881614004565b92506060601f198201121561478c57600080fd5b50604051606081018181106001600160401b03821117156147af576147af613e9f565b60405260208401356147c081614004565b815260408401356147d081613f08565b602082015260608401356147e381613f08565b6040820152919491935090915050565b60006020828403121561480557600080fd5b813561359781614004565b60008060006060848603121561482557600080fd5b833561483081613f08565b9250602084013561484081613f91565b9150604084013561415981614004565b6000806000806080858703121561486657600080fd5b84356001600160401b038082111561487d57600080fd5b61488988838901613f1d565b9550602087013591508082111561489f57600080fd5b6145ea88838901613fa0565b6020808252825182820181905260009190848201906040850190845b818110156148ed576148da83855161436f565b92840192608092909201916001016148c7565b50909695505050505050565b6000806040838503121561490c57600080fd5b823561491781613f08565b9150602083013561440681613f91565b6000806040838503121561493a57600080fd5b823561494581613f08565b9150602083013561440681614004565b6000806000806080858703121561496b57600080fd5b843561497681613f08565b9350602085013561498681613f91565b925060408501356001600160401b038082111561460057600080fd5b600080604083850312156149b557600080fd5b82356001600160401b03808211156149cc57600080fd5b6149d886838701613f1d565b935060208501359150808211156149ee57600080fd5b506142e985828601613fa0565b60008060008060008060c08789031215614a1457600080fd5b86359550602087013594506040870135614a2d81613f08565b93506060870135614a3d81613f08565b92506080870135614a4d81614004565b915060a08701356001600160401b03811115614a6857600080fd5b614a7489828a01614411565b9150509295509295509295565b60005b83811015614a9c578181015183820152602001614a84565b50506000910152565b60008151808452614abd816020860160208601614a81565b601f01601f19169290920160200192915050565b6020815260006135976020830184614aa5565b60208082526037908201527f4e6574776f726b52656769737472793a2063616c6c6572206973206e6f74206660408201527f6f726569676e2075706461746572206f72206f776e6572000000000000000000606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201614b7f57614b7f614b57565b5060010190565b600060018060a01b038089168352808816602084015260c06040840152614bb060c08401886144f0565b8381036060850152614bc28188614534565b63ffffffff969096166080850152509290921660a09091015250949350505050565b60208082526025908201527f4e6574776f726b52656769737472793a2057726f6e67206e6574776f726b20706040820152646172616d7360d81b606082015260800190565b808201808211156143ba576143ba614b57565b600060ff821660ff8103614c5257614c52614b57565b60010192915050565b6020808252603c908201527f4e6574776f726b52656769737472793a2056616c75652073656e74206e6f742060408201527f656e6f75676820746f20636f7665722072656c61796572206665657300000000606082015260800190565b600081518084526020808501945080840160005b8381101561452957815160ff1687529582019590820190600101614ccc565b63ffffffff60e01b85168152608060208201526000614d0d60808301866144f0565b8281036040840152614d1f8186614cb8565b90508281036060840152614d338185614534565b979650505050505050565b818103818111156143ba576143ba614b57565b600060018060a01b03808816835260a06020840152614d7360a08401886144f0565b8381036040850152614d858188614534565b63ffffffff9690961660608501525092909216608090910152509392505050565b80518015158114614db657600080fd5b919050565b60008060008060008060008060006101208a8c031215614dda57600080fd5b8951614de581613f08565b60208b0151909950614df681614004565b60408b0151909850614e0781613f08565b60608b0151909750614e1881613f08565b60808b0151909650614e2981613f08565b60a08b0151909550614e3a81614004565b60c08b0151909450614e4b81613f08565b60e08b01519093509150614e626101008b01614da6565b90509295985092959850929598565b6001600160a01b0385168152608060208201819052600090614e95908301866144f0565b8281036040840152614ea78186614534565b91505063ffffffff8316606083015295945050505050565b60208082526035908201527f4e6574776f726b52656769737472793a206e6574776f726b20706172616d73206040820152740d8cadccee8d040c8decae640dcdee840dac2e8c6d605b1b606082015260800190565b63ffffffff60e01b831681526040602082015260006144b460408301846144f0565b6001600160e01b03199290921682526001600160a01b0316602082015260400190565b6020808252601e908201527f50474e6574776f726b52656769737472795368616d616e3a2021696e69740000604082015260600190565b600060208284031215614fa257600080fd5b61359782614da6565b6020808252602e908201527f50474e6574776f726b52656769737472795368616d616e3a205368616d616e2060408201526d34b9903737ba1036b0b730b3b2b960911b606082015260800190565b60408152600061500c60408301856144f0565b82810360208481019190915284518083528582019282019060005b8181101561504357845183529383019391830191600101615027565b5090979650505050505050565b63ffffffff60e01b8416815260606020820152600061507260608301856144f0565b82810360408401526150848185614cb8565b9695505050505050565b80820281158282048414176143ba576143ba614b57565b634e487b7160e01b600052601260045260246000fd5b6000826150ca576150ca6150a5565b500490565b63ffffffff8181168382160190808211156150ec576150ec614b57565b5092915050565b63ffffffff8281168282160390808211156150ec576150ec614b57565b80516001600160e01b031981168114614db657600080fd5b60006020828403121561513a57600080fd5b61359782615110565b6000806000806080858703121561515957600080fd5b61516285615110565b9350602085015161517281613f08565b604086015190935061518381613f91565b606086015190925061519481614004565b939692955090935050565b6000806000606084860312156151b457600080fd5b6151bd84615110565b925060208401516151cd81613f08565b604085015190925061415981613f91565b600082601f8301126151ef57600080fd5b815160206151ff613f3e83613ee5565b82815260059290921b8401810191818101908684111561521e57600080fd5b8286015b84811015613f8657805161523581613f08565b8352918301918301615222565b600082601f83011261525357600080fd5b81516020615263613f3e83613ee5565b82815260059290921b8401810191818101908684111561528257600080fd5b8286015b84811015613f8657805161529981613f91565b8352918301918301615286565b600080600080608085870312156152bc57600080fd5b6152c585615110565b93506020808601516001600160401b03808211156152e257600080fd5b6152ee89838a016151de565b9550604088015191508082111561530457600080fd5b61531089838a01615242565b9450606088015191508082111561532657600080fd5b508601601f8101881361533857600080fd5b8051615346613f3e82613ee5565b81815260059190911b8201830190838101908a83111561536557600080fd5b928401925b8284101561538c57835161537d81614004565b8252928401929084019061536a565b979a9699509497505050505050565b6060815260006153ae60608301866144f0565b82810360208401526153c08186614cb8565b905082810360408401526150848185614534565b6000806000606084860312156153e957600080fd5b6153f284615110565b925060208401516001600160401b038082111561540e57600080fd5b61541a878388016151de565b9350604086015191508082111561543057600080fd5b506140f786828701615242565b60408152600061545060408301856144f0565b82810360208401526139cc8185614cb8565b6000806040838503121561547557600080fd5b61547e83615110565b915060208301516001600160401b0381111561549957600080fd5b6142e9858286016151de565b60208152600061359760208301846144f0565b600080604083850312156154cb57600080fd5b6154d483615110565b9150602083015161440681613f08565b6000806000606084860312156154f957600080fd5b61550284615110565b9250602084015161551281613f08565b604085015190925061415981614004565b60008251615535818460208701614a81565b9190910192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b63ffffffff8181168382160280821691908281146155aa576155aa614b57565b505092915050565b600063ffffffff808416806155c9576155c96150a5565b92169190910492915050565b546001600160a01b038116825260a081901c63ffffffff908116602084015260c082901c16604083015260e01c60ff16606090910152565b60a0810161561b82856155d5565b63ffffffff831660808301529392505050565b63ffffffff881681526001600160a01b0387811660208301528681166040830152851660608201526080810184905260a0810183905260e060c0820181905260009061567c90830184614aa5565b9998505050505050505050565b60006020828403121561569b57600080fd5b5051919050565b608081016143ba82846155d556fea164736f6c6343000813000a",
  "deployedBytecode": "0x60806040526004361061031a5760003560e01c8063831d74ef116101ab578063cb30af6e116100f7578063f2fde38b11610095578063fa6062e01161006f578063fa6062e014610968578063fc1468dc1461097b578063fd614f411461099b578063fdf4bd29146109c857600080fd5b8063f2fde38b14610904578063f765417614610924578063f98cc7c91461094457600080fd5b8063de4b0548116100d1578063de4b05481461088f578063df034cd0146108af578063e4a7c603146108cf578063e5a2a2a5146108e457600080fd5b8063cb30af6e1461082f578063d173ba061461084f578063d863d18d1461086f57600080fd5b80639eab525311610164578063b0affdf71161013e578063b0affdf7146107ae578063bf59b488146107ce578063c0463711146107f2578063c57576c41461080f57600080fd5b80639eab525314610764578063a084b6c014610786578063b044631c1461079b57600080fd5b8063831d74ef146106635780638da5cb5b146106765780638ddc5f3514610694578063979bc155146107115780639cc96363146107315780639d7b85451461074457600080fd5b8063479d0a0d1161026a57806364c6d00a1161022357806375491512116101fd57806375491512146106035780637698a8331461061957806376e925591461063957806380e038bc1461064e57600080fd5b806364c6d00a146105c85780636bda59da146105db578063715018a6146105ee57600080fd5b8063479d0a0d146104ea57806349be1b921461051857806356c0e9921461052b5780635daf08ca1461053e578063610498d91461059557806361bc3111146105a857600080fd5b80631eee592e116102d757806334e2fc65116102b157806334e2fc651461044e578063371b52e3146104895780633f26479e1461049e578063439fab91146104ca57600080fd5b80631eee592e146103ee5780632ada259614610401578063339c34f71461042e57600080fd5b806301dabadc1461031f57806306a53350146103415780630971ee81146103615780630bddc56b146103745780630e769b2b146103a35780631049d736146103db575b600080fd5b34801561032b57600080fd5b5061033f61033a36600461407a565b6109db565b005b34801561034d57600080fd5b5061033f61035c366004614101565b610aa7565b61033f61036f3660046141bf565b610b3c565b34801561038057600080fd5b50609d5461038e9060ff1681565b60405190151581526020015b60405180910390f35b3480156103af57600080fd5b50606c546103c3906001600160a01b031681565b6040516001600160a01b03909116815260200161039a565b61033f6103e9366004614290565b610c29565b61033f6103fc3660046142f3565b610f07565b34801561040d57600080fd5b5061042161041c366004614352565b610fed565b60405161039a91906143ac565b34801561043a57600080fd5b5061033f6104493660046143c0565b6110dd565b34801561045a57600080fd5b5061047b610469366004614352565b60686020526000908152604090205481565b60405190815260200161039a565b34801561049557600080fd5b5061033f611170565b3480156104aa57600080fd5b506104b5620f424081565b60405163ffffffff909116815260200161039a565b3480156104d657600080fd5b5061033f6104e5366004614480565b611217565b3480156104f657600080fd5b5061050a6105053660046144bc565b6113a2565b60405161039a92919061456a565b61033f61052636600461458f565b611432565b61033f610539366004614290565b6115f1565b34801561054a57600080fd5b5061055e61055936600461463b565b6116c7565b604080516001600160a01b0395909516855263ffffffff9384166020860152919092169083015260ff16606082015260800161039a565b61033f6105a3366004614654565b611717565b3480156105b457600080fd5b5061033f6105c33660046146d1565b6117ed565b61033f6105d6366004614290565b61183d565b61033f6105e93660046146ff565b6118f1565b3480156105fa57600080fd5b5061033f611a2f565b34801561060f57600080fd5b5061047b609c5481565b34801561062557600080fd5b5061033f610634366004614759565b611a43565b34801561064557600080fd5b5060665461047b565b34801561065a57600080fd5b5061033f611b4c565b61033f6106713660046146ff565b611bc9565b34801561068257600080fd5b506033546001600160a01b03166103c3565b3480156106a057600080fd5b506106e56106af3660046147f3565b606b602052600090815260409020805460019091015463ffffffff8216916001600160a01b036401000000009091048116911683565b6040805163ffffffff90941684526001600160a01b03928316602085015291169082015260600161039a565b34801561071d57600080fd5b5061033f61072c366004614810565b611d07565b61033f61073f366004614850565b611f93565b34801561075057600080fd5b5061033f61075f366004614352565b612072565b34801561077057600080fd5b50610779612127565b60405161039a91906148ab565b34801561079257600080fd5b5061038e6121c0565b61033f6107a9366004614290565b6121ee565b3480156107ba57600080fd5b5061050a6107c93660046144bc565b6122a2565b3480156107da57600080fd5b506069546104b590600160a01b900463ffffffff1681565b3480156107fe57600080fd5b506065546104b59063ffffffff1681565b34801561081b57600080fd5b5061033f61082a3660046148f9565b61268e565b34801561083b57600080fd5b5061033f61084a366004614352565b612922565b34801561085b57600080fd5b5061033f61086a366004614927565b61298d565b34801561087b57600080fd5b5061050a61088a3660046144bc565b612a08565b34801561089b57600080fd5b506069546103c3906001600160a01b031681565b3480156108bb57600080fd5b50606a546103c3906001600160a01b031681565b3480156108db57600080fd5b5061033f612a26565b3480156108f057600080fd5b50609b546103c3906001600160a01b031681565b34801561091057600080fd5b5061033f61091f366004614352565b612a2e565b34801561093057600080fd5b50606d546103c3906001600160a01b031681565b34801561095057600080fd5b50606d546104b590600160a01b900463ffffffff1681565b61033f610976366004614955565b612aa7565b34801561098757600080fd5b5061033f6109963660046149a2565b612b80565b3480156109a757600080fd5b506109bb6109b63660046149fb565b612c23565b60405161039a9190614ad1565b61033f6109d6366004614654565b61324f565b6033546001600160a01b0316331480610a085750606a546001600160a01b031615801590610a0857503330145b610a2d5760405162461bcd60e51b8152600401610a2490614ae4565b60405180910390fd5b60005b8351811015610aa157610a8f848281518110610a4e57610a4e614b41565b6020026020010151848381518110610a6857610a68614b41565b6020026020010151848481518110610a8257610a82614b41565b6020026020010151611d07565b80610a9981614b6d565b915050610a30565b50505050565b600080610ab385612a08565b606c54606d54604051630ac0898160e11b81529395509193506001600160a01b0390811692631581130292610b0392811691899188918891600160a01b900463ffffffff16908b90600401614b86565b600060405180830381600087803b158015610b1d57600080fd5b505af1158015610b31573d6000803e3d6000fd5b505050505050505050565b610b44613308565b81818051825114610b675760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff161015610bb357828160ff1681518110610b8c57610b8c614b41565b602002602001015182610b9f9190614c29565b915080610bab81614c3c565b915050610b6b565b50803414610bd35760405162461bcd60e51b8152600401610a2490614c5b565b610bde8888886109db565b6040516276aeb760e21b90600090610c009083908c908c908c90602001614ceb565b6040516020818303038152906040529050610c1d82828989613362565b50505050505050505050565b610c31613308565b81818051825114610c545760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff161015610ca057828160ff1681518110610c7957610c79614b41565b602002602001015182610c8c9190614c29565b915080610c9881614c3c565b915050610c58565b50803414610cc05760405162461bcd60e51b8152600401610a2490614c5b565b6066546000906001600160401b03811115610cdd57610cdd613e9f565b604051908082528060200260200182016040528015610d06578160200160208202803683370190505b506066549091506000906001600160401b03811115610d2757610d27613e9f565b604051908082528060200260200182016040528015610d50578160200160208202803683370190505b506066549091506000906001600160401b03811115610d7157610d71613e9f565b604051908082528060200260200182016040528015610d9a578160200160208202803683370190505b50905060005b606654811015610ec75760668181548110610dbd57610dbd614b41565b60009182526020909120015484516001600160a01b0390911690859083908110610de957610de9614b41565b60200260200101906001600160a01b031690816001600160a01b03168152505060668181548110610e1c57610e1c614b41565b90600052602060002001600001601c9054906101000a900460ff16838281518110610e4957610e49614b41565b602002602001019060ff16908160ff168152505060668181548110610e7057610e70614b41565b9060005260206000200160000160189054906101000a900463ffffffff16828281518110610ea057610ea0614b41565b63ffffffff9092166020928302919091019091015280610ebf81614b6d565b915050610da0565b506040516276aeb760e21b90600090610eea908390879087908790602001614ceb565b6040516020818303038152906040529050610c1d82828c8c613362565b610f0f613308565b81818051825114610f325760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff161015610f7e57828160ff1681518110610f5757610f57614b41565b602002602001015182610f6a9190614c29565b915080610f7681614c3c565b915050610f36565b50803414610f9e5760405162461bcd60e51b8152600401610a2490614c5b565b610fa9888888611d07565b6040805163979bc15560e01b602082018190526001600160a01b038b169282019290925260ff8916606082015263ffffffff8816608082015260009060a001610c00565b6040805160808101825260008082526020808301829052828401829052606083018290526001600160a01b03851682526068905291822054909103611045576040516360f4985360e01b815260040160405180910390fd5b6001600160a01b03821660009081526068602052604090205460669061106d90600190614d3e565b8154811061107d5761107d614b41565b60009182526020918290206040805160808101825292909101546001600160a01b0381168352600160a01b810463ffffffff90811694840194909452600160c01b810490931690820152600160e01b90910460ff16606082015292915050565b6000806110e984612a08565b606c54606d5460405163730e582f60e11b81529395509193506001600160a01b039081169263e61cb05e926111389281169187918791600160a01b90910463ffffffff16908a90600401614d51565b600060405180830381600087803b15801561115257600080fd5b505af1158015611166573d6000803e3d6000fd5b5050505050505050565b6033546001600160a01b031633148061119d5750606a546001600160a01b03161580159061119d57503330145b6111b95760405162461bcd60e51b8152600401610a2490614ae4565b606c54606d54604051630933e36d60e11b81526001600160a01b039182166004820152911690631267c6da906024015b600060405180830381600087803b15801561120357600080fd5b505af1158015610aa1573d6000803e3d6000fd5b600054610100900460ff16158080156112375750600054600160ff909116105b806112515750303b158015611251575060005460ff166001145b6112b45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a24565b6000805460ff1916600117905580156112d7576000805461ff0019166101001790555b60008060008060008060008060008a8060200190518101906112f99190614dbb565b98509850985098509850985098509850985061131a898989898989896133ba565b609b80546001600160a01b0319166001600160a01b039490941693909317909255609c55609d805460ff191691151591909117905550508415935061139e92505050576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b5050565b6060806113ae836122a2565b606c54606d54604051637677856760e11b81529395509193506001600160a01b039081169263ecef0ace926113fb9281169187918791600160a01b90910463ffffffff1690600401614e71565b600060405180830381600087803b15801561141557600080fd5b505af1158015611429573d6000803e3d6000fd5b50505050915091565b61143a613308565b8381805182511461145d5760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff1610156114a957828160ff168151811061148257611482614b41565b6020026020010151826114959190614c29565b9150806114a181614c3c565b915050611461565b508034146114c95760405162461bcd60e51b8152600401610a2490614c5b565b865186511480156114db575086518551145b6114f75760405162461bcd60e51b8152600401610a2490614ebf565b6368b9dd0360e11b60005b88518160ff161015610b3157600082898360ff168151811061152657611526614b41565b6020026020010151898460ff168151811061154357611543614b41565b6020026020010151604051602001611589939291906001600160e01b03199390931683526001600160a01b0391909116602083015263ffffffff16604082015260600190565b60405160208183030381529060405290506115de83828c8560ff16815181106115b4576115b4614b41565b60200260200101518a8660ff16815181106115d1576115d1614b41565b602002602001015161341b565b50806115e981614c3c565b915050611502565b6115f9613308565b8181805182511461161c5760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff16101561166857828160ff168151811061164157611641614b41565b6020026020010151826116549190614c29565b91508061166081614c3c565b915050611620565b508034146116885760405162461bcd60e51b8152600401610a2490614c5b565b604080516320380e2f60e21b6020820181905291600091015b60405160208183030381529060405290506116be82828989613362565b50505050505050565b606681815481106116d757600080fd5b6000918252602090912001546001600160a01b038116915063ffffffff600160a01b8204811691600160c01b81049091169060ff600160e01b9091041684565b8181805182511461173a5760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff16101561178657828160ff168151811061175f5761175f614b41565b6020026020010151826117729190614c29565b91508061177e81614c3c565b91505061173e565b508034146117a65760405162461bcd60e51b8152600401610a2490614c5b565b6117af86612a08565b505060405163d863d18d60e01b906000906117d09083908a90602001614f14565b604051602081830303815290604052905061116682828989613362565b6117f5613308565b6069805463ffffffff909316600160a01b0263ffffffff60a01b1990931692909217909155606a80546001600160a01b039092166001600160a01b0319909216919091179055565b611845613308565b818180518251146118685760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff1610156118b457828160ff168151811061188d5761188d614b41565b6020026020010151826118a09190614c29565b9150806118ac81614c3c565b91505061186c565b508034146118d45760405162461bcd60e51b8152600401610a2490614c5b565b6040805163371b52e360e01b6020820181905291600091016116a1565b6118f9613308565b8281805182511461191c5760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff16101561196857828160ff168151811061194157611941614b41565b6020026020010151826119549190614c29565b91508061196081614c3c565b915050611920565b508034146119885760405162461bcd60e51b8152600401610a2490614c5b565b85518551146119a95760405162461bcd60e51b8152600401610a2490614ebf565b639d7b854560e01b60005b87518160ff16101561116657600082888360ff16815181106119d8576119d8614b41565b60200260200101516040516020016119f1929190614f36565b6040516020818303038152906040529050611a1c83828b8560ff16815181106115b4576115b4614b41565b5080611a2781614c3c565b9150506119b4565b611a37613308565b611a41600061349b565b565b611a4b613308565b60208101516001600160a01b0316611aa55760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964207265676973747279206164647265737300000000000000006044820152606401610a24565b63ffffffff8281166000818152606b60209081526040918290208551815487840151919096166001600160c01b031990961686176401000000006001600160a01b0392831690810291909117835587850151600190930180546001600160a01b0319169390921692831790915583519586529185015291927f1352db1150d62c03f88cdd76a3690564b2ee64659da5f7b7fa0750188cf95aa3910160405180910390a35050565b6033546001600160a01b0316331480611b795750606a546001600160a01b031615801590611b7957503330145b611b955760405162461bcd60e51b8152600401610a2490614ae4565b606c54606d5460405163031f799160e61b81526001600160a01b03918216600482015291169063c7de6440906024016111e9565b611bd1613308565b82818051825114611bf45760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff161015611c4057828160ff1681518110611c1957611c19614b41565b602002602001015182611c2c9190614c29565b915080611c3881614c3c565b915050611bf8565b50803414611c605760405162461bcd60e51b8152600401610a2490614c5b565b8551855114611c815760405162461bcd60e51b8152600401610a2490614ebf565b63659857b760e11b60005b87518160ff16101561116657600082888360ff1681518110611cb057611cb0614b41565b6020026020010151604051602001611cc9929190614f36565b6040516020818303038152906040529050611cf483828b8560ff16815181106115b4576115b4614b41565b5080611cff81614c3c565b915050611c8c565b6033546001600160a01b0316331480611d345750606a546001600160a01b031615801590611d3457503330145b611d505760405162461bcd60e51b8152600401610a2490614ae4565b609b546001600160a01b0316611d785760405162461bcd60e51b8152600401610a2490614f59565b609b5460405163f3ae241560e01b81523060048201526001600160a01b039091169063f3ae241590602401602060405180830381865afa158015611dc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de49190614f90565b611e005760405162461bcd60e51b8152600401610a2490614fab565b611e0b8383836134ed565b611e136121c0565b15611f8e57609b546001600160a01b0316611e405760405162461bcd60e51b8152600401610a2490614f59565b609b5460405163f3ae241560e01b81523060048201526001600160a01b039091169063f3ae241590602401602060405180830381865afa158015611e88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eac9190614f90565b611ec85760405162461bcd60e51b8152600401610a2490614fab565b604080516001808252818301909252600091602080830190803683370190505090508381600081518110611efe57611efe614b41565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050609c5481600081518110611f5157611f51614b41565b6020908102919091010152609b54604051632c78fd0360e21b81526001600160a01b039091169063b1e3f40c90610b039085908590600401614ff9565b505050565b611f9b613308565b81818051825114611fbe5760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff16101561200a57828160ff1681518110611fe357611fe3614b41565b602002602001015182611ff69190614c29565b91508061200281614c3c565b915050611fc2565b5080341461202a5760405162461bcd60e51b8152600401610a2490614c5b565b6120348787612b80565b604051633f051a3760e21b906000906120559083908b908b90602001615050565b6040516020818303038152906040529050610b3182828989613362565b6033546001600160a01b031633148061209f5750606a546001600160a01b03161580159061209f57503330145b6120bb5760405162461bcd60e51b8152600401610a2490614ae4565b606c54606d546040516334392cbd60e21b81526001600160a01b039182166004820152838216602482015291169063d0e4b2f490604401600060405180830381600087803b15801561210c57600080fd5b505af1158015612120573d6000803e3d6000fd5b5050505050565b60606066805480602002602001604051908101604052809291908181526020016000905b828210156121b757600084815260209081902060408051608081018252918501546001600160a01b038116835263ffffffff600160a01b8204811684860152600160c01b8204169183019190915260ff600160e01b90910416606082015282526001909201910161214b565b50505050905090565b606954600090600160a01b900463ffffffff161580156121e95750606a546001600160a01b0316155b905090565b818180518251146122115760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff16101561225d57828160ff168151811061223657612236614b41565b6020026020010151826122499190614c29565b91508061225581614c3c565b915050612215565b5080341461227d5760405162461bcd60e51b8152600401610a2490614c5b565b612285612a26565b6040805163e4a7c60360e01b6020820181905291600091016116a1565b60608060008060006066805490508651146122d0576040516307c7182360e11b815260040160405180910390fd5b60005b86518110156124005760008782815181106122f0576122f0614b41565b6020026020010151905060686000826001600160a01b03166001600160a01b031681526020019081526020016000205460001480156123415750826001600160a01b0316816001600160a01b031610155b1561235f57604051632056648360e01b815260040160405180910390fd5b80925060006066838154811061237757612377614b41565b600091825260209091200154600160e01b900460ff1611156123ed576123d36123d06123cb606685815481106123af576123af614b41565b600091825260209091200154600160a01b900463ffffffff1690565b613541565b90565b6123dd9085614c29565b9350846123e981614b6d565b9550505b50806123f881614b6d565b9150506122d3565b50826001600160401b0381111561241957612419613e9f565b604051908082528060200260200182016040528015612442578160200160208202803683370190505b509450826001600160401b0381111561245d5761245d613e9f565b604051908082528060200260200182016040528015612486578160200160208202803683370190505b50935060008060005b8851811015612635576000606860008b84815181106124b0576124b0614b41565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020549050600060666001836124ec9190614d3e565b815481106124fc576124fc614b41565b60009182526020918290206040805160808101825292909101546001600160a01b0381168352600160a01b810463ffffffff90811694840194909452600160c01b810490931690820152600160e01b90910460ff1660608201819052909150156126205780600001518a858151811061257757612577614b41565b6001600160a01b039092166020928302919091018201528101518790620f4240906125ab906123d09063ffffffff16613541565b6125b5919061508e565b6125bf91906150bb565b8985815181106125d1576125d1614b41565b602002602001019063ffffffff16908163ffffffff16815250508884815181106125fd576125fd614b41565b60200260200101518561261091906150cf565b94508361261c81614b6d565b9450505b5050808061262d90614b6d565b91505061248f565b5063ffffffff8216620f4240146126845761265382620f42406150f3565b8660008151811061266657612666614b41565b6020026020010181815161267a91906150cf565b63ffffffff169052505b5050505050915091565b6033546001600160a01b03163314806126bb5750606a546001600160a01b0316158015906126bb57503330145b6126d75760405162461bcd60e51b8152600401610a2490614ae4565b609b546001600160a01b03166126ff5760405162461bcd60e51b8152600401610a2490614f59565b609b5460405163f3ae241560e01b81523060048201526001600160a01b039091169063f3ae241590602401602060405180830381865afa158015612747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061276b9190614f90565b6127875760405162461bcd60e51b8152600401610a2490614fab565b612791828261359e565b6127996121c0565b80156127a75750609d5460ff165b1561139e57609b546001600160a01b03166127d45760405162461bcd60e51b8152600401610a2490614f59565b609b5460405163f3ae241560e01b81523060048201526001600160a01b039091169063f3ae241590602401602060405180830381865afa15801561281c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128409190614f90565b61285c5760405162461bcd60e51b8152600401610a2490614fab565b60408051600180825281830190925260009160208083019080368337019050509050828160008151811061289257612892614b41565b6001600160a01b039290921660209283029190910190910152604080516001808252818301909252600091816020016020820280368337019050509050609c54816000815181106128e5576128e5614b41565b6020908102919091010152609b5460405163262949f360e21b81526001600160a01b03909116906398a527cc906111389085908590600401614ff9565b6033546001600160a01b031633148061294f5750606a546001600160a01b03161580159061294f57503330145b61296b5760405162461bcd60e51b8152600401610a2490614ae4565b606c80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314806129ba5750606a546001600160a01b0316158015906129ba57503330145b6129d65760405162461bcd60e51b8152600401610a2490614ae4565b606d805463ffffffff909216600160a01b026001600160c01b03199092166001600160a01b0390931692909217179055565b606080612a13612a26565b612a1c836113a2565b9094909350915050565b611a416135f1565b612a36613308565b6001600160a01b038116612a9b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a24565b612aa48161349b565b50565b612aaf613308565b81818051825114612ad25760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff161015612b1e57828160ff1681518110612af757612af7614b41565b602002602001015182612b0a9190614c29565b915080612b1681614c3c565b915050612ad6565b50803414612b3e5760405162461bcd60e51b8152600401610a2490614c5b565b612b48878761268e565b6040805163315d5db160e21b602082018190526001600160a01b038a169282019290925260ff88166060820152600090608001612055565b6033546001600160a01b0316331480612bad5750606a546001600160a01b031615801590612bad57503330145b612bc95760405162461bcd60e51b8152600401610a2490614ae4565b60005b8251811015611f8e57612c11838281518110612bea57612bea614b41565b6020026020010151838381518110612c0457612c04614b41565b602002602001015161268e565b80612c1b81614b6d565b915050612bcc565b6069546060908490849063ffffffff808316600160a01b90920416148015612c585750606a546001600160a01b038381169116145b8015612c7757506069546001600160a01b0316336001600160a01b0316145b612d295760405162461bcd60e51b815260206004820152607160248201527f4e6574776f726b52656769737472793a204578706563746564206f726967696e60448201527f616c2063616c6c657220746f20626520736f7572636520636f6e74726163742060648201527f6f6e206f726967696e20646f6d61696e20616e64207468697320746f2062652060848201527018d85b1b195908189e4810dbdb9b995e1d607a1b60a482015260c401610a24565b600084806020019051810190612d3f9190615128565b905060606368643eab60e01b6001600160e01b0319831601612dee57600080600088806020019051810190612d749190615143565b6040516001600160a01b038416602482015260ff8316604482015263ffffffff82166064820152929650909450925063979bc15560e01b91506084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152935061317492505050565b630ea2a24f60e21b6001600160e01b0319831601612e805760008087806020019051810190612e1d919061519f565b6040516001600160a01b038316602482015260ff8216604482015291945092508591506064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529250613174915050565b633f89514960e21b6001600160e01b0319831601612ece57600080600088806020019051810190612eb191906152a6565b9350935093505084838383604051602401612db19392919061539b565b62fae5c960e21b6001600160e01b0319831601612f155760008087806020019051810190612efc91906153d4565b9250925050838282604051602401612e4492919061543d565b631b5839fd60e01b6001600160e01b0319831601612f5f57506040805160048152602481019091526020810180516001600160e01b03166001600160e01b03198416179052613174565b63b862f5f360e01b6001600160e01b0319831601612fdd57600086806020019051810190612f8d9190615462565b9150508281604051602401612fa291906154a5565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915291506131749050565b63279c2e7360e01b6001600160e01b031983160161300b57600086806020019051810190612f8d9190615462565b631a67a84960e11b6001600160e01b03198316016130595760008680602001905181019061303991906154b8565b6040516001600160a01b0382166024820152909250849150604401612fa2565b63174622fd60e11b6001600160e01b03198316016130b6576000808780602001905181019061308891906154e4565b6040516001600160a01b038316602482015263ffffffff821660448201529194509250859150606401612e44565b6362847abb60e01b6001600160e01b03198316016130e45760008680602001905181019061303991906154b8565b631fc7f1d160e21b6001600160e01b031983160161312e57506040805160048152602481019091526020810180516001600160e01b03166001600160e01b03198416179052613174565b63c8e4ad1d60e01b6001600160e01b031983160161317457506040805160048152602481019091526020810180516001600160e01b03166001600160e01b031984161790525b600080306001600160a01b03168360405161318f9190615523565b6000604051808303816000865af19150503d80600081146131cc576040519150601f19603f3d011682016040523d82523d6000602084013e6131d1565b606091505b5091509150811515846001600160e01b0319167f1c3c9d979bd19ded3647c9c371dd9005c98dd77d9655655b3ac1b0c174dcbf098f8c8e6040516132379392919092835263ffffffff9190911660208301526001600160a01b0316604082015260600190565b60405180910390a39c9b505050505050505050505050565b818180518251146132725760405162461bcd60e51b8152600401610a2490614be4565b6000805b82518160ff1610156132be57828160ff168151811061329757613297614b41565b6020026020010151826132aa9190614c29565b9150806132b681614c3c565b915050613276565b508034146132de5760405162461bcd60e51b8152600401610a2490614c5b565b6132e7866113a2565b505060405163479d0a0d60e01b906000906117d09083908a90602001614f14565b6033546001600160a01b03163314611a415760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a24565b60005b82518160ff161015612120576133a88585858460ff168151811061338b5761338b614b41565b6020026020010151858560ff16815181106115d1576115d1614b41565b806133b281614c3c565b915050613365565b600054610100900460ff166133e15760405162461bcd60e51b8152600401610a249061553f565b6133e9613772565b6133f78787878787876137a1565b6001600160a01b0381166134125761340d611a2f565b6116be565b6116be81612a2e565b6000613428838584613839565b63ffffffff84166000818152606b60209081526040918290205491516401000000009092046001600160a01b0316825292935083926001600160e01b03198916917f08ccbfaba6869ea4aad2d3c80728aecf60570163a9f7ab0b292fdea62e211e37910160405180910390a45050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6033546001600160a01b031633148061351a5750606a546001600160a01b03161580159061351a57503330145b6135365760405162461bcd60e51b8152600401610a2490614ae4565b611f8e8383836139d5565b6000817812725dd1d243aba0e75fe645cc4873f9e65afe688c928e1f218111156135815760405163edc236ad60e01b815260048101849052602401610a24565b6135976123d0670de0b6b3a76400008302613bc7565b9392505050565b6033546001600160a01b03163314806135cb5750606a546001600160a01b0316158015906135cb57503330145b6135e75760405162461bcd60e51b8152600401610a2490614ae4565b61139e8282613d3f565b4260005b6066548110156137235760006066828154811061361457613614614b41565b600091825260208220018054909250600160a01b900463ffffffff16810361365657815461364f90600160c01b900463ffffffff16856150f3565b905061366c565b6065546136699063ffffffff16856150f3565b90505b815460009060649061368890600160e01b900460ff168461558a565b61369291906155b2565b8354909150819084906014906136b6908490600160a01b900463ffffffff166150cf565b92506101000a81548163ffffffff021916908363ffffffff1602179055507f393ca387760e64235f59b8fb5a7e7736887380bcacd89855f4e170abdf7aebbe838260405161370592919061560d565b60405180910390a1505050808061371b90614b6d565b9150506135f5565b506065805463ffffffff191663ffffffff83169081179091556040519081527f5624889e22dfb82f30d92d6882aecff897f9f67a4a4d224257d424d2420ee8c09060200160405180910390a150565b600054610100900460ff166137995760405162461bcd60e51b8152600401610a249061553f565b611a41613e6f565b600054610100900460ff166137c85760405162461bcd60e51b8152600401610a249061553f565b606980546001600160a01b039788166001600160c01b031991821617600160a01b63ffffffff988916810291909117909255606a80546001600160a01b0319908116978a16979097179055606c805490961694881694909417909455606d8054929096169190921617921602179055565b63ffffffff8084166000908152606b602052604081208054919290911682036138b35760405162461bcd60e51b815260206004820152602660248201527f4e6574776f726b52656769737472793a204e6f7420537570706f72746564204e6044820152656574776f726b60d01b6064820152608401610a24565b805464010000000090046001600160a01b03166139205760405162461bcd60e51b815260206004820152602560248201527f4e6574776f726b52656769737472793a4e6f7420537570706f72746564204e6560448201526474776f726b60d81b6064820152608401610a24565b60695463ffffffff8681166000908152606b6020526040808220805460019091015491516345560b5d60e11b81526001600160a01b0395861695638aac16ba958a9561398995918516946401000000009004831693909290911690829081908e9060040161562e565b60206040518083038185885af11580156139a7573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906139cc9190615689565b95945050505050565b6001600160a01b03831660009081526068602052604090205415613a0c576040516303d5de1560e61b815260040160405180910390fd5b4263ffffffff168163ffffffff161115613a395760405163d1bea8fb60e01b815260040160405180910390fd5b60648260ff161115613a5e5760405163119ea8ab60e31b815260040160405180910390fd5b604080516080810182526001600160a01b03858116825260006020830181815263ffffffff86811695850195865260ff88811660608701908152606680546001808201835591875297517f46501879b8ca8525e8c2fd519e2fbfcfa2ebea26501294aa02cbfcfb12e943549098018054955199519251989097166001600160c01b031990951694909417600160a01b988416989098029790971764ffffffffff60c01b1916600160c01b979092169690960260ff60e01b191617600160e01b9490951693909302939093179055606780548390613b3c908490614c29565b90915550506067546001600160a01b03851660009081526068602052604090208190557f2c74090ef4cdee53f53beda1798302946833f0af081f221c5730357eb2fdd76a90606690613b9090600190614d3e565b81548110613ba057613ba0614b41565b9060005260206000200142604051613bb992919061560d565b60405180910390a150505050565b600081600003613bd957506000919050565b50600181600160801b8110613bf35760409190911b9060801c5b680100000000000000008110613c0e5760209190911b9060401c5b6401000000008110613c255760109190911b9060201c5b620100008110613c3a5760089190911b9060101c5b6101008110613c4e5760049190911b9060081c5b60108110613c615760029190911b9060041c5b60048110613c7157600182901b91505b6001828481613c8257613c826150a5565b048301901c91506001828481613c9a57613c9a6150a5565b048301901c91506001828481613cb257613cb26150a5565b048301901c91506001828481613cca57613cca6150a5565b048301901c91506001828481613ce257613ce26150a5565b048301901c91506001828481613cfa57613cfa6150a5565b048301901c91506001828481613d1257613d126150a5565b048301901c91506000828481613d2a57613d2a6150a5565b049050808310613d38578092505b5050919050565b6001600160a01b0382166000908152606860205260408120549003613d77576040516360f4985360e01b815260040160405180910390fd5b60648160ff161115613d9c5760405163119ea8ab60e31b815260040160405180910390fd5b6001600160a01b0382166000908152606860205260409020548190606690613dc690600190614d3e565b81548110613dd657613dd6614b41565b60009182526020808320909101805460ff94909416600160e01b0260ff60e01b19909416939093179092556001600160a01b0384168152606890915260409020547f29d12e74a55b3d297952b1d6eb3495d231fccb524ee0afc91cfbb3ed790e660790606690613e4890600190614d3e565b81548110613e5857613e58614b41565b9060005260206000200160405161139591906156a2565b600054610100900460ff16613e965760405162461bcd60e51b8152600401610a249061553f565b611a413361349b565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715613edd57613edd613e9f565b604052919050565b60006001600160401b03821115613efe57613efe613e9f565b5060051b60200190565b6001600160a01b0381168114612aa457600080fd5b600082601f830112613f2e57600080fd5b81356020613f43613f3e83613ee5565b613eb5565b82815260059290921b84018101918181019086841115613f6257600080fd5b8286015b84811015613f86578035613f7981613f08565b8352918301918301613f66565b509695505050505050565b60ff81168114612aa457600080fd5b600082601f830112613fb157600080fd5b81356020613fc1613f3e83613ee5565b82815260059290921b84018101918181019086841115613fe057600080fd5b8286015b84811015613f86578035613ff781613f91565b8352918301918301613fe4565b63ffffffff81168114612aa457600080fd5b600082601f83011261402757600080fd5b81356020614037613f3e83613ee5565b82815260059290921b8401810191818101908684111561405657600080fd5b8286015b84811015613f8657803561406d81614004565b835291830191830161405a565b60008060006060848603121561408f57600080fd5b83356001600160401b03808211156140a657600080fd5b6140b287838801613f1d565b945060208601359150808211156140c857600080fd5b6140d487838801613fa0565b935060408601359150808211156140ea57600080fd5b506140f786828701614016565b9150509250925092565b60008060006060848603121561411657600080fd5b83356001600160401b0381111561412c57600080fd5b61413886828701613f1d565b935050602084013561414981613f08565b9150604084013561415981613f08565b809150509250925092565b600082601f83011261417557600080fd5b81356020614185613f3e83613ee5565b82815260059290921b840181019181810190868411156141a457600080fd5b8286015b84811015613f8657803583529183019183016141a8565b600080600080600060a086880312156141d757600080fd5b85356001600160401b03808211156141ee57600080fd5b6141fa89838a01613f1d565b9650602088013591508082111561421057600080fd5b61421c89838a01613fa0565b9550604088013591508082111561423257600080fd5b61423e89838a01614016565b9450606088013591508082111561425457600080fd5b61426089838a01614016565b9350608088013591508082111561427657600080fd5b5061428388828901614164565b9150509295509295909350565b600080604083850312156142a357600080fd5b82356001600160401b03808211156142ba57600080fd5b6142c686838701614016565b935060208501359150808211156142dc57600080fd5b506142e985828601614164565b9150509250929050565b600080600080600060a0868803121561430b57600080fd5b853561431681613f08565b9450602086013561432681613f91565b9350604086013561433681614004565b925060608601356001600160401b038082111561425457600080fd5b60006020828403121561436457600080fd5b813561359781613f08565b80516001600160a01b0316825260208082015163ffffffff908116918401919091526040808301519091169083015260609081015160ff16910152565b608081016143ba828461436f565b92915050565b600080604083850312156143d357600080fd5b82356001600160401b038111156143e957600080fd5b6143f585828601613f1d565b925050602083013561440681613f08565b809150509250929050565b600082601f83011261442257600080fd5b81356001600160401b0381111561443b5761443b613e9f565b61444e601f8201601f1916602001613eb5565b81815284602083860101111561446357600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561449257600080fd5b81356001600160401b038111156144a857600080fd5b6144b484828501614411565b949350505050565b6000602082840312156144ce57600080fd5b81356001600160401b038111156144e457600080fd5b6144b484828501613f1d565b600081518084526020808501945080840160005b838110156145295781516001600160a01b031687529582019590820190600101614504565b509495945050505050565b600081518084526020808501945080840160005b8381101561452957815163ffffffff1687529582019590820190600101614548565b60408152600061457d60408301856144f0565b82810360208401526139cc8185614534565b600080600080608085870312156145a557600080fd5b84356001600160401b03808211156145bc57600080fd5b6145c888838901614016565b955060208701359150808211156145de57600080fd5b6145ea88838901613f1d565b9450604087013591508082111561460057600080fd5b61460c88838901614016565b9350606087013591508082111561462257600080fd5b5061462f87828801614164565b91505092959194509250565b60006020828403121561464d57600080fd5b5035919050565b60008060006060848603121561466957600080fd5b83356001600160401b038082111561468057600080fd5b61468c87838801613f1d565b945060208601359150808211156146a257600080fd5b6146ae87838801614016565b935060408601359150808211156146c457600080fd5b506140f786828701614164565b600080604083850312156146e457600080fd5b82356146ef81614004565b9150602083013561440681613f08565b60008060006060848603121561471457600080fd5b83356001600160401b038082111561472b57600080fd5b61473787838801614016565b9450602086013591508082111561474d57600080fd5b6146ae87838801613f1d565b600080828403608081121561476d57600080fd5b833561477881614004565b92506060601f198201121561478c57600080fd5b50604051606081018181106001600160401b03821117156147af576147af613e9f565b60405260208401356147c081614004565b815260408401356147d081613f08565b602082015260608401356147e381613f08565b6040820152919491935090915050565b60006020828403121561480557600080fd5b813561359781614004565b60008060006060848603121561482557600080fd5b833561483081613f08565b9250602084013561484081613f91565b9150604084013561415981614004565b6000806000806080858703121561486657600080fd5b84356001600160401b038082111561487d57600080fd5b61488988838901613f1d565b9550602087013591508082111561489f57600080fd5b6145ea88838901613fa0565b6020808252825182820181905260009190848201906040850190845b818110156148ed576148da83855161436f565b92840192608092909201916001016148c7565b50909695505050505050565b6000806040838503121561490c57600080fd5b823561491781613f08565b9150602083013561440681613f91565b6000806040838503121561493a57600080fd5b823561494581613f08565b9150602083013561440681614004565b6000806000806080858703121561496b57600080fd5b843561497681613f08565b9350602085013561498681613f91565b925060408501356001600160401b038082111561460057600080fd5b600080604083850312156149b557600080fd5b82356001600160401b03808211156149cc57600080fd5b6149d886838701613f1d565b935060208501359150808211156149ee57600080fd5b506142e985828601613fa0565b60008060008060008060c08789031215614a1457600080fd5b86359550602087013594506040870135614a2d81613f08565b93506060870135614a3d81613f08565b92506080870135614a4d81614004565b915060a08701356001600160401b03811115614a6857600080fd5b614a7489828a01614411565b9150509295509295509295565b60005b83811015614a9c578181015183820152602001614a84565b50506000910152565b60008151808452614abd816020860160208601614a81565b601f01601f19169290920160200192915050565b6020815260006135976020830184614aa5565b60208082526037908201527f4e6574776f726b52656769737472793a2063616c6c6572206973206e6f74206660408201527f6f726569676e2075706461746572206f72206f776e6572000000000000000000606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201614b7f57614b7f614b57565b5060010190565b600060018060a01b038089168352808816602084015260c06040840152614bb060c08401886144f0565b8381036060850152614bc28188614534565b63ffffffff969096166080850152509290921660a09091015250949350505050565b60208082526025908201527f4e6574776f726b52656769737472793a2057726f6e67206e6574776f726b20706040820152646172616d7360d81b606082015260800190565b808201808211156143ba576143ba614b57565b600060ff821660ff8103614c5257614c52614b57565b60010192915050565b6020808252603c908201527f4e6574776f726b52656769737472793a2056616c75652073656e74206e6f742060408201527f656e6f75676820746f20636f7665722072656c61796572206665657300000000606082015260800190565b600081518084526020808501945080840160005b8381101561452957815160ff1687529582019590820190600101614ccc565b63ffffffff60e01b85168152608060208201526000614d0d60808301866144f0565b8281036040840152614d1f8186614cb8565b90508281036060840152614d338185614534565b979650505050505050565b818103818111156143ba576143ba614b57565b600060018060a01b03808816835260a06020840152614d7360a08401886144f0565b8381036040850152614d858188614534565b63ffffffff9690961660608501525092909216608090910152509392505050565b80518015158114614db657600080fd5b919050565b60008060008060008060008060006101208a8c031215614dda57600080fd5b8951614de581613f08565b60208b0151909950614df681614004565b60408b0151909850614e0781613f08565b60608b0151909750614e1881613f08565b60808b0151909650614e2981613f08565b60a08b0151909550614e3a81614004565b60c08b0151909450614e4b81613f08565b60e08b01519093509150614e626101008b01614da6565b90509295985092959850929598565b6001600160a01b0385168152608060208201819052600090614e95908301866144f0565b8281036040840152614ea78186614534565b91505063ffffffff8316606083015295945050505050565b60208082526035908201527f4e6574776f726b52656769737472793a206e6574776f726b20706172616d73206040820152740d8cadccee8d040c8decae640dcdee840dac2e8c6d605b1b606082015260800190565b63ffffffff60e01b831681526040602082015260006144b460408301846144f0565b6001600160e01b03199290921682526001600160a01b0316602082015260400190565b6020808252601e908201527f50474e6574776f726b52656769737472795368616d616e3a2021696e69740000604082015260600190565b600060208284031215614fa257600080fd5b61359782614da6565b6020808252602e908201527f50474e6574776f726b52656769737472795368616d616e3a205368616d616e2060408201526d34b9903737ba1036b0b730b3b2b960911b606082015260800190565b60408152600061500c60408301856144f0565b82810360208481019190915284518083528582019282019060005b8181101561504357845183529383019391830191600101615027565b5090979650505050505050565b63ffffffff60e01b8416815260606020820152600061507260608301856144f0565b82810360408401526150848185614cb8565b9695505050505050565b80820281158282048414176143ba576143ba614b57565b634e487b7160e01b600052601260045260246000fd5b6000826150ca576150ca6150a5565b500490565b63ffffffff8181168382160190808211156150ec576150ec614b57565b5092915050565b63ffffffff8281168282160390808211156150ec576150ec614b57565b80516001600160e01b031981168114614db657600080fd5b60006020828403121561513a57600080fd5b61359782615110565b6000806000806080858703121561515957600080fd5b61516285615110565b9350602085015161517281613f08565b604086015190935061518381613f91565b606086015190925061519481614004565b939692955090935050565b6000806000606084860312156151b457600080fd5b6151bd84615110565b925060208401516151cd81613f08565b604085015190925061415981613f91565b600082601f8301126151ef57600080fd5b815160206151ff613f3e83613ee5565b82815260059290921b8401810191818101908684111561521e57600080fd5b8286015b84811015613f8657805161523581613f08565b8352918301918301615222565b600082601f83011261525357600080fd5b81516020615263613f3e83613ee5565b82815260059290921b8401810191818101908684111561528257600080fd5b8286015b84811015613f8657805161529981613f91565b8352918301918301615286565b600080600080608085870312156152bc57600080fd5b6152c585615110565b93506020808601516001600160401b03808211156152e257600080fd5b6152ee89838a016151de565b9550604088015191508082111561530457600080fd5b61531089838a01615242565b9450606088015191508082111561532657600080fd5b508601601f8101881361533857600080fd5b8051615346613f3e82613ee5565b81815260059190911b8201830190838101908a83111561536557600080fd5b928401925b8284101561538c57835161537d81614004565b8252928401929084019061536a565b979a9699509497505050505050565b6060815260006153ae60608301866144f0565b82810360208401526153c08186614cb8565b905082810360408401526150848185614534565b6000806000606084860312156153e957600080fd5b6153f284615110565b925060208401516001600160401b038082111561540e57600080fd5b61541a878388016151de565b9350604086015191508082111561543057600080fd5b506140f786828701615242565b60408152600061545060408301856144f0565b82810360208401526139cc8185614cb8565b6000806040838503121561547557600080fd5b61547e83615110565b915060208301516001600160401b0381111561549957600080fd5b6142e9858286016151de565b60208152600061359760208301846144f0565b600080604083850312156154cb57600080fd5b6154d483615110565b9150602083015161440681613f08565b6000806000606084860312156154f957600080fd5b61550284615110565b9250602084015161551281613f08565b604085015190925061415981614004565b60008251615535818460208701614a81565b9190910192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b63ffffffff8181168382160280821691908281146155aa576155aa614b57565b505092915050565b600063ffffffff808416806155c9576155c96150a5565b92169190910492915050565b546001600160a01b038116825260a081901c63ffffffff908116602084015260c082901c16604083015260e01c60ff16606090910152565b60a0810161561b82856155d5565b63ffffffff831660808301529392505050565b63ffffffff881681526001600160a01b0387811660208301528681166040830152851660608201526080810184905260a0810183905260e060c0820181905260009061567c90830184614aa5565b9998505050505050505050565b60006020828403121561569b57600080fd5b5051919050565b608081016143ba82846155d556fea164736f6c6343000813000a",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "PRBMath_UD60x18_Sqrt_Overflow(uint256)": [
        {
          "notice": "Thrown when calculating the square root overflows UD60x18."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "xReceive(bytes32,uint256,address,address,uint32,bytes)": {
        "notice": "The receiver function as required by the IXReceiver interface."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 829,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 832,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1316,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 701,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 821,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11624,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "lastUpdate",
        "offset": 0,
        "slot": "101",
        "type": "t_uint32"
      },
      {
        "astId": 11628,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "members",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_struct(Member)11622_storage)dyn_storage"
      },
      {
        "astId": 11631,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "count",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 11635,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "memberIdxs",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8505,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "connext",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IConnext)285"
      },
      {
        "astId": 8507,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "updaterDomain",
        "offset": 20,
        "slot": "105",
        "type": "t_uint32"
      },
      {
        "astId": 8509,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "updater",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 8514,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "networkRegistry",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_uint32,t_struct(NetworkRegistry)11142_storage)"
      },
      {
        "astId": 8517,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "splitMain",
        "offset": 0,
        "slot": "108",
        "type": "t_contract(ISplitMain)11518"
      },
      {
        "astId": 8519,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "split",
        "offset": 0,
        "slot": "109",
        "type": "t_address"
      },
      {
        "astId": 8521,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "splitDistributorFee",
        "offset": 20,
        "slot": "109",
        "type": "t_uint32"
      },
      {
        "astId": 10672,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "__gap",
        "offset": 0,
        "slot": "110",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 10684,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "baal",
        "offset": 0,
        "slot": "155",
        "type": "t_contract(IBaal)690"
      },
      {
        "astId": 10686,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "sharesToMint",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 10688,
        "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
        "label": "burnShares",
        "offset": 0,
        "slot": "157",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Member)11622_storage)dyn_storage": {
        "base": "t_struct(Member)11622_storage",
        "encoding": "dynamic_array",
        "label": "struct MemberRegistry.Member[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBaal)690": {
        "encoding": "inplace",
        "label": "contract IBaal",
        "numberOfBytes": "20"
      },
      "t_contract(IConnext)285": {
        "encoding": "inplace",
        "label": "contract IConnext",
        "numberOfBytes": "20"
      },
      "t_contract(ISplitMain)11518": {
        "encoding": "inplace",
        "label": "contract ISplitMain",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_struct(NetworkRegistry)11142_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct INetworkMemberRegistry.NetworkRegistry)",
        "numberOfBytes": "32",
        "value": "t_struct(NetworkRegistry)11142_storage"
      },
      "t_struct(Member)11622_storage": {
        "encoding": "inplace",
        "label": "struct MemberRegistry.Member",
        "members": [
          {
            "astId": 11615,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "account",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11617,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "secondsActive",
            "offset": 20,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11619,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "startDate",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11621,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "activityMultiplier",
            "offset": 28,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(NetworkRegistry)11142_storage": {
        "encoding": "inplace",
        "label": "struct INetworkMemberRegistry.NetworkRegistry",
        "members": [
          {
            "astId": 11137,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "domainId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 11139,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "registryAddress",
            "offset": 4,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11141,
            "contract": "contracts/NetworkRegistryShaman.sol:NetworkRegistryShaman",
            "label": "delegate",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}